// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XPriComp represents a row from 'x_showroom.x_pri_comp'.
type XPriComp struct {
	ID               uint           `json:"id"`                // id
	Value            string         `json:"value"`             // value
	PrimaryFlag      string         `json:"primary_flag"`      // primary_flag
	TypeCd           string         `json:"type_cd"`           // type_cd
	PricingAggregate string         `json:"pricing_aggregate"` // pricing_aggregate
	ProdID           uint           `json:"prod_id"`           // prod_id
	PriCompDefID     uint           `json:"pri_comp_def_id"`   // pri_comp_def_id
	PriDimID         uint           `json:"pri_dim_id"`        // pri_dim_id
	CreatedBy        uint           `json:"created_by"`        // created_by
	UpdatedBy        uint           `json:"updated_by"`        // updated_by
	CreatedAt        mysql.NullTime `json:"created_at"`        // created_at
	UpdatedAt        mysql.NullTime `json:"updated_at"`        // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XPriComp exists in the database.
func (xpc *XPriComp) Exists() bool {
	return xpc._exists
}

// Deleted provides information if the XPriComp has been deleted from the database.
func (xpc *XPriComp) Deleted() bool {
	return xpc._deleted
}

// Insert inserts the XPriComp to the database.
func (xpc *XPriComp) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xpc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_pri_comp (` +
		`value, primary_flag, type_cd, pricing_aggregate, prod_id, pri_comp_def_id, pri_dim_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xpc.Value, xpc.PrimaryFlag, xpc.TypeCd, xpc.PricingAggregate, xpc.ProdID, xpc.PriCompDefID, xpc.PriDimID, xpc.CreatedBy, xpc.UpdatedBy, xpc.CreatedAt, xpc.UpdatedAt)
	res, err := db.Exec(sqlstr, xpc.Value, xpc.PrimaryFlag, xpc.TypeCd, xpc.PricingAggregate, xpc.ProdID, xpc.PriCompDefID, xpc.PriDimID, xpc.CreatedBy, xpc.UpdatedBy, xpc.CreatedAt, xpc.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xpc.ID = uint(id)
	xpc._exists = true

	return nil
}

// Update updates the XPriComp in the database.
func (xpc *XPriComp) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xpc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_pri_comp SET ` +
		`value = ?, primary_flag = ?, type_cd = ?, pricing_aggregate = ?, prod_id = ?, pri_comp_def_id = ?, pri_dim_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xpc.Value, xpc.PrimaryFlag, xpc.TypeCd, xpc.PricingAggregate, xpc.ProdID, xpc.PriCompDefID, xpc.PriDimID, xpc.CreatedBy, xpc.UpdatedBy, xpc.CreatedAt, xpc.UpdatedAt, xpc.ID)
	_, err = db.Exec(sqlstr, xpc.Value, xpc.PrimaryFlag, xpc.TypeCd, xpc.PricingAggregate, xpc.ProdID, xpc.PriCompDefID, xpc.PriDimID, xpc.CreatedBy, xpc.UpdatedBy, xpc.CreatedAt, xpc.UpdatedAt, xpc.ID)
	return err
}

// Save saves the XPriComp to the database.
func (xpc *XPriComp) Save(db XODB) error {
	if xpc.Exists() {
		return xpc.Update(db)
	}

	return xpc.Insert(db)
}

// Delete deletes the XPriComp from the database.
func (xpc *XPriComp) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpc._exists {
		return nil
	}

	// if deleted, bail
	if xpc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_pri_comp WHERE id = ?`

	// run query
	XOLog(sqlstr, xpc.ID)
	_, err = db.Exec(sqlstr, xpc.ID)
	if err != nil {
		return err
	}

	// set deleted
	xpc._deleted = true

	return nil
}

// XPriCompsByCreatedBy retrieves a row from 'x_showroom.x_pri_comp' as a XPriComp.
//
// Generated from index 'x_pri_comp_created_by_foreign'.
func XPriCompsByCreatedBy(db XODB, createdBy uint) ([]*XPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, value, primary_flag, type_cd, pricing_aggregate, prod_id, pri_comp_def_id, pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriComp{}
	for q.Next() {
		xpc := XPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpc.ID, &xpc.Value, &xpc.PrimaryFlag, &xpc.TypeCd, &xpc.PricingAggregate, &xpc.ProdID, &xpc.PriCompDefID, &xpc.PriDimID, &xpc.CreatedBy, &xpc.UpdatedBy, &xpc.CreatedAt, &xpc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpc)
	}

	return res, nil
}

// XPriCompByID retrieves a row from 'x_showroom.x_pri_comp' as a XPriComp.
//
// Generated from index 'x_pri_comp_id_pkey'.
func XPriCompByID(db XODB, id uint) (*XPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, value, primary_flag, type_cd, pricing_aggregate, prod_id, pri_comp_def_id, pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xpc := XPriComp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xpc.ID, &xpc.Value, &xpc.PrimaryFlag, &xpc.TypeCd, &xpc.PricingAggregate, &xpc.ProdID, &xpc.PriCompDefID, &xpc.PriDimID, &xpc.CreatedBy, &xpc.UpdatedBy, &xpc.CreatedAt, &xpc.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xpc, nil
}

// XPriCompsByPriCompDefID retrieves a row from 'x_showroom.x_pri_comp' as a XPriComp.
//
// Generated from index 'x_pri_comp_pri_comp_def_id_foreign'.
func XPriCompsByPriCompDefID(db XODB, priCompDefID uint) ([]*XPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, value, primary_flag, type_cd, pricing_aggregate, prod_id, pri_comp_def_id, pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp ` +
		`WHERE pri_comp_def_id = ?`

	// run query
	XOLog(sqlstr, priCompDefID)
	q, err := db.Query(sqlstr, priCompDefID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriComp{}
	for q.Next() {
		xpc := XPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpc.ID, &xpc.Value, &xpc.PrimaryFlag, &xpc.TypeCd, &xpc.PricingAggregate, &xpc.ProdID, &xpc.PriCompDefID, &xpc.PriDimID, &xpc.CreatedBy, &xpc.UpdatedBy, &xpc.CreatedAt, &xpc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpc)
	}

	return res, nil
}

// XPriCompsByPriDimID retrieves a row from 'x_showroom.x_pri_comp' as a XPriComp.
//
// Generated from index 'x_pri_comp_pri_dim_id_foreign'.
func XPriCompsByPriDimID(db XODB, priDimID uint) ([]*XPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, value, primary_flag, type_cd, pricing_aggregate, prod_id, pri_comp_def_id, pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp ` +
		`WHERE pri_dim_id = ?`

	// run query
	XOLog(sqlstr, priDimID)
	q, err := db.Query(sqlstr, priDimID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriComp{}
	for q.Next() {
		xpc := XPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpc.ID, &xpc.Value, &xpc.PrimaryFlag, &xpc.TypeCd, &xpc.PricingAggregate, &xpc.ProdID, &xpc.PriCompDefID, &xpc.PriDimID, &xpc.CreatedBy, &xpc.UpdatedBy, &xpc.CreatedAt, &xpc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpc)
	}

	return res, nil
}

// XPriCompsByProdID retrieves a row from 'x_showroom.x_pri_comp' as a XPriComp.
//
// Generated from index 'x_pri_comp_prod_id_foreign'.
func XPriCompsByProdID(db XODB, prodID uint) ([]*XPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, value, primary_flag, type_cd, pricing_aggregate, prod_id, pri_comp_def_id, pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp ` +
		`WHERE prod_id = ?`

	// run query
	XOLog(sqlstr, prodID)
	q, err := db.Query(sqlstr, prodID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriComp{}
	for q.Next() {
		xpc := XPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpc.ID, &xpc.Value, &xpc.PrimaryFlag, &xpc.TypeCd, &xpc.PricingAggregate, &xpc.ProdID, &xpc.PriCompDefID, &xpc.PriDimID, &xpc.CreatedBy, &xpc.UpdatedBy, &xpc.CreatedAt, &xpc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpc)
	}

	return res, nil
}

// XPriCompsByUpdatedBy retrieves a row from 'x_showroom.x_pri_comp' as a XPriComp.
//
// Generated from index 'x_pri_comp_updated_by_foreign'.
func XPriCompsByUpdatedBy(db XODB, updatedBy uint) ([]*XPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, value, primary_flag, type_cd, pricing_aggregate, prod_id, pri_comp_def_id, pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriComp{}
	for q.Next() {
		xpc := XPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpc.ID, &xpc.Value, &xpc.PrimaryFlag, &xpc.TypeCd, &xpc.PricingAggregate, &xpc.ProdID, &xpc.PriCompDefID, &xpc.PriDimID, &xpc.CreatedBy, &xpc.UpdatedBy, &xpc.CreatedAt, &xpc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpc)
	}

	return res, nil
}
