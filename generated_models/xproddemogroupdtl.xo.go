// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XProdDemoGroupDtl represents a row from 'x_showroom.x_prod_demo_group_dtl'.
type XProdDemoGroupDtl struct {
	ID                uint            `json:"id"`                    // id
	ActionCode        sql.NullString  `json:"action_code"`           // action_code
	Name              string          `json:"name"`                  // name
	DisplayName       sql.NullString  `json:"display_name"`          // display_name
	TypeCd            string          `json:"type_cd"`               // type_cd
	Value             sql.NullString  `json:"value"`                 // value
	Height            string          `json:"height"`                // height
	StyleCd           sql.NullString  `json:"style_cd"`              // style_cd
	SeqNum            sql.NullInt64   `json:"seq_num"`               // seq_num
	AttID             sql.NullInt64   `json:"att_id"`                // att_id
	ThumbnailAttID    sql.NullInt64   `json:"thumbnail_att_id"`      // thumbnail_att_id
	AttTypeCd         sql.NullString  `json:"att_type_cd"`           // att_type_cd
	SeqGrpStyle       sql.NullString  `json:"seq_grp_style"`         // seq_grp_style
	SeqGrpNum         int             `json:"seq_grp_num"`           // seq_grp_num
	DescTextLine1     sql.NullString  `json:"desc_text_line_1"`      // desc_text_line_1
	DescTextLine2     sql.NullString  `json:"desc_text_line_2"`      // desc_text_line_2
	DescTextLine3     sql.NullString  `json:"desc_text_line_3"`      // desc_text_line_3
	ProdDemoGrpID     uint            `json:"prod_demo_grp_id"`      // prod_demo_grp_id
	CreatedBy         uint            `json:"created_by"`            // created_by
	UpdatedBy         uint            `json:"updated_by"`            // updated_by
	CreatedAt         mysql.NullTime  `json:"created_at"`            // created_at
	UpdatedAt         mysql.NullTime  `json:"updated_at"`            // updated_at
	Width             sql.NullFloat64 `json:"width"`                 // width
	Alpha             sql.NullFloat64 `json:"alpha"`                 // alpha
	DemoGroupDefDtlID sql.NullInt64   `json:"demo_group_def_dtl_id"` // demo_group_def_dtl_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XProdDemoGroupDtl exists in the database.
func (xpdgd *XProdDemoGroupDtl) Exists() bool {
	return xpdgd._exists
}

// Deleted provides information if the XProdDemoGroupDtl has been deleted from the database.
func (xpdgd *XProdDemoGroupDtl) Deleted() bool {
	return xpdgd._deleted
}

// Insert inserts the XProdDemoGroupDtl to the database.
func (xpdgd *XProdDemoGroupDtl) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xpdgd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_prod_demo_group_dtl (` +
		`action_code, name, display_name, type_cd, value, height, style_cd, seq_num, att_id, thumbnail_att_id, att_type_cd, seq_grp_style, seq_grp_num, desc_text_line_1, desc_text_line_2, desc_text_line_3, prod_demo_grp_id, created_by, updated_by, created_at, updated_at, width, alpha, demo_group_def_dtl_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xpdgd.ActionCode, xpdgd.Name, xpdgd.DisplayName, xpdgd.TypeCd, xpdgd.Value, xpdgd.Height, xpdgd.StyleCd, xpdgd.SeqNum, xpdgd.AttID, xpdgd.ThumbnailAttID, xpdgd.AttTypeCd, xpdgd.SeqGrpStyle, xpdgd.SeqGrpNum, xpdgd.DescTextLine1, xpdgd.DescTextLine2, xpdgd.DescTextLine3, xpdgd.ProdDemoGrpID, xpdgd.CreatedBy, xpdgd.UpdatedBy, xpdgd.CreatedAt, xpdgd.UpdatedAt, xpdgd.Width, xpdgd.Alpha, xpdgd.DemoGroupDefDtlID)
	res, err := db.Exec(sqlstr, xpdgd.ActionCode, xpdgd.Name, xpdgd.DisplayName, xpdgd.TypeCd, xpdgd.Value, xpdgd.Height, xpdgd.StyleCd, xpdgd.SeqNum, xpdgd.AttID, xpdgd.ThumbnailAttID, xpdgd.AttTypeCd, xpdgd.SeqGrpStyle, xpdgd.SeqGrpNum, xpdgd.DescTextLine1, xpdgd.DescTextLine2, xpdgd.DescTextLine3, xpdgd.ProdDemoGrpID, xpdgd.CreatedBy, xpdgd.UpdatedBy, xpdgd.CreatedAt, xpdgd.UpdatedAt, xpdgd.Width, xpdgd.Alpha, xpdgd.DemoGroupDefDtlID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xpdgd.ID = uint(id)
	xpdgd._exists = true

	return nil
}

// Update updates the XProdDemoGroupDtl in the database.
func (xpdgd *XProdDemoGroupDtl) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpdgd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xpdgd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_prod_demo_group_dtl SET ` +
		`action_code = ?, name = ?, display_name = ?, type_cd = ?, value = ?, height = ?, style_cd = ?, seq_num = ?, att_id = ?, thumbnail_att_id = ?, att_type_cd = ?, seq_grp_style = ?, seq_grp_num = ?, desc_text_line_1 = ?, desc_text_line_2 = ?, desc_text_line_3 = ?, prod_demo_grp_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?, width = ?, alpha = ?, demo_group_def_dtl_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xpdgd.ActionCode, xpdgd.Name, xpdgd.DisplayName, xpdgd.TypeCd, xpdgd.Value, xpdgd.Height, xpdgd.StyleCd, xpdgd.SeqNum, xpdgd.AttID, xpdgd.ThumbnailAttID, xpdgd.AttTypeCd, xpdgd.SeqGrpStyle, xpdgd.SeqGrpNum, xpdgd.DescTextLine1, xpdgd.DescTextLine2, xpdgd.DescTextLine3, xpdgd.ProdDemoGrpID, xpdgd.CreatedBy, xpdgd.UpdatedBy, xpdgd.CreatedAt, xpdgd.UpdatedAt, xpdgd.Width, xpdgd.Alpha, xpdgd.DemoGroupDefDtlID, xpdgd.ID)
	_, err = db.Exec(sqlstr, xpdgd.ActionCode, xpdgd.Name, xpdgd.DisplayName, xpdgd.TypeCd, xpdgd.Value, xpdgd.Height, xpdgd.StyleCd, xpdgd.SeqNum, xpdgd.AttID, xpdgd.ThumbnailAttID, xpdgd.AttTypeCd, xpdgd.SeqGrpStyle, xpdgd.SeqGrpNum, xpdgd.DescTextLine1, xpdgd.DescTextLine2, xpdgd.DescTextLine3, xpdgd.ProdDemoGrpID, xpdgd.CreatedBy, xpdgd.UpdatedBy, xpdgd.CreatedAt, xpdgd.UpdatedAt, xpdgd.Width, xpdgd.Alpha, xpdgd.DemoGroupDefDtlID, xpdgd.ID)
	return err
}

// Save saves the XProdDemoGroupDtl to the database.
func (xpdgd *XProdDemoGroupDtl) Save(db XODB) error {
	if xpdgd.Exists() {
		return xpdgd.Update(db)
	}

	return xpdgd.Insert(db)
}

// Delete deletes the XProdDemoGroupDtl from the database.
func (xpdgd *XProdDemoGroupDtl) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpdgd._exists {
		return nil
	}

	// if deleted, bail
	if xpdgd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_prod_demo_group_dtl WHERE id = ?`

	// run query
	XOLog(sqlstr, xpdgd.ID)
	_, err = db.Exec(sqlstr, xpdgd.ID)
	if err != nil {
		return err
	}

	// set deleted
	xpdgd._deleted = true

	return nil
}

// XProdDemoGroupDtlsByCreatedBy retrieves a row from 'x_showroom.x_prod_demo_group_dtl' as a XProdDemoGroupDtl.
//
// Generated from index 'x_prod_demo_group_dtl_created_by_foreign'.
func XProdDemoGroupDtlsByCreatedBy(db XODB, createdBy uint) ([]*XProdDemoGroupDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, action_code, name, display_name, type_cd, value, height, style_cd, seq_num, att_id, thumbnail_att_id, att_type_cd, seq_grp_style, seq_grp_num, desc_text_line_1, desc_text_line_2, desc_text_line_3, prod_demo_grp_id, created_by, updated_by, created_at, updated_at, width, alpha, demo_group_def_dtl_id ` +
		`FROM x_showroom.x_prod_demo_group_dtl ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdDemoGroupDtl{}
	for q.Next() {
		xpdgd := XProdDemoGroupDtl{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpdgd.ID, &xpdgd.ActionCode, &xpdgd.Name, &xpdgd.DisplayName, &xpdgd.TypeCd, &xpdgd.Value, &xpdgd.Height, &xpdgd.StyleCd, &xpdgd.SeqNum, &xpdgd.AttID, &xpdgd.ThumbnailAttID, &xpdgd.AttTypeCd, &xpdgd.SeqGrpStyle, &xpdgd.SeqGrpNum, &xpdgd.DescTextLine1, &xpdgd.DescTextLine2, &xpdgd.DescTextLine3, &xpdgd.ProdDemoGrpID, &xpdgd.CreatedBy, &xpdgd.UpdatedBy, &xpdgd.CreatedAt, &xpdgd.UpdatedAt, &xpdgd.Width, &xpdgd.Alpha, &xpdgd.DemoGroupDefDtlID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpdgd)
	}

	return res, nil
}

// XProdDemoGroupDtlsByDemoGroupDefDtlID retrieves a row from 'x_showroom.x_prod_demo_group_dtl' as a XProdDemoGroupDtl.
//
// Generated from index 'x_prod_demo_group_dtl_demo_group_def_dtl_id_foreign'.
func XProdDemoGroupDtlsByDemoGroupDefDtlID(db XODB, demoGroupDefDtlID sql.NullInt64) ([]*XProdDemoGroupDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, action_code, name, display_name, type_cd, value, height, style_cd, seq_num, att_id, thumbnail_att_id, att_type_cd, seq_grp_style, seq_grp_num, desc_text_line_1, desc_text_line_2, desc_text_line_3, prod_demo_grp_id, created_by, updated_by, created_at, updated_at, width, alpha, demo_group_def_dtl_id ` +
		`FROM x_showroom.x_prod_demo_group_dtl ` +
		`WHERE demo_group_def_dtl_id = ?`

	// run query
	XOLog(sqlstr, demoGroupDefDtlID)
	q, err := db.Query(sqlstr, demoGroupDefDtlID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdDemoGroupDtl{}
	for q.Next() {
		xpdgd := XProdDemoGroupDtl{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpdgd.ID, &xpdgd.ActionCode, &xpdgd.Name, &xpdgd.DisplayName, &xpdgd.TypeCd, &xpdgd.Value, &xpdgd.Height, &xpdgd.StyleCd, &xpdgd.SeqNum, &xpdgd.AttID, &xpdgd.ThumbnailAttID, &xpdgd.AttTypeCd, &xpdgd.SeqGrpStyle, &xpdgd.SeqGrpNum, &xpdgd.DescTextLine1, &xpdgd.DescTextLine2, &xpdgd.DescTextLine3, &xpdgd.ProdDemoGrpID, &xpdgd.CreatedBy, &xpdgd.UpdatedBy, &xpdgd.CreatedAt, &xpdgd.UpdatedAt, &xpdgd.Width, &xpdgd.Alpha, &xpdgd.DemoGroupDefDtlID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpdgd)
	}

	return res, nil
}

// XProdDemoGroupDtlByID retrieves a row from 'x_showroom.x_prod_demo_group_dtl' as a XProdDemoGroupDtl.
//
// Generated from index 'x_prod_demo_group_dtl_id_pkey'.
func XProdDemoGroupDtlByID(db XODB, id uint) (*XProdDemoGroupDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, action_code, name, display_name, type_cd, value, height, style_cd, seq_num, att_id, thumbnail_att_id, att_type_cd, seq_grp_style, seq_grp_num, desc_text_line_1, desc_text_line_2, desc_text_line_3, prod_demo_grp_id, created_by, updated_by, created_at, updated_at, width, alpha, demo_group_def_dtl_id ` +
		`FROM x_showroom.x_prod_demo_group_dtl ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xpdgd := XProdDemoGroupDtl{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xpdgd.ID, &xpdgd.ActionCode, &xpdgd.Name, &xpdgd.DisplayName, &xpdgd.TypeCd, &xpdgd.Value, &xpdgd.Height, &xpdgd.StyleCd, &xpdgd.SeqNum, &xpdgd.AttID, &xpdgd.ThumbnailAttID, &xpdgd.AttTypeCd, &xpdgd.SeqGrpStyle, &xpdgd.SeqGrpNum, &xpdgd.DescTextLine1, &xpdgd.DescTextLine2, &xpdgd.DescTextLine3, &xpdgd.ProdDemoGrpID, &xpdgd.CreatedBy, &xpdgd.UpdatedBy, &xpdgd.CreatedAt, &xpdgd.UpdatedAt, &xpdgd.Width, &xpdgd.Alpha, &xpdgd.DemoGroupDefDtlID)
	if err != nil {
		return nil, err
	}

	return &xpdgd, nil
}

// XProdDemoGroupDtlByNameTypeCdProdDemoGrpID retrieves a row from 'x_showroom.x_prod_demo_group_dtl' as a XProdDemoGroupDtl.
//
// Generated from index 'x_prod_demo_group_dtl_name_type_cd_prod_demo_grp_id_unique'.
func XProdDemoGroupDtlByNameTypeCdProdDemoGrpID(db XODB, name string, typeCd string, prodDemoGrpID uint) (*XProdDemoGroupDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, action_code, name, display_name, type_cd, value, height, style_cd, seq_num, att_id, thumbnail_att_id, att_type_cd, seq_grp_style, seq_grp_num, desc_text_line_1, desc_text_line_2, desc_text_line_3, prod_demo_grp_id, created_by, updated_by, created_at, updated_at, width, alpha, demo_group_def_dtl_id ` +
		`FROM x_showroom.x_prod_demo_group_dtl ` +
		`WHERE name = ? AND type_cd = ? AND prod_demo_grp_id = ?`

	// run query
	XOLog(sqlstr, name, typeCd, prodDemoGrpID)
	xpdgd := XProdDemoGroupDtl{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, typeCd, prodDemoGrpID).Scan(&xpdgd.ID, &xpdgd.ActionCode, &xpdgd.Name, &xpdgd.DisplayName, &xpdgd.TypeCd, &xpdgd.Value, &xpdgd.Height, &xpdgd.StyleCd, &xpdgd.SeqNum, &xpdgd.AttID, &xpdgd.ThumbnailAttID, &xpdgd.AttTypeCd, &xpdgd.SeqGrpStyle, &xpdgd.SeqGrpNum, &xpdgd.DescTextLine1, &xpdgd.DescTextLine2, &xpdgd.DescTextLine3, &xpdgd.ProdDemoGrpID, &xpdgd.CreatedBy, &xpdgd.UpdatedBy, &xpdgd.CreatedAt, &xpdgd.UpdatedAt, &xpdgd.Width, &xpdgd.Alpha, &xpdgd.DemoGroupDefDtlID)
	if err != nil {
		return nil, err
	}

	return &xpdgd, nil
}

// XProdDemoGroupDtlsByProdDemoGrpID retrieves a row from 'x_showroom.x_prod_demo_group_dtl' as a XProdDemoGroupDtl.
//
// Generated from index 'x_prod_demo_group_dtl_prod_demo_grp_id_foreign'.
func XProdDemoGroupDtlsByProdDemoGrpID(db XODB, prodDemoGrpID uint) ([]*XProdDemoGroupDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, action_code, name, display_name, type_cd, value, height, style_cd, seq_num, att_id, thumbnail_att_id, att_type_cd, seq_grp_style, seq_grp_num, desc_text_line_1, desc_text_line_2, desc_text_line_3, prod_demo_grp_id, created_by, updated_by, created_at, updated_at, width, alpha, demo_group_def_dtl_id ` +
		`FROM x_showroom.x_prod_demo_group_dtl ` +
		`WHERE prod_demo_grp_id = ?`

	// run query
	XOLog(sqlstr, prodDemoGrpID)
	q, err := db.Query(sqlstr, prodDemoGrpID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdDemoGroupDtl{}
	for q.Next() {
		xpdgd := XProdDemoGroupDtl{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpdgd.ID, &xpdgd.ActionCode, &xpdgd.Name, &xpdgd.DisplayName, &xpdgd.TypeCd, &xpdgd.Value, &xpdgd.Height, &xpdgd.StyleCd, &xpdgd.SeqNum, &xpdgd.AttID, &xpdgd.ThumbnailAttID, &xpdgd.AttTypeCd, &xpdgd.SeqGrpStyle, &xpdgd.SeqGrpNum, &xpdgd.DescTextLine1, &xpdgd.DescTextLine2, &xpdgd.DescTextLine3, &xpdgd.ProdDemoGrpID, &xpdgd.CreatedBy, &xpdgd.UpdatedBy, &xpdgd.CreatedAt, &xpdgd.UpdatedAt, &xpdgd.Width, &xpdgd.Alpha, &xpdgd.DemoGroupDefDtlID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpdgd)
	}

	return res, nil
}

// XProdDemoGroupDtlsByUpdatedBy retrieves a row from 'x_showroom.x_prod_demo_group_dtl' as a XProdDemoGroupDtl.
//
// Generated from index 'x_prod_demo_group_dtl_updated_by_foreign'.
func XProdDemoGroupDtlsByUpdatedBy(db XODB, updatedBy uint) ([]*XProdDemoGroupDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, action_code, name, display_name, type_cd, value, height, style_cd, seq_num, att_id, thumbnail_att_id, att_type_cd, seq_grp_style, seq_grp_num, desc_text_line_1, desc_text_line_2, desc_text_line_3, prod_demo_grp_id, created_by, updated_by, created_at, updated_at, width, alpha, demo_group_def_dtl_id ` +
		`FROM x_showroom.x_prod_demo_group_dtl ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdDemoGroupDtl{}
	for q.Next() {
		xpdgd := XProdDemoGroupDtl{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpdgd.ID, &xpdgd.ActionCode, &xpdgd.Name, &xpdgd.DisplayName, &xpdgd.TypeCd, &xpdgd.Value, &xpdgd.Height, &xpdgd.StyleCd, &xpdgd.SeqNum, &xpdgd.AttID, &xpdgd.ThumbnailAttID, &xpdgd.AttTypeCd, &xpdgd.SeqGrpStyle, &xpdgd.SeqGrpNum, &xpdgd.DescTextLine1, &xpdgd.DescTextLine2, &xpdgd.DescTextLine3, &xpdgd.ProdDemoGrpID, &xpdgd.CreatedBy, &xpdgd.UpdatedBy, &xpdgd.CreatedAt, &xpdgd.UpdatedAt, &xpdgd.Width, &xpdgd.Alpha, &xpdgd.DemoGroupDefDtlID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpdgd)
	}

	return res, nil
}
