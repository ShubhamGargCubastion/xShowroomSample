// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XPriDim represents a row from 'x_showroom.x_pri_dim'.
type XPriDim struct {
	ID        uint           `json:"id"`         // id
	Value     string         `json:"value"`      // value
	ProdID    uint           `json:"prod_id"`    // prod_id
	PriDdID   uint           `json:"pri_dd_id"`  // pri_dd_id
	CreatedBy uint           `json:"created_by"` // created_by
	UpdatedBy uint           `json:"updated_by"` // updated_by
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XPriDim exists in the database.
func (xpd *XPriDim) Exists() bool {
	return xpd._exists
}

// Deleted provides information if the XPriDim has been deleted from the database.
func (xpd *XPriDim) Deleted() bool {
	return xpd._deleted
}

// Insert inserts the XPriDim to the database.
func (xpd *XPriDim) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xpd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_pri_dim (` +
		`value, prod_id, pri_dd_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xpd.Value, xpd.ProdID, xpd.PriDdID, xpd.CreatedBy, xpd.UpdatedBy, xpd.CreatedAt, xpd.UpdatedAt)
	res, err := db.Exec(sqlstr, xpd.Value, xpd.ProdID, xpd.PriDdID, xpd.CreatedBy, xpd.UpdatedBy, xpd.CreatedAt, xpd.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xpd.ID = uint(id)
	xpd._exists = true

	return nil
}

// Update updates the XPriDim in the database.
func (xpd *XPriDim) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xpd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_pri_dim SET ` +
		`value = ?, prod_id = ?, pri_dd_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xpd.Value, xpd.ProdID, xpd.PriDdID, xpd.CreatedBy, xpd.UpdatedBy, xpd.CreatedAt, xpd.UpdatedAt, xpd.ID)
	_, err = db.Exec(sqlstr, xpd.Value, xpd.ProdID, xpd.PriDdID, xpd.CreatedBy, xpd.UpdatedBy, xpd.CreatedAt, xpd.UpdatedAt, xpd.ID)
	return err
}

// Save saves the XPriDim to the database.
func (xpd *XPriDim) Save(db XODB) error {
	if xpd.Exists() {
		return xpd.Update(db)
	}

	return xpd.Insert(db)
}

// Delete deletes the XPriDim from the database.
func (xpd *XPriDim) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpd._exists {
		return nil
	}

	// if deleted, bail
	if xpd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_pri_dim WHERE id = ?`

	// run query
	XOLog(sqlstr, xpd.ID)
	_, err = db.Exec(sqlstr, xpd.ID)
	if err != nil {
		return err
	}

	// set deleted
	xpd._deleted = true

	return nil
}

// XPriDimsByCreatedBy retrieves a row from 'x_showroom.x_pri_dim' as a XPriDim.
//
// Generated from index 'x_pri_dim_created_by_foreign'.
func XPriDimsByCreatedBy(db XODB, createdBy uint) ([]*XPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, value, prod_id, pri_dd_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_dim ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriDim{}
	for q.Next() {
		xpd := XPriDim{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpd.ID, &xpd.Value, &xpd.ProdID, &xpd.PriDdID, &xpd.CreatedBy, &xpd.UpdatedBy, &xpd.CreatedAt, &xpd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpd)
	}

	return res, nil
}

// XPriDimByID retrieves a row from 'x_showroom.x_pri_dim' as a XPriDim.
//
// Generated from index 'x_pri_dim_id_pkey'.
func XPriDimByID(db XODB, id uint) (*XPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, value, prod_id, pri_dd_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_dim ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xpd := XPriDim{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xpd.ID, &xpd.Value, &xpd.ProdID, &xpd.PriDdID, &xpd.CreatedBy, &xpd.UpdatedBy, &xpd.CreatedAt, &xpd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xpd, nil
}

// XPriDimsByPriDdID retrieves a row from 'x_showroom.x_pri_dim' as a XPriDim.
//
// Generated from index 'x_pri_dim_pri_dd_id_foreign'.
func XPriDimsByPriDdID(db XODB, priDdID uint) ([]*XPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, value, prod_id, pri_dd_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_dim ` +
		`WHERE pri_dd_id = ?`

	// run query
	XOLog(sqlstr, priDdID)
	q, err := db.Query(sqlstr, priDdID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriDim{}
	for q.Next() {
		xpd := XPriDim{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpd.ID, &xpd.Value, &xpd.ProdID, &xpd.PriDdID, &xpd.CreatedBy, &xpd.UpdatedBy, &xpd.CreatedAt, &xpd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpd)
	}

	return res, nil
}

// XPriDimsByProdID retrieves a row from 'x_showroom.x_pri_dim' as a XPriDim.
//
// Generated from index 'x_pri_dim_prod_id_foreign'.
func XPriDimsByProdID(db XODB, prodID uint) ([]*XPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, value, prod_id, pri_dd_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_dim ` +
		`WHERE prod_id = ?`

	// run query
	XOLog(sqlstr, prodID)
	q, err := db.Query(sqlstr, prodID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriDim{}
	for q.Next() {
		xpd := XPriDim{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpd.ID, &xpd.Value, &xpd.ProdID, &xpd.PriDdID, &xpd.CreatedBy, &xpd.UpdatedBy, &xpd.CreatedAt, &xpd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpd)
	}

	return res, nil
}

// XPriDimsByUpdatedBy retrieves a row from 'x_showroom.x_pri_dim' as a XPriDim.
//
// Generated from index 'x_pri_dim_updated_by_foreign'.
func XPriDimsByUpdatedBy(db XODB, updatedBy uint) ([]*XPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, value, prod_id, pri_dd_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_dim ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriDim{}
	for q.Next() {
		xpd := XPriDim{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpd.ID, &xpd.Value, &xpd.ProdID, &xpd.PriDdID, &xpd.CreatedBy, &xpd.UpdatedBy, &xpd.CreatedAt, &xpd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpd)
	}

	return res, nil
}
