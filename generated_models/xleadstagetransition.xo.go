// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XLeadStageTransition represents a row from 'x_showroom.x_lead_stage_transition'.
type XLeadStageTransition struct {
	ID             uint           `json:"id"`               // id
	StageCd        string         `json:"stage_cd"`         // stage_cd
	StatusCd       string         `json:"status_cd"`        // status_cd
	CloseDtQuarter string         `json:"close_dt_quarter"` // close_dt_quarter
	CloseDtMonth   int            `json:"close_dt_month"`   // close_dt_month
	StageDuration  int            `json:"stage_duration"`   // stage_duration
	LeadID         uint           `json:"lead_id"`          // lead_id
	OwnerID        uint           `json:"owner_id"`         // owner_id
	CloseDtYear    string         `json:"close_dt_year"`    // close_dt_year
	CreatedBy      uint           `json:"created_by"`       // created_by
	UpdatedBy      uint           `json:"updated_by"`       // updated_by
	CreatedAt      mysql.NullTime `json:"created_at"`       // created_at
	UpdatedAt      mysql.NullTime `json:"updated_at"`       // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XLeadStageTransition exists in the database.
func (xlst *XLeadStageTransition) Exists() bool {
	return xlst._exists
}

// Deleted provides information if the XLeadStageTransition has been deleted from the database.
func (xlst *XLeadStageTransition) Deleted() bool {
	return xlst._deleted
}

// Insert inserts the XLeadStageTransition to the database.
func (xlst *XLeadStageTransition) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xlst._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_lead_stage_transition (` +
		`stage_cd, status_cd, close_dt_quarter, close_dt_month, stage_duration, lead_id, owner_id, close_dt_year, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xlst.StageCd, xlst.StatusCd, xlst.CloseDtQuarter, xlst.CloseDtMonth, xlst.StageDuration, xlst.LeadID, xlst.OwnerID, xlst.CloseDtYear, xlst.CreatedBy, xlst.UpdatedBy, xlst.CreatedAt, xlst.UpdatedAt)
	res, err := db.Exec(sqlstr, xlst.StageCd, xlst.StatusCd, xlst.CloseDtQuarter, xlst.CloseDtMonth, xlst.StageDuration, xlst.LeadID, xlst.OwnerID, xlst.CloseDtYear, xlst.CreatedBy, xlst.UpdatedBy, xlst.CreatedAt, xlst.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xlst.ID = uint(id)
	xlst._exists = true

	return nil
}

// Update updates the XLeadStageTransition in the database.
func (xlst *XLeadStageTransition) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xlst._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xlst._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_lead_stage_transition SET ` +
		`stage_cd = ?, status_cd = ?, close_dt_quarter = ?, close_dt_month = ?, stage_duration = ?, lead_id = ?, owner_id = ?, close_dt_year = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xlst.StageCd, xlst.StatusCd, xlst.CloseDtQuarter, xlst.CloseDtMonth, xlst.StageDuration, xlst.LeadID, xlst.OwnerID, xlst.CloseDtYear, xlst.CreatedBy, xlst.UpdatedBy, xlst.CreatedAt, xlst.UpdatedAt, xlst.ID)
	_, err = db.Exec(sqlstr, xlst.StageCd, xlst.StatusCd, xlst.CloseDtQuarter, xlst.CloseDtMonth, xlst.StageDuration, xlst.LeadID, xlst.OwnerID, xlst.CloseDtYear, xlst.CreatedBy, xlst.UpdatedBy, xlst.CreatedAt, xlst.UpdatedAt, xlst.ID)
	return err
}

// Save saves the XLeadStageTransition to the database.
func (xlst *XLeadStageTransition) Save(db XODB) error {
	if xlst.Exists() {
		return xlst.Update(db)
	}

	return xlst.Insert(db)
}

// Delete deletes the XLeadStageTransition from the database.
func (xlst *XLeadStageTransition) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xlst._exists {
		return nil
	}

	// if deleted, bail
	if xlst._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_lead_stage_transition WHERE id = ?`

	// run query
	XOLog(sqlstr, xlst.ID)
	_, err = db.Exec(sqlstr, xlst.ID)
	if err != nil {
		return err
	}

	// set deleted
	xlst._deleted = true

	return nil
}

// XLeadStageTransitionsByCreatedBy retrieves a row from 'x_showroom.x_lead_stage_transition' as a XLeadStageTransition.
//
// Generated from index 'x_lead_stage_transition_created_by_foreign'.
func XLeadStageTransitionsByCreatedBy(db XODB, createdBy uint) ([]*XLeadStageTransition, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, stage_cd, status_cd, close_dt_quarter, close_dt_month, stage_duration, lead_id, owner_id, close_dt_year, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_stage_transition ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadStageTransition{}
	for q.Next() {
		xlst := XLeadStageTransition{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlst.ID, &xlst.StageCd, &xlst.StatusCd, &xlst.CloseDtQuarter, &xlst.CloseDtMonth, &xlst.StageDuration, &xlst.LeadID, &xlst.OwnerID, &xlst.CloseDtYear, &xlst.CreatedBy, &xlst.UpdatedBy, &xlst.CreatedAt, &xlst.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlst)
	}

	return res, nil
}

// XLeadStageTransitionByID retrieves a row from 'x_showroom.x_lead_stage_transition' as a XLeadStageTransition.
//
// Generated from index 'x_lead_stage_transition_id_pkey'.
func XLeadStageTransitionByID(db XODB, id uint) (*XLeadStageTransition, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, stage_cd, status_cd, close_dt_quarter, close_dt_month, stage_duration, lead_id, owner_id, close_dt_year, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_stage_transition ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xlst := XLeadStageTransition{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xlst.ID, &xlst.StageCd, &xlst.StatusCd, &xlst.CloseDtQuarter, &xlst.CloseDtMonth, &xlst.StageDuration, &xlst.LeadID, &xlst.OwnerID, &xlst.CloseDtYear, &xlst.CreatedBy, &xlst.UpdatedBy, &xlst.CreatedAt, &xlst.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xlst, nil
}

// XLeadStageTransitionByLeadIDStageCd retrieves a row from 'x_showroom.x_lead_stage_transition' as a XLeadStageTransition.
//
// Generated from index 'x_lead_stage_transition_lead_id_stage_cd_unique'.
func XLeadStageTransitionByLeadIDStageCd(db XODB, leadID uint, stageCd string) (*XLeadStageTransition, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, stage_cd, status_cd, close_dt_quarter, close_dt_month, stage_duration, lead_id, owner_id, close_dt_year, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_stage_transition ` +
		`WHERE lead_id = ? AND stage_cd = ?`

	// run query
	XOLog(sqlstr, leadID, stageCd)
	xlst := XLeadStageTransition{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, leadID, stageCd).Scan(&xlst.ID, &xlst.StageCd, &xlst.StatusCd, &xlst.CloseDtQuarter, &xlst.CloseDtMonth, &xlst.StageDuration, &xlst.LeadID, &xlst.OwnerID, &xlst.CloseDtYear, &xlst.CreatedBy, &xlst.UpdatedBy, &xlst.CreatedAt, &xlst.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xlst, nil
}

// XLeadStageTransitionsByOwnerID retrieves a row from 'x_showroom.x_lead_stage_transition' as a XLeadStageTransition.
//
// Generated from index 'x_lead_stage_transition_owner_id_foreign'.
func XLeadStageTransitionsByOwnerID(db XODB, ownerID uint) ([]*XLeadStageTransition, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, stage_cd, status_cd, close_dt_quarter, close_dt_month, stage_duration, lead_id, owner_id, close_dt_year, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_stage_transition ` +
		`WHERE owner_id = ?`

	// run query
	XOLog(sqlstr, ownerID)
	q, err := db.Query(sqlstr, ownerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadStageTransition{}
	for q.Next() {
		xlst := XLeadStageTransition{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlst.ID, &xlst.StageCd, &xlst.StatusCd, &xlst.CloseDtQuarter, &xlst.CloseDtMonth, &xlst.StageDuration, &xlst.LeadID, &xlst.OwnerID, &xlst.CloseDtYear, &xlst.CreatedBy, &xlst.UpdatedBy, &xlst.CreatedAt, &xlst.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlst)
	}

	return res, nil
}

// XLeadStageTransitionsByUpdatedBy retrieves a row from 'x_showroom.x_lead_stage_transition' as a XLeadStageTransition.
//
// Generated from index 'x_lead_stage_transition_updated_by_foreign'.
func XLeadStageTransitionsByUpdatedBy(db XODB, updatedBy uint) ([]*XLeadStageTransition, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, stage_cd, status_cd, close_dt_quarter, close_dt_month, stage_duration, lead_id, owner_id, close_dt_year, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_stage_transition ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadStageTransition{}
	for q.Next() {
		xlst := XLeadStageTransition{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlst.ID, &xlst.StageCd, &xlst.StatusCd, &xlst.CloseDtQuarter, &xlst.CloseDtMonth, &xlst.StageDuration, &xlst.LeadID, &xlst.OwnerID, &xlst.CloseDtYear, &xlst.CreatedBy, &xlst.UpdatedBy, &xlst.CreatedAt, &xlst.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlst)
	}

	return res, nil
}
