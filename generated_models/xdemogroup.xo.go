// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XDemoGroup represents a row from 'x_showroom.x_demo_group'.
type XDemoGroup struct {
	ID             uint           `json:"id"`                // id
	Name           string         `json:"name"`              // name
	DisplayName    string         `json:"display_name"`      // display_name
	TypeCd         string         `json:"type_cd"`           // type_cd
	GroupTypeCd    sql.NullString `json:"group_type_cd"`     // group_type_cd
	ParID          sql.NullInt64  `json:"par_id"`            // par_id
	AttID          sql.NullInt64  `json:"att_id"`            // att_id
	DemoID         uint           `json:"demo_id"`           // demo_id
	DemoGroupDefID sql.NullInt64  `json:"demo_group_def_id"` // demo_group_def_id
	SeqNum         uint           `json:"seq_num"`           // seq_num
	CreatedBy      uint           `json:"created_by"`        // created_by
	UpdatedBy      uint           `json:"updated_by"`        // updated_by
	CreatedAt      mysql.NullTime `json:"created_at"`        // created_at
	UpdatedAt      mysql.NullTime `json:"updated_at"`        // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XDemoGroup exists in the database.
func (xdg *XDemoGroup) Exists() bool {
	return xdg._exists
}

// Deleted provides information if the XDemoGroup has been deleted from the database.
func (xdg *XDemoGroup) Deleted() bool {
	return xdg._deleted
}

// Insert inserts the XDemoGroup to the database.
func (xdg *XDemoGroup) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xdg._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_demo_group (` +
		`name, display_name, type_cd, group_type_cd, par_id, att_id, demo_id, demo_group_def_id, seq_num, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xdg.Name, xdg.DisplayName, xdg.TypeCd, xdg.GroupTypeCd, xdg.ParID, xdg.AttID, xdg.DemoID, xdg.DemoGroupDefID, xdg.SeqNum, xdg.CreatedBy, xdg.UpdatedBy, xdg.CreatedAt, xdg.UpdatedAt)
	res, err := db.Exec(sqlstr, xdg.Name, xdg.DisplayName, xdg.TypeCd, xdg.GroupTypeCd, xdg.ParID, xdg.AttID, xdg.DemoID, xdg.DemoGroupDefID, xdg.SeqNum, xdg.CreatedBy, xdg.UpdatedBy, xdg.CreatedAt, xdg.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xdg.ID = uint(id)
	xdg._exists = true

	return nil
}

// Update updates the XDemoGroup in the database.
func (xdg *XDemoGroup) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xdg._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xdg._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_demo_group SET ` +
		`name = ?, display_name = ?, type_cd = ?, group_type_cd = ?, par_id = ?, att_id = ?, demo_id = ?, demo_group_def_id = ?, seq_num = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xdg.Name, xdg.DisplayName, xdg.TypeCd, xdg.GroupTypeCd, xdg.ParID, xdg.AttID, xdg.DemoID, xdg.DemoGroupDefID, xdg.SeqNum, xdg.CreatedBy, xdg.UpdatedBy, xdg.CreatedAt, xdg.UpdatedAt, xdg.ID)
	_, err = db.Exec(sqlstr, xdg.Name, xdg.DisplayName, xdg.TypeCd, xdg.GroupTypeCd, xdg.ParID, xdg.AttID, xdg.DemoID, xdg.DemoGroupDefID, xdg.SeqNum, xdg.CreatedBy, xdg.UpdatedBy, xdg.CreatedAt, xdg.UpdatedAt, xdg.ID)
	return err
}

// Save saves the XDemoGroup to the database.
func (xdg *XDemoGroup) Save(db XODB) error {
	if xdg.Exists() {
		return xdg.Update(db)
	}

	return xdg.Insert(db)
}

// Delete deletes the XDemoGroup from the database.
func (xdg *XDemoGroup) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xdg._exists {
		return nil
	}

	// if deleted, bail
	if xdg._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_demo_group WHERE id = ?`

	// run query
	XOLog(sqlstr, xdg.ID)
	_, err = db.Exec(sqlstr, xdg.ID)
	if err != nil {
		return err
	}

	// set deleted
	xdg._deleted = true

	return nil
}

// XDemoGroupsByAttID retrieves a row from 'x_showroom.x_demo_group' as a XDemoGroup.
//
// Generated from index 'x_demo_group_att_id_foreign'.
func XDemoGroupsByAttID(db XODB, attID sql.NullInt64) ([]*XDemoGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, group_type_cd, par_id, att_id, demo_id, demo_group_def_id, seq_num, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo_group ` +
		`WHERE att_id = ?`

	// run query
	XOLog(sqlstr, attID)
	q, err := db.Query(sqlstr, attID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroup{}
	for q.Next() {
		xdg := XDemoGroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdg.ID, &xdg.Name, &xdg.DisplayName, &xdg.TypeCd, &xdg.GroupTypeCd, &xdg.ParID, &xdg.AttID, &xdg.DemoID, &xdg.DemoGroupDefID, &xdg.SeqNum, &xdg.CreatedBy, &xdg.UpdatedBy, &xdg.CreatedAt, &xdg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdg)
	}

	return res, nil
}

// XDemoGroupsByCreatedBy retrieves a row from 'x_showroom.x_demo_group' as a XDemoGroup.
//
// Generated from index 'x_demo_group_created_by_foreign'.
func XDemoGroupsByCreatedBy(db XODB, createdBy uint) ([]*XDemoGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, group_type_cd, par_id, att_id, demo_id, demo_group_def_id, seq_num, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo_group ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroup{}
	for q.Next() {
		xdg := XDemoGroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdg.ID, &xdg.Name, &xdg.DisplayName, &xdg.TypeCd, &xdg.GroupTypeCd, &xdg.ParID, &xdg.AttID, &xdg.DemoID, &xdg.DemoGroupDefID, &xdg.SeqNum, &xdg.CreatedBy, &xdg.UpdatedBy, &xdg.CreatedAt, &xdg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdg)
	}

	return res, nil
}

// XDemoGroupsByDemoGroupDefID retrieves a row from 'x_showroom.x_demo_group' as a XDemoGroup.
//
// Generated from index 'x_demo_group_demo_group_def_id_foreign'.
func XDemoGroupsByDemoGroupDefID(db XODB, demoGroupDefID sql.NullInt64) ([]*XDemoGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, group_type_cd, par_id, att_id, demo_id, demo_group_def_id, seq_num, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo_group ` +
		`WHERE demo_group_def_id = ?`

	// run query
	XOLog(sqlstr, demoGroupDefID)
	q, err := db.Query(sqlstr, demoGroupDefID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroup{}
	for q.Next() {
		xdg := XDemoGroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdg.ID, &xdg.Name, &xdg.DisplayName, &xdg.TypeCd, &xdg.GroupTypeCd, &xdg.ParID, &xdg.AttID, &xdg.DemoID, &xdg.DemoGroupDefID, &xdg.SeqNum, &xdg.CreatedBy, &xdg.UpdatedBy, &xdg.CreatedAt, &xdg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdg)
	}

	return res, nil
}

// XDemoGroupsByDemoID retrieves a row from 'x_showroom.x_demo_group' as a XDemoGroup.
//
// Generated from index 'x_demo_group_demo_id_foreign'.
func XDemoGroupsByDemoID(db XODB, demoID uint) ([]*XDemoGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, group_type_cd, par_id, att_id, demo_id, demo_group_def_id, seq_num, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo_group ` +
		`WHERE demo_id = ?`

	// run query
	XOLog(sqlstr, demoID)
	q, err := db.Query(sqlstr, demoID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroup{}
	for q.Next() {
		xdg := XDemoGroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdg.ID, &xdg.Name, &xdg.DisplayName, &xdg.TypeCd, &xdg.GroupTypeCd, &xdg.ParID, &xdg.AttID, &xdg.DemoID, &xdg.DemoGroupDefID, &xdg.SeqNum, &xdg.CreatedBy, &xdg.UpdatedBy, &xdg.CreatedAt, &xdg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdg)
	}

	return res, nil
}

// XDemoGroupByID retrieves a row from 'x_showroom.x_demo_group' as a XDemoGroup.
//
// Generated from index 'x_demo_group_id_pkey'.
func XDemoGroupByID(db XODB, id uint) (*XDemoGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, group_type_cd, par_id, att_id, demo_id, demo_group_def_id, seq_num, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo_group ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xdg := XDemoGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xdg.ID, &xdg.Name, &xdg.DisplayName, &xdg.TypeCd, &xdg.GroupTypeCd, &xdg.ParID, &xdg.AttID, &xdg.DemoID, &xdg.DemoGroupDefID, &xdg.SeqNum, &xdg.CreatedBy, &xdg.UpdatedBy, &xdg.CreatedAt, &xdg.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xdg, nil
}

// XDemoGroupByNameTypeCdDemoGroupDefIDDemoID retrieves a row from 'x_showroom.x_demo_group' as a XDemoGroup.
//
// Generated from index 'x_demo_group_name_type_cd_demo_group_def_id_demo_id_unique'.
func XDemoGroupByNameTypeCdDemoGroupDefIDDemoID(db XODB, name string, typeCd string, demoGroupDefID sql.NullInt64, demoID uint) (*XDemoGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, group_type_cd, par_id, att_id, demo_id, demo_group_def_id, seq_num, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo_group ` +
		`WHERE name = ? AND type_cd = ? AND demo_group_def_id = ? AND demo_id = ?`

	// run query
	XOLog(sqlstr, name, typeCd, demoGroupDefID, demoID)
	xdg := XDemoGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, typeCd, demoGroupDefID, demoID).Scan(&xdg.ID, &xdg.Name, &xdg.DisplayName, &xdg.TypeCd, &xdg.GroupTypeCd, &xdg.ParID, &xdg.AttID, &xdg.DemoID, &xdg.DemoGroupDefID, &xdg.SeqNum, &xdg.CreatedBy, &xdg.UpdatedBy, &xdg.CreatedAt, &xdg.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xdg, nil
}

// XDemoGroupsByParID retrieves a row from 'x_showroom.x_demo_group' as a XDemoGroup.
//
// Generated from index 'x_demo_group_par_id_foreign'.
func XDemoGroupsByParID(db XODB, parID sql.NullInt64) ([]*XDemoGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, group_type_cd, par_id, att_id, demo_id, demo_group_def_id, seq_num, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo_group ` +
		`WHERE par_id = ?`

	// run query
	XOLog(sqlstr, parID)
	q, err := db.Query(sqlstr, parID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroup{}
	for q.Next() {
		xdg := XDemoGroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdg.ID, &xdg.Name, &xdg.DisplayName, &xdg.TypeCd, &xdg.GroupTypeCd, &xdg.ParID, &xdg.AttID, &xdg.DemoID, &xdg.DemoGroupDefID, &xdg.SeqNum, &xdg.CreatedBy, &xdg.UpdatedBy, &xdg.CreatedAt, &xdg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdg)
	}

	return res, nil
}

// XDemoGroupsByUpdatedBy retrieves a row from 'x_showroom.x_demo_group' as a XDemoGroup.
//
// Generated from index 'x_demo_group_updated_by_foreign'.
func XDemoGroupsByUpdatedBy(db XODB, updatedBy uint) ([]*XDemoGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, group_type_cd, par_id, att_id, demo_id, demo_group_def_id, seq_num, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo_group ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroup{}
	for q.Next() {
		xdg := XDemoGroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdg.ID, &xdg.Name, &xdg.DisplayName, &xdg.TypeCd, &xdg.GroupTypeCd, &xdg.ParID, &xdg.AttID, &xdg.DemoID, &xdg.DemoGroupDefID, &xdg.SeqNum, &xdg.CreatedBy, &xdg.UpdatedBy, &xdg.CreatedAt, &xdg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdg)
	}

	return res, nil
}
