// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XAppLoginAttempt represents a row from 'x_showroom.x_app_login_attempt'.
type XAppLoginAttempt struct {
	ID            uint           `json:"id"`             // id
	DeviceID      string         `json:"device_id"`      // device_id
	UserEmail     string         `json:"user_email"`     // user_email
	StatusCd      string         `json:"status_cd"`      // status_cd
	StatusMessage string         `json:"status_message"` // status_message
	OrgID         uint           `json:"org_id"`         // org_id
	CreatedAt     mysql.NullTime `json:"created_at"`     // created_at
	UpdatedAt     mysql.NullTime `json:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XAppLoginAttempt exists in the database.
func (xala *XAppLoginAttempt) Exists() bool {
	return xala._exists
}

// Deleted provides information if the XAppLoginAttempt has been deleted from the database.
func (xala *XAppLoginAttempt) Deleted() bool {
	return xala._deleted
}

// Insert inserts the XAppLoginAttempt to the database.
func (xala *XAppLoginAttempt) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xala._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_app_login_attempt (` +
		`device_id, user_email, status_cd, status_message, org_id, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xala.DeviceID, xala.UserEmail, xala.StatusCd, xala.StatusMessage, xala.OrgID, xala.CreatedAt, xala.UpdatedAt)
	res, err := db.Exec(sqlstr, xala.DeviceID, xala.UserEmail, xala.StatusCd, xala.StatusMessage, xala.OrgID, xala.CreatedAt, xala.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xala.ID = uint(id)
	xala._exists = true

	return nil
}

// Update updates the XAppLoginAttempt in the database.
func (xala *XAppLoginAttempt) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xala._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xala._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_app_login_attempt SET ` +
		`device_id = ?, user_email = ?, status_cd = ?, status_message = ?, org_id = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xala.DeviceID, xala.UserEmail, xala.StatusCd, xala.StatusMessage, xala.OrgID, xala.CreatedAt, xala.UpdatedAt, xala.ID)
	_, err = db.Exec(sqlstr, xala.DeviceID, xala.UserEmail, xala.StatusCd, xala.StatusMessage, xala.OrgID, xala.CreatedAt, xala.UpdatedAt, xala.ID)
	return err
}

// Save saves the XAppLoginAttempt to the database.
func (xala *XAppLoginAttempt) Save(db XODB) error {
	if xala.Exists() {
		return xala.Update(db)
	}

	return xala.Insert(db)
}

// Delete deletes the XAppLoginAttempt from the database.
func (xala *XAppLoginAttempt) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xala._exists {
		return nil
	}

	// if deleted, bail
	if xala._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_app_login_attempt WHERE id = ?`

	// run query
	XOLog(sqlstr, xala.ID)
	_, err = db.Exec(sqlstr, xala.ID)
	if err != nil {
		return err
	}

	// set deleted
	xala._deleted = true

	return nil
}

// XOrgExt returns the XOrgExt associated with the XAppLoginAttempt's OrgID (org_id).
//
// Generated from foreign key 'x_app_login_attempt_org_id_foreign'.
func (xala *XAppLoginAttempt) XOrgExt(db XODB) (*XOrgExt, error) {
	return XOrgExtByID(db, xala.OrgID)
}

// XAppLoginAttemptByID retrieves a row from 'x_showroom.x_app_login_attempt' as a XAppLoginAttempt.
//
// Generated from index 'x_app_login_attempt_id_pkey'.
func XAppLoginAttemptByID(db XODB, id uint) (*XAppLoginAttempt, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, device_id, user_email, status_cd, status_message, org_id, created_at, updated_at ` +
		`FROM x_showroom.x_app_login_attempt ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xala := XAppLoginAttempt{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xala.ID, &xala.DeviceID, &xala.UserEmail, &xala.StatusCd, &xala.StatusMessage, &xala.OrgID, &xala.CreatedAt, &xala.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xala, nil
}

// XAppLoginAttemptsByOrgID retrieves a row from 'x_showroom.x_app_login_attempt' as a XAppLoginAttempt.
//
// Generated from index 'x_app_login_attempt_org_id_foreign'.
func XAppLoginAttemptsByOrgID(db XODB, orgID uint) ([]*XAppLoginAttempt, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, device_id, user_email, status_cd, status_message, org_id, created_at, updated_at ` +
		`FROM x_showroom.x_app_login_attempt ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XAppLoginAttempt{}
	for q.Next() {
		xala := XAppLoginAttempt{
			_exists: true,
		}

		// scan
		err = q.Scan(&xala.ID, &xala.DeviceID, &xala.UserEmail, &xala.StatusCd, &xala.StatusMessage, &xala.OrgID, &xala.CreatedAt, &xala.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xala)
	}

	return res, nil
}
