// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XPostn represents a row from 'x_showroom.x_postn'.
type XPostn struct {
	ID          uint           `json:"id"`           // id
	Name        string         `json:"name"`         // name
	DisplayName string         `json:"display_name"` // display_name
	TypeCd      string         `json:"type_cd"`      // type_cd
	ParPostnID  sql.NullInt64  `json:"par_postn_id"` // par_postn_id
	OrgID       uint           `json:"org_id"`       // org_id
	CreatedBy   uint           `json:"created_by"`   // created_by
	UpdatedBy   uint           `json:"updated_by"`   // updated_by
	CreatedAt   mysql.NullTime `json:"created_at"`   // created_at
	UpdatedAt   mysql.NullTime `json:"updated_at"`   // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XPostn exists in the database.
func (xp *XPostn) Exists() bool {
	return xp._exists
}

// Deleted provides information if the XPostn has been deleted from the database.
func (xp *XPostn) Deleted() bool {
	return xp._deleted
}

// Insert inserts the XPostn to the database.
func (xp *XPostn) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_postn (` +
		`name, display_name, type_cd, par_postn_id, org_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xp.Name, xp.DisplayName, xp.TypeCd, xp.ParPostnID, xp.OrgID, xp.CreatedBy, xp.UpdatedBy, xp.CreatedAt, xp.UpdatedAt)
	res, err := db.Exec(sqlstr, xp.Name, xp.DisplayName, xp.TypeCd, xp.ParPostnID, xp.OrgID, xp.CreatedBy, xp.UpdatedBy, xp.CreatedAt, xp.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xp.ID = uint(id)
	xp._exists = true

	return nil
}

// Update updates the XPostn in the database.
func (xp *XPostn) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_postn SET ` +
		`name = ?, display_name = ?, type_cd = ?, par_postn_id = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xp.Name, xp.DisplayName, xp.TypeCd, xp.ParPostnID, xp.OrgID, xp.CreatedBy, xp.UpdatedBy, xp.CreatedAt, xp.UpdatedAt, xp.ID)
	_, err = db.Exec(sqlstr, xp.Name, xp.DisplayName, xp.TypeCd, xp.ParPostnID, xp.OrgID, xp.CreatedBy, xp.UpdatedBy, xp.CreatedAt, xp.UpdatedAt, xp.ID)
	return err
}

// Save saves the XPostn to the database.
func (xp *XPostn) Save(db XODB) error {
	if xp.Exists() {
		return xp.Update(db)
	}

	return xp.Insert(db)
}

// Delete deletes the XPostn from the database.
func (xp *XPostn) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xp._exists {
		return nil
	}

	// if deleted, bail
	if xp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_postn WHERE id = ?`

	// run query
	XOLog(sqlstr, xp.ID)
	_, err = db.Exec(sqlstr, xp.ID)
	if err != nil {
		return err
	}

	// set deleted
	xp._deleted = true

	return nil
}

// XPostnsByCreatedBy retrieves a row from 'x_showroom.x_postn' as a XPostn.
//
// Generated from index 'x_postn_created_by_foreign'.
func XPostnsByCreatedBy(db XODB, createdBy uint) ([]*XPostn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, par_postn_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_postn ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPostn{}
	for q.Next() {
		xp := XPostn{
			_exists: true,
		}

		// scan
		err = q.Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.TypeCd, &xp.ParPostnID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xp)
	}

	return res, nil
}

// XPostnByID retrieves a row from 'x_showroom.x_postn' as a XPostn.
//
// Generated from index 'x_postn_id_pkey'.
func XPostnByID(db XODB, id uint) (*XPostn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, par_postn_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_postn ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xp := XPostn{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.TypeCd, &xp.ParPostnID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xp, nil
}

// XPostnByNameOrgID retrieves a row from 'x_showroom.x_postn' as a XPostn.
//
// Generated from index 'x_postn_name_org_id_unique'.
func XPostnByNameOrgID(db XODB, name string, orgID uint) (*XPostn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, par_postn_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_postn ` +
		`WHERE name = ? AND org_id = ?`

	// run query
	XOLog(sqlstr, name, orgID)
	xp := XPostn{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, orgID).Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.TypeCd, &xp.ParPostnID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xp, nil
}

// XPostnsByOrgID retrieves a row from 'x_showroom.x_postn' as a XPostn.
//
// Generated from index 'x_postn_org_id_foreign'.
func XPostnsByOrgID(db XODB, orgID uint) ([]*XPostn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, par_postn_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_postn ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPostn{}
	for q.Next() {
		xp := XPostn{
			_exists: true,
		}

		// scan
		err = q.Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.TypeCd, &xp.ParPostnID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xp)
	}

	return res, nil
}

// XPostnsByParPostnID retrieves a row from 'x_showroom.x_postn' as a XPostn.
//
// Generated from index 'x_postn_par_postn_id_foreign'.
func XPostnsByParPostnID(db XODB, parPostnID sql.NullInt64) ([]*XPostn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, par_postn_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_postn ` +
		`WHERE par_postn_id = ?`

	// run query
	XOLog(sqlstr, parPostnID)
	q, err := db.Query(sqlstr, parPostnID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPostn{}
	for q.Next() {
		xp := XPostn{
			_exists: true,
		}

		// scan
		err = q.Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.TypeCd, &xp.ParPostnID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xp)
	}

	return res, nil
}

// XPostnsByUpdatedBy retrieves a row from 'x_showroom.x_postn' as a XPostn.
//
// Generated from index 'x_postn_updated_by_foreign'.
func XPostnsByUpdatedBy(db XODB, updatedBy uint) ([]*XPostn, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, par_postn_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_postn ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPostn{}
	for q.Next() {
		xp := XPostn{
			_exists: true,
		}

		// scan
		err = q.Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.TypeCd, &xp.ParPostnID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xp)
	}

	return res, nil
}
