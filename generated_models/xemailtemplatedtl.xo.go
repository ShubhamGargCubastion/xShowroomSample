// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XEmailTemplateDtl represents a row from 'x_showroom.x_email_template_dtl'.
type XEmailTemplateDtl struct {
	ID              uint           `json:"id"`               // id
	VersionNum      int            `json:"version_num"`      // version_num
	StatusCd        string         `json:"status_cd"`        // status_cd
	TemplateBody    string         `json:"template_body"`    // template_body
	TemplateSubject sql.NullString `json:"template_subject"` // template_subject
	ParID           uint           `json:"par_id"`           // par_id
	CreatedBy       uint           `json:"created_by"`       // created_by
	UpdatedBy       uint           `json:"updated_by"`       // updated_by
	CreatedAt       mysql.NullTime `json:"created_at"`       // created_at
	UpdatedAt       mysql.NullTime `json:"updated_at"`       // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XEmailTemplateDtl exists in the database.
func (xetd *XEmailTemplateDtl) Exists() bool {
	return xetd._exists
}

// Deleted provides information if the XEmailTemplateDtl has been deleted from the database.
func (xetd *XEmailTemplateDtl) Deleted() bool {
	return xetd._deleted
}

// Insert inserts the XEmailTemplateDtl to the database.
func (xetd *XEmailTemplateDtl) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xetd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_email_template_dtl (` +
		`version_num, status_cd, template_body, template_subject, par_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xetd.VersionNum, xetd.StatusCd, xetd.TemplateBody, xetd.TemplateSubject, xetd.ParID, xetd.CreatedBy, xetd.UpdatedBy, xetd.CreatedAt, xetd.UpdatedAt)
	res, err := db.Exec(sqlstr, xetd.VersionNum, xetd.StatusCd, xetd.TemplateBody, xetd.TemplateSubject, xetd.ParID, xetd.CreatedBy, xetd.UpdatedBy, xetd.CreatedAt, xetd.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xetd.ID = uint(id)
	xetd._exists = true

	return nil
}

// Update updates the XEmailTemplateDtl in the database.
func (xetd *XEmailTemplateDtl) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xetd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xetd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_email_template_dtl SET ` +
		`version_num = ?, status_cd = ?, template_body = ?, template_subject = ?, par_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xetd.VersionNum, xetd.StatusCd, xetd.TemplateBody, xetd.TemplateSubject, xetd.ParID, xetd.CreatedBy, xetd.UpdatedBy, xetd.CreatedAt, xetd.UpdatedAt, xetd.ID)
	_, err = db.Exec(sqlstr, xetd.VersionNum, xetd.StatusCd, xetd.TemplateBody, xetd.TemplateSubject, xetd.ParID, xetd.CreatedBy, xetd.UpdatedBy, xetd.CreatedAt, xetd.UpdatedAt, xetd.ID)
	return err
}

// Save saves the XEmailTemplateDtl to the database.
func (xetd *XEmailTemplateDtl) Save(db XODB) error {
	if xetd.Exists() {
		return xetd.Update(db)
	}

	return xetd.Insert(db)
}

// Delete deletes the XEmailTemplateDtl from the database.
func (xetd *XEmailTemplateDtl) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xetd._exists {
		return nil
	}

	// if deleted, bail
	if xetd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_email_template_dtl WHERE id = ?`

	// run query
	XOLog(sqlstr, xetd.ID)
	_, err = db.Exec(sqlstr, xetd.ID)
	if err != nil {
		return err
	}

	// set deleted
	xetd._deleted = true

	return nil
}

// XEmailTemplateDtlsByCreatedBy retrieves a row from 'x_showroom.x_email_template_dtl' as a XEmailTemplateDtl.
//
// Generated from index 'x_email_template_dtl_created_by_foreign'.
func XEmailTemplateDtlsByCreatedBy(db XODB, createdBy uint) ([]*XEmailTemplateDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, version_num, status_cd, template_body, template_subject, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_email_template_dtl ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XEmailTemplateDtl{}
	for q.Next() {
		xetd := XEmailTemplateDtl{
			_exists: true,
		}

		// scan
		err = q.Scan(&xetd.ID, &xetd.VersionNum, &xetd.StatusCd, &xetd.TemplateBody, &xetd.TemplateSubject, &xetd.ParID, &xetd.CreatedBy, &xetd.UpdatedBy, &xetd.CreatedAt, &xetd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xetd)
	}

	return res, nil
}

// XEmailTemplateDtlByID retrieves a row from 'x_showroom.x_email_template_dtl' as a XEmailTemplateDtl.
//
// Generated from index 'x_email_template_dtl_id_pkey'.
func XEmailTemplateDtlByID(db XODB, id uint) (*XEmailTemplateDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, version_num, status_cd, template_body, template_subject, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_email_template_dtl ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xetd := XEmailTemplateDtl{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xetd.ID, &xetd.VersionNum, &xetd.StatusCd, &xetd.TemplateBody, &xetd.TemplateSubject, &xetd.ParID, &xetd.CreatedBy, &xetd.UpdatedBy, &xetd.CreatedAt, &xetd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xetd, nil
}

// XEmailTemplateDtlsByParID retrieves a row from 'x_showroom.x_email_template_dtl' as a XEmailTemplateDtl.
//
// Generated from index 'x_email_template_dtl_par_id_foreign'.
func XEmailTemplateDtlsByParID(db XODB, parID uint) ([]*XEmailTemplateDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, version_num, status_cd, template_body, template_subject, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_email_template_dtl ` +
		`WHERE par_id = ?`

	// run query
	XOLog(sqlstr, parID)
	q, err := db.Query(sqlstr, parID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XEmailTemplateDtl{}
	for q.Next() {
		xetd := XEmailTemplateDtl{
			_exists: true,
		}

		// scan
		err = q.Scan(&xetd.ID, &xetd.VersionNum, &xetd.StatusCd, &xetd.TemplateBody, &xetd.TemplateSubject, &xetd.ParID, &xetd.CreatedBy, &xetd.UpdatedBy, &xetd.CreatedAt, &xetd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xetd)
	}

	return res, nil
}

// XEmailTemplateDtlsByUpdatedBy retrieves a row from 'x_showroom.x_email_template_dtl' as a XEmailTemplateDtl.
//
// Generated from index 'x_email_template_dtl_updated_by_foreign'.
func XEmailTemplateDtlsByUpdatedBy(db XODB, updatedBy uint) ([]*XEmailTemplateDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, version_num, status_cd, template_body, template_subject, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_email_template_dtl ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XEmailTemplateDtl{}
	for q.Next() {
		xetd := XEmailTemplateDtl{
			_exists: true,
		}

		// scan
		err = q.Scan(&xetd.ID, &xetd.VersionNum, &xetd.StatusCd, &xetd.TemplateBody, &xetd.TemplateSubject, &xetd.ParID, &xetd.CreatedBy, &xetd.UpdatedBy, &xetd.CreatedAt, &xetd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xetd)
	}

	return res, nil
}

// XEmailTemplateDtlByVersionNumParID retrieves a row from 'x_showroom.x_email_template_dtl' as a XEmailTemplateDtl.
//
// Generated from index 'x_unique_key_1'.
func XEmailTemplateDtlByVersionNumParID(db XODB, versionNum int, parID uint) (*XEmailTemplateDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, version_num, status_cd, template_body, template_subject, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_email_template_dtl ` +
		`WHERE version_num = ? AND par_id = ?`

	// run query
	XOLog(sqlstr, versionNum, parID)
	xetd := XEmailTemplateDtl{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, versionNum, parID).Scan(&xetd.ID, &xetd.VersionNum, &xetd.StatusCd, &xetd.TemplateBody, &xetd.TemplateSubject, &xetd.ParID, &xetd.CreatedBy, &xetd.UpdatedBy, &xetd.CreatedAt, &xetd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xetd, nil
}
