// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XPriCompGroup represents a row from 'x_showroom.x_pri_comp_group'.
type XPriCompGroup struct {
	ID        uint           `json:"id"`         // id
	Name      string         `json:"name"`       // name
	OrgID     uint           `json:"org_id"`     // org_id
	CreatedBy uint           `json:"created_by"` // created_by
	UpdatedBy uint           `json:"updated_by"` // updated_by
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XPriCompGroup exists in the database.
func (xpcg *XPriCompGroup) Exists() bool {
	return xpcg._exists
}

// Deleted provides information if the XPriCompGroup has been deleted from the database.
func (xpcg *XPriCompGroup) Deleted() bool {
	return xpcg._deleted
}

// Insert inserts the XPriCompGroup to the database.
func (xpcg *XPriCompGroup) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xpcg._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_pri_comp_group (` +
		`name, org_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xpcg.Name, xpcg.OrgID, xpcg.CreatedBy, xpcg.UpdatedBy, xpcg.CreatedAt, xpcg.UpdatedAt)
	res, err := db.Exec(sqlstr, xpcg.Name, xpcg.OrgID, xpcg.CreatedBy, xpcg.UpdatedBy, xpcg.CreatedAt, xpcg.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xpcg.ID = uint(id)
	xpcg._exists = true

	return nil
}

// Update updates the XPriCompGroup in the database.
func (xpcg *XPriCompGroup) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpcg._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xpcg._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_pri_comp_group SET ` +
		`name = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xpcg.Name, xpcg.OrgID, xpcg.CreatedBy, xpcg.UpdatedBy, xpcg.CreatedAt, xpcg.UpdatedAt, xpcg.ID)
	_, err = db.Exec(sqlstr, xpcg.Name, xpcg.OrgID, xpcg.CreatedBy, xpcg.UpdatedBy, xpcg.CreatedAt, xpcg.UpdatedAt, xpcg.ID)
	return err
}

// Save saves the XPriCompGroup to the database.
func (xpcg *XPriCompGroup) Save(db XODB) error {
	if xpcg.Exists() {
		return xpcg.Update(db)
	}

	return xpcg.Insert(db)
}

// Delete deletes the XPriCompGroup from the database.
func (xpcg *XPriCompGroup) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpcg._exists {
		return nil
	}

	// if deleted, bail
	if xpcg._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_pri_comp_group WHERE id = ?`

	// run query
	XOLog(sqlstr, xpcg.ID)
	_, err = db.Exec(sqlstr, xpcg.ID)
	if err != nil {
		return err
	}

	// set deleted
	xpcg._deleted = true

	return nil
}

// XPriCompGroupsByCreatedBy retrieves a row from 'x_showroom.x_pri_comp_group' as a XPriCompGroup.
//
// Generated from index 'x_pri_comp_group_created_by_foreign'.
func XPriCompGroupsByCreatedBy(db XODB, createdBy uint) ([]*XPriCompGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp_group ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriCompGroup{}
	for q.Next() {
		xpcg := XPriCompGroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpcg.ID, &xpcg.Name, &xpcg.OrgID, &xpcg.CreatedBy, &xpcg.UpdatedBy, &xpcg.CreatedAt, &xpcg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpcg)
	}

	return res, nil
}

// XPriCompGroupByID retrieves a row from 'x_showroom.x_pri_comp_group' as a XPriCompGroup.
//
// Generated from index 'x_pri_comp_group_id_pkey'.
func XPriCompGroupByID(db XODB, id uint) (*XPriCompGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp_group ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xpcg := XPriCompGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xpcg.ID, &xpcg.Name, &xpcg.OrgID, &xpcg.CreatedBy, &xpcg.UpdatedBy, &xpcg.CreatedAt, &xpcg.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xpcg, nil
}

// XPriCompGroupByNameOrgID retrieves a row from 'x_showroom.x_pri_comp_group' as a XPriCompGroup.
//
// Generated from index 'x_pri_comp_group_name_org_id_unique'.
func XPriCompGroupByNameOrgID(db XODB, name string, orgID uint) (*XPriCompGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp_group ` +
		`WHERE name = ? AND org_id = ?`

	// run query
	XOLog(sqlstr, name, orgID)
	xpcg := XPriCompGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, orgID).Scan(&xpcg.ID, &xpcg.Name, &xpcg.OrgID, &xpcg.CreatedBy, &xpcg.UpdatedBy, &xpcg.CreatedAt, &xpcg.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xpcg, nil
}

// XPriCompGroupsByOrgID retrieves a row from 'x_showroom.x_pri_comp_group' as a XPriCompGroup.
//
// Generated from index 'x_pri_comp_group_org_id_foreign'.
func XPriCompGroupsByOrgID(db XODB, orgID uint) ([]*XPriCompGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp_group ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriCompGroup{}
	for q.Next() {
		xpcg := XPriCompGroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpcg.ID, &xpcg.Name, &xpcg.OrgID, &xpcg.CreatedBy, &xpcg.UpdatedBy, &xpcg.CreatedAt, &xpcg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpcg)
	}

	return res, nil
}

// XPriCompGroupsByUpdatedBy retrieves a row from 'x_showroom.x_pri_comp_group' as a XPriCompGroup.
//
// Generated from index 'x_pri_comp_group_updated_by_foreign'.
func XPriCompGroupsByUpdatedBy(db XODB, updatedBy uint) ([]*XPriCompGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp_group ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriCompGroup{}
	for q.Next() {
		xpcg := XPriCompGroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpcg.ID, &xpcg.Name, &xpcg.OrgID, &xpcg.CreatedBy, &xpcg.UpdatedBy, &xpcg.CreatedAt, &xpcg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpcg)
	}

	return res, nil
}
