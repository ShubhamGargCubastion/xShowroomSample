// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XSku represents a row from 'x_showroom.x_sku'.
type XSku struct {
	ID                 uint           `json:"id"`                    // id
	IntegrationID      sql.NullString `json:"integration_id"`        // integration_id
	Name               string         `json:"name"`                  // name
	SkuCode            string         `json:"sku_code"`              // sku_code
	PrimaryProdID      uint           `json:"primary_prod_id"`       // primary_prod_id
	TaxSlabID          sql.NullInt64  `json:"tax_slab_id"`           // tax_slab_id
	ActiveFlag         string         `json:"active_flag"`           // active_flag
	OrgID              uint           `json:"org_id"`                // org_id
	CreatedBy          uint           `json:"created_by"`            // created_by
	UpdatedBy          uint           `json:"updated_by"`            // updated_by
	CreatedAt          mysql.NullTime `json:"created_at"`            // created_at
	UpdatedAt          mysql.NullTime `json:"updated_at"`            // updated_at
	PricingCompGroupID sql.NullInt64  `json:"pricing_comp_group_id"` // pricing_comp_group_id
	DefaultFlag        string         `json:"default_flag"`          // default_flag

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XSku exists in the database.
func (xs *XSku) Exists() bool {
	return xs._exists
}

// Deleted provides information if the XSku has been deleted from the database.
func (xs *XSku) Deleted() bool {
	return xs._deleted
}

// Insert inserts the XSku to the database.
func (xs *XSku) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_sku (` +
		`integration_id, name, sku_code, primary_prod_id, tax_slab_id, active_flag, org_id, created_by, updated_by, created_at, updated_at, pricing_comp_group_id, default_flag` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xs.IntegrationID, xs.Name, xs.SkuCode, xs.PrimaryProdID, xs.TaxSlabID, xs.ActiveFlag, xs.OrgID, xs.CreatedBy, xs.UpdatedBy, xs.CreatedAt, xs.UpdatedAt, xs.PricingCompGroupID, xs.DefaultFlag)
	res, err := db.Exec(sqlstr, xs.IntegrationID, xs.Name, xs.SkuCode, xs.PrimaryProdID, xs.TaxSlabID, xs.ActiveFlag, xs.OrgID, xs.CreatedBy, xs.UpdatedBy, xs.CreatedAt, xs.UpdatedAt, xs.PricingCompGroupID, xs.DefaultFlag)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xs.ID = uint(id)
	xs._exists = true

	return nil
}

// Update updates the XSku in the database.
func (xs *XSku) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xs._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_sku SET ` +
		`integration_id = ?, name = ?, sku_code = ?, primary_prod_id = ?, tax_slab_id = ?, active_flag = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?, pricing_comp_group_id = ?, default_flag = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xs.IntegrationID, xs.Name, xs.SkuCode, xs.PrimaryProdID, xs.TaxSlabID, xs.ActiveFlag, xs.OrgID, xs.CreatedBy, xs.UpdatedBy, xs.CreatedAt, xs.UpdatedAt, xs.PricingCompGroupID, xs.DefaultFlag, xs.ID)
	_, err = db.Exec(sqlstr, xs.IntegrationID, xs.Name, xs.SkuCode, xs.PrimaryProdID, xs.TaxSlabID, xs.ActiveFlag, xs.OrgID, xs.CreatedBy, xs.UpdatedBy, xs.CreatedAt, xs.UpdatedAt, xs.PricingCompGroupID, xs.DefaultFlag, xs.ID)
	return err
}

// Save saves the XSku to the database.
func (xs *XSku) Save(db XODB) error {
	if xs.Exists() {
		return xs.Update(db)
	}

	return xs.Insert(db)
}

// Delete deletes the XSku from the database.
func (xs *XSku) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xs._exists {
		return nil
	}

	// if deleted, bail
	if xs._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_sku WHERE id = ?`

	// run query
	XOLog(sqlstr, xs.ID)
	_, err = db.Exec(sqlstr, xs.ID)
	if err != nil {
		return err
	}

	// set deleted
	xs._deleted = true

	return nil
}

// XSkusByCreatedBy retrieves a row from 'x_showroom.x_sku' as a XSku.
//
// Generated from index 'x_sku_created_by_foreign'.
func XSkusByCreatedBy(db XODB, createdBy uint) ([]*XSku, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, sku_code, primary_prod_id, tax_slab_id, active_flag, org_id, created_by, updated_by, created_at, updated_at, pricing_comp_group_id, default_flag ` +
		`FROM x_showroom.x_sku ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSku{}
	for q.Next() {
		xs := XSku{
			_exists: true,
		}

		// scan
		err = q.Scan(&xs.ID, &xs.IntegrationID, &xs.Name, &xs.SkuCode, &xs.PrimaryProdID, &xs.TaxSlabID, &xs.ActiveFlag, &xs.OrgID, &xs.CreatedBy, &xs.UpdatedBy, &xs.CreatedAt, &xs.UpdatedAt, &xs.PricingCompGroupID, &xs.DefaultFlag)
		if err != nil {
			return nil, err
		}

		res = append(res, &xs)
	}

	return res, nil
}

// XSkuByID retrieves a row from 'x_showroom.x_sku' as a XSku.
//
// Generated from index 'x_sku_id_pkey'.
func XSkuByID(db XODB, id uint) (*XSku, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, sku_code, primary_prod_id, tax_slab_id, active_flag, org_id, created_by, updated_by, created_at, updated_at, pricing_comp_group_id, default_flag ` +
		`FROM x_showroom.x_sku ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xs := XSku{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xs.ID, &xs.IntegrationID, &xs.Name, &xs.SkuCode, &xs.PrimaryProdID, &xs.TaxSlabID, &xs.ActiveFlag, &xs.OrgID, &xs.CreatedBy, &xs.UpdatedBy, &xs.CreatedAt, &xs.UpdatedAt, &xs.PricingCompGroupID, &xs.DefaultFlag)
	if err != nil {
		return nil, err
	}

	return &xs, nil
}

// XSkusByOrgID retrieves a row from 'x_showroom.x_sku' as a XSku.
//
// Generated from index 'x_sku_org_id_foreign'.
func XSkusByOrgID(db XODB, orgID uint) ([]*XSku, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, sku_code, primary_prod_id, tax_slab_id, active_flag, org_id, created_by, updated_by, created_at, updated_at, pricing_comp_group_id, default_flag ` +
		`FROM x_showroom.x_sku ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSku{}
	for q.Next() {
		xs := XSku{
			_exists: true,
		}

		// scan
		err = q.Scan(&xs.ID, &xs.IntegrationID, &xs.Name, &xs.SkuCode, &xs.PrimaryProdID, &xs.TaxSlabID, &xs.ActiveFlag, &xs.OrgID, &xs.CreatedBy, &xs.UpdatedBy, &xs.CreatedAt, &xs.UpdatedAt, &xs.PricingCompGroupID, &xs.DefaultFlag)
		if err != nil {
			return nil, err
		}

		res = append(res, &xs)
	}

	return res, nil
}

// XSkusByPrimaryProdID retrieves a row from 'x_showroom.x_sku' as a XSku.
//
// Generated from index 'x_sku_primary_prod_id_foreign'.
func XSkusByPrimaryProdID(db XODB, primaryProdID uint) ([]*XSku, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, sku_code, primary_prod_id, tax_slab_id, active_flag, org_id, created_by, updated_by, created_at, updated_at, pricing_comp_group_id, default_flag ` +
		`FROM x_showroom.x_sku ` +
		`WHERE primary_prod_id = ?`

	// run query
	XOLog(sqlstr, primaryProdID)
	q, err := db.Query(sqlstr, primaryProdID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSku{}
	for q.Next() {
		xs := XSku{
			_exists: true,
		}

		// scan
		err = q.Scan(&xs.ID, &xs.IntegrationID, &xs.Name, &xs.SkuCode, &xs.PrimaryProdID, &xs.TaxSlabID, &xs.ActiveFlag, &xs.OrgID, &xs.CreatedBy, &xs.UpdatedBy, &xs.CreatedAt, &xs.UpdatedAt, &xs.PricingCompGroupID, &xs.DefaultFlag)
		if err != nil {
			return nil, err
		}

		res = append(res, &xs)
	}

	return res, nil
}

// XSkuBySkuCodeOrgID retrieves a row from 'x_showroom.x_sku' as a XSku.
//
// Generated from index 'x_sku_sku_code_org_id_unique'.
func XSkuBySkuCodeOrgID(db XODB, skuCode string, orgID uint) (*XSku, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, sku_code, primary_prod_id, tax_slab_id, active_flag, org_id, created_by, updated_by, created_at, updated_at, pricing_comp_group_id, default_flag ` +
		`FROM x_showroom.x_sku ` +
		`WHERE sku_code = ? AND org_id = ?`

	// run query
	XOLog(sqlstr, skuCode, orgID)
	xs := XSku{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, skuCode, orgID).Scan(&xs.ID, &xs.IntegrationID, &xs.Name, &xs.SkuCode, &xs.PrimaryProdID, &xs.TaxSlabID, &xs.ActiveFlag, &xs.OrgID, &xs.CreatedBy, &xs.UpdatedBy, &xs.CreatedAt, &xs.UpdatedAt, &xs.PricingCompGroupID, &xs.DefaultFlag)
	if err != nil {
		return nil, err
	}

	return &xs, nil
}

// XSkusByTaxSlabID retrieves a row from 'x_showroom.x_sku' as a XSku.
//
// Generated from index 'x_sku_tax_slab_id_foreign'.
func XSkusByTaxSlabID(db XODB, taxSlabID sql.NullInt64) ([]*XSku, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, sku_code, primary_prod_id, tax_slab_id, active_flag, org_id, created_by, updated_by, created_at, updated_at, pricing_comp_group_id, default_flag ` +
		`FROM x_showroom.x_sku ` +
		`WHERE tax_slab_id = ?`

	// run query
	XOLog(sqlstr, taxSlabID)
	q, err := db.Query(sqlstr, taxSlabID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSku{}
	for q.Next() {
		xs := XSku{
			_exists: true,
		}

		// scan
		err = q.Scan(&xs.ID, &xs.IntegrationID, &xs.Name, &xs.SkuCode, &xs.PrimaryProdID, &xs.TaxSlabID, &xs.ActiveFlag, &xs.OrgID, &xs.CreatedBy, &xs.UpdatedBy, &xs.CreatedAt, &xs.UpdatedAt, &xs.PricingCompGroupID, &xs.DefaultFlag)
		if err != nil {
			return nil, err
		}

		res = append(res, &xs)
	}

	return res, nil
}

// XSkusByUpdatedBy retrieves a row from 'x_showroom.x_sku' as a XSku.
//
// Generated from index 'x_sku_updated_by_foreign'.
func XSkusByUpdatedBy(db XODB, updatedBy uint) ([]*XSku, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, sku_code, primary_prod_id, tax_slab_id, active_flag, org_id, created_by, updated_by, created_at, updated_at, pricing_comp_group_id, default_flag ` +
		`FROM x_showroom.x_sku ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSku{}
	for q.Next() {
		xs := XSku{
			_exists: true,
		}

		// scan
		err = q.Scan(&xs.ID, &xs.IntegrationID, &xs.Name, &xs.SkuCode, &xs.PrimaryProdID, &xs.TaxSlabID, &xs.ActiveFlag, &xs.OrgID, &xs.CreatedBy, &xs.UpdatedBy, &xs.CreatedAt, &xs.UpdatedAt, &xs.PricingCompGroupID, &xs.DefaultFlag)
		if err != nil {
			return nil, err
		}

		res = append(res, &xs)
	}

	return res, nil
}
