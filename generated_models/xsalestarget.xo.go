// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XSalesTarget represents a row from 'x_showroom.x_sales_target'.
type XSalesTarget struct {
	ID              uint           `json:"id"`                // id
	Category        string         `json:"category"`          // category
	TargetLeadCount uint           `json:"target_lead_count"` // target_lead_count
	ActualLeadCount uint           `json:"actual_lead_count"` // actual_lead_count
	ParID           uint           `json:"par_id"`            // par_id
	UserID          uint           `json:"user_id"`           // user_id
	CreatedBy       uint           `json:"created_by"`        // created_by
	UpdatedBy       uint           `json:"updated_by"`        // updated_by
	CreatedAt       mysql.NullTime `json:"created_at"`        // created_at
	UpdatedAt       mysql.NullTime `json:"updated_at"`        // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XSalesTarget exists in the database.
func (xst *XSalesTarget) Exists() bool {
	return xst._exists
}

// Deleted provides information if the XSalesTarget has been deleted from the database.
func (xst *XSalesTarget) Deleted() bool {
	return xst._deleted
}

// Insert inserts the XSalesTarget to the database.
func (xst *XSalesTarget) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xst._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_sales_target (` +
		`category, target_lead_count, actual_lead_count, par_id, user_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xst.Category, xst.TargetLeadCount, xst.ActualLeadCount, xst.ParID, xst.UserID, xst.CreatedBy, xst.UpdatedBy, xst.CreatedAt, xst.UpdatedAt)
	res, err := db.Exec(sqlstr, xst.Category, xst.TargetLeadCount, xst.ActualLeadCount, xst.ParID, xst.UserID, xst.CreatedBy, xst.UpdatedBy, xst.CreatedAt, xst.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xst.ID = uint(id)
	xst._exists = true

	return nil
}

// Update updates the XSalesTarget in the database.
func (xst *XSalesTarget) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xst._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xst._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_sales_target SET ` +
		`category = ?, target_lead_count = ?, actual_lead_count = ?, par_id = ?, user_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xst.Category, xst.TargetLeadCount, xst.ActualLeadCount, xst.ParID, xst.UserID, xst.CreatedBy, xst.UpdatedBy, xst.CreatedAt, xst.UpdatedAt, xst.ID)
	_, err = db.Exec(sqlstr, xst.Category, xst.TargetLeadCount, xst.ActualLeadCount, xst.ParID, xst.UserID, xst.CreatedBy, xst.UpdatedBy, xst.CreatedAt, xst.UpdatedAt, xst.ID)
	return err
}

// Save saves the XSalesTarget to the database.
func (xst *XSalesTarget) Save(db XODB) error {
	if xst.Exists() {
		return xst.Update(db)
	}

	return xst.Insert(db)
}

// Delete deletes the XSalesTarget from the database.
func (xst *XSalesTarget) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xst._exists {
		return nil
	}

	// if deleted, bail
	if xst._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_sales_target WHERE id = ?`

	// run query
	XOLog(sqlstr, xst.ID)
	_, err = db.Exec(sqlstr, xst.ID)
	if err != nil {
		return err
	}

	// set deleted
	xst._deleted = true

	return nil
}

// XSalesTargetByCategoryParIDUserID retrieves a row from 'x_showroom.x_sales_target' as a XSalesTarget.
//
// Generated from index 'x_sales_target_category_par_id_user_id_unique'.
func XSalesTargetByCategoryParIDUserID(db XODB, category string, parID uint, userID uint) (*XSalesTarget, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, category, target_lead_count, actual_lead_count, par_id, user_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sales_target ` +
		`WHERE category = ? AND par_id = ? AND user_id = ?`

	// run query
	XOLog(sqlstr, category, parID, userID)
	xst := XSalesTarget{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, category, parID, userID).Scan(&xst.ID, &xst.Category, &xst.TargetLeadCount, &xst.ActualLeadCount, &xst.ParID, &xst.UserID, &xst.CreatedBy, &xst.UpdatedBy, &xst.CreatedAt, &xst.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xst, nil
}

// XSalesTargetsByCreatedBy retrieves a row from 'x_showroom.x_sales_target' as a XSalesTarget.
//
// Generated from index 'x_sales_target_created_by_foreign'.
func XSalesTargetsByCreatedBy(db XODB, createdBy uint) ([]*XSalesTarget, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, category, target_lead_count, actual_lead_count, par_id, user_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sales_target ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSalesTarget{}
	for q.Next() {
		xst := XSalesTarget{
			_exists: true,
		}

		// scan
		err = q.Scan(&xst.ID, &xst.Category, &xst.TargetLeadCount, &xst.ActualLeadCount, &xst.ParID, &xst.UserID, &xst.CreatedBy, &xst.UpdatedBy, &xst.CreatedAt, &xst.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xst)
	}

	return res, nil
}

// XSalesTargetByID retrieves a row from 'x_showroom.x_sales_target' as a XSalesTarget.
//
// Generated from index 'x_sales_target_id_pkey'.
func XSalesTargetByID(db XODB, id uint) (*XSalesTarget, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, category, target_lead_count, actual_lead_count, par_id, user_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sales_target ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xst := XSalesTarget{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xst.ID, &xst.Category, &xst.TargetLeadCount, &xst.ActualLeadCount, &xst.ParID, &xst.UserID, &xst.CreatedBy, &xst.UpdatedBy, &xst.CreatedAt, &xst.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xst, nil
}

// XSalesTargetsByParID retrieves a row from 'x_showroom.x_sales_target' as a XSalesTarget.
//
// Generated from index 'x_sales_target_par_id_foreign'.
func XSalesTargetsByParID(db XODB, parID uint) ([]*XSalesTarget, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, category, target_lead_count, actual_lead_count, par_id, user_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sales_target ` +
		`WHERE par_id = ?`

	// run query
	XOLog(sqlstr, parID)
	q, err := db.Query(sqlstr, parID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSalesTarget{}
	for q.Next() {
		xst := XSalesTarget{
			_exists: true,
		}

		// scan
		err = q.Scan(&xst.ID, &xst.Category, &xst.TargetLeadCount, &xst.ActualLeadCount, &xst.ParID, &xst.UserID, &xst.CreatedBy, &xst.UpdatedBy, &xst.CreatedAt, &xst.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xst)
	}

	return res, nil
}

// XSalesTargetsByUpdatedBy retrieves a row from 'x_showroom.x_sales_target' as a XSalesTarget.
//
// Generated from index 'x_sales_target_updated_by_foreign'.
func XSalesTargetsByUpdatedBy(db XODB, updatedBy uint) ([]*XSalesTarget, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, category, target_lead_count, actual_lead_count, par_id, user_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sales_target ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSalesTarget{}
	for q.Next() {
		xst := XSalesTarget{
			_exists: true,
		}

		// scan
		err = q.Scan(&xst.ID, &xst.Category, &xst.TargetLeadCount, &xst.ActualLeadCount, &xst.ParID, &xst.UserID, &xst.CreatedBy, &xst.UpdatedBy, &xst.CreatedAt, &xst.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xst)
	}

	return res, nil
}

// XSalesTargetsByUserID retrieves a row from 'x_showroom.x_sales_target' as a XSalesTarget.
//
// Generated from index 'x_sales_target_user_id_foreign'.
func XSalesTargetsByUserID(db XODB, userID uint) ([]*XSalesTarget, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, category, target_lead_count, actual_lead_count, par_id, user_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sales_target ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSalesTarget{}
	for q.Next() {
		xst := XSalesTarget{
			_exists: true,
		}

		// scan
		err = q.Scan(&xst.ID, &xst.Category, &xst.TargetLeadCount, &xst.ActualLeadCount, &xst.ParID, &xst.UserID, &xst.CreatedBy, &xst.UpdatedBy, &xst.CreatedAt, &xst.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xst)
	}

	return res, nil
}
