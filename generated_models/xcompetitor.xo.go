// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XCompetitor represents a row from 'x_showroom.x_competitor'.
type XCompetitor struct {
	ID        uint           `json:"id"`         // id
	Name      string         `json:"name"`       // name
	ParID     sql.NullInt64  `json:"par_id"`     // par_id
	OrgID     uint           `json:"org_id"`     // org_id
	CreatedBy uint           `json:"created_by"` // created_by
	UpdatedBy uint           `json:"updated_by"` // updated_by
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XCompetitor exists in the database.
func (xc *XCompetitor) Exists() bool {
	return xc._exists
}

// Deleted provides information if the XCompetitor has been deleted from the database.
func (xc *XCompetitor) Deleted() bool {
	return xc._deleted
}

// Insert inserts the XCompetitor to the database.
func (xc *XCompetitor) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_competitor (` +
		`name, par_id, org_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xc.Name, xc.ParID, xc.OrgID, xc.CreatedBy, xc.UpdatedBy, xc.CreatedAt, xc.UpdatedAt)
	res, err := db.Exec(sqlstr, xc.Name, xc.ParID, xc.OrgID, xc.CreatedBy, xc.UpdatedBy, xc.CreatedAt, xc.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xc.ID = uint(id)
	xc._exists = true

	return nil
}

// Update updates the XCompetitor in the database.
func (xc *XCompetitor) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_competitor SET ` +
		`name = ?, par_id = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xc.Name, xc.ParID, xc.OrgID, xc.CreatedBy, xc.UpdatedBy, xc.CreatedAt, xc.UpdatedAt, xc.ID)
	_, err = db.Exec(sqlstr, xc.Name, xc.ParID, xc.OrgID, xc.CreatedBy, xc.UpdatedBy, xc.CreatedAt, xc.UpdatedAt, xc.ID)
	return err
}

// Save saves the XCompetitor to the database.
func (xc *XCompetitor) Save(db XODB) error {
	if xc.Exists() {
		return xc.Update(db)
	}

	return xc.Insert(db)
}

// Delete deletes the XCompetitor from the database.
func (xc *XCompetitor) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xc._exists {
		return nil
	}

	// if deleted, bail
	if xc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_competitor WHERE id = ?`

	// run query
	XOLog(sqlstr, xc.ID)
	_, err = db.Exec(sqlstr, xc.ID)
	if err != nil {
		return err
	}

	// set deleted
	xc._deleted = true

	return nil
}

// XCompetitorsByCreatedBy retrieves a row from 'x_showroom.x_competitor' as a XCompetitor.
//
// Generated from index 'x_competitor_created_by_foreign'.
func XCompetitorsByCreatedBy(db XODB, createdBy uint) ([]*XCompetitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, par_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_competitor ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCompetitor{}
	for q.Next() {
		xc := XCompetitor{
			_exists: true,
		}

		// scan
		err = q.Scan(&xc.ID, &xc.Name, &xc.ParID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xc)
	}

	return res, nil
}

// XCompetitorByID retrieves a row from 'x_showroom.x_competitor' as a XCompetitor.
//
// Generated from index 'x_competitor_id_pkey'.
func XCompetitorByID(db XODB, id uint) (*XCompetitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, par_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_competitor ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xc := XCompetitor{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xc.ID, &xc.Name, &xc.ParID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xc, nil
}

// XCompetitorByNameOrgID retrieves a row from 'x_showroom.x_competitor' as a XCompetitor.
//
// Generated from index 'x_competitor_name_org_id_unique'.
func XCompetitorByNameOrgID(db XODB, name string, orgID uint) (*XCompetitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, par_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_competitor ` +
		`WHERE name = ? AND org_id = ?`

	// run query
	XOLog(sqlstr, name, orgID)
	xc := XCompetitor{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, orgID).Scan(&xc.ID, &xc.Name, &xc.ParID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xc, nil
}

// XCompetitorsByOrgID retrieves a row from 'x_showroom.x_competitor' as a XCompetitor.
//
// Generated from index 'x_competitor_org_id_foreign'.
func XCompetitorsByOrgID(db XODB, orgID uint) ([]*XCompetitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, par_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_competitor ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCompetitor{}
	for q.Next() {
		xc := XCompetitor{
			_exists: true,
		}

		// scan
		err = q.Scan(&xc.ID, &xc.Name, &xc.ParID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xc)
	}

	return res, nil
}

// XCompetitorsByParID retrieves a row from 'x_showroom.x_competitor' as a XCompetitor.
//
// Generated from index 'x_competitor_par_id_foreign'.
func XCompetitorsByParID(db XODB, parID sql.NullInt64) ([]*XCompetitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, par_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_competitor ` +
		`WHERE par_id = ?`

	// run query
	XOLog(sqlstr, parID)
	q, err := db.Query(sqlstr, parID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCompetitor{}
	for q.Next() {
		xc := XCompetitor{
			_exists: true,
		}

		// scan
		err = q.Scan(&xc.ID, &xc.Name, &xc.ParID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xc)
	}

	return res, nil
}

// XCompetitorsByUpdatedBy retrieves a row from 'x_showroom.x_competitor' as a XCompetitor.
//
// Generated from index 'x_competitor_updated_by_foreign'.
func XCompetitorsByUpdatedBy(db XODB, updatedBy uint) ([]*XCompetitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, par_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_competitor ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCompetitor{}
	for q.Next() {
		xc := XCompetitor{
			_exists: true,
		}

		// scan
		err = q.Scan(&xc.ID, &xc.Name, &xc.ParID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xc)
	}

	return res, nil
}
