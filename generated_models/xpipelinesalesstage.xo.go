// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XPipelineSalesStage represents a row from 'x_showroom.x_pipeline_sales_stages'.
type XPipelineSalesStage struct {
	ID            uint           `json:"id"`              // id
	Name          string         `json:"name"`            // name
	Probability   float64        `json:"probability"`     // probability
	SeqNum        uint           `json:"seq_num"`         // seq_num
	ActiveFlag    string         `json:"active_flag"`     // active_flag
	SalesMethodID uint           `json:"sales_method_id"` // sales_method_id
	CreatedBy     uint           `json:"created_by"`      // created_by
	UpdatedBy     uint           `json:"updated_by"`      // updated_by
	CreatedAt     mysql.NullTime `json:"created_at"`      // created_at
	UpdatedAt     mysql.NullTime `json:"updated_at"`      // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XPipelineSalesStage exists in the database.
func (xpss *XPipelineSalesStage) Exists() bool {
	return xpss._exists
}

// Deleted provides information if the XPipelineSalesStage has been deleted from the database.
func (xpss *XPipelineSalesStage) Deleted() bool {
	return xpss._deleted
}

// Insert inserts the XPipelineSalesStage to the database.
func (xpss *XPipelineSalesStage) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xpss._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_pipeline_sales_stages (` +
		`name, probability, seq_num, active_flag, sales_method_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xpss.Name, xpss.Probability, xpss.SeqNum, xpss.ActiveFlag, xpss.SalesMethodID, xpss.CreatedBy, xpss.UpdatedBy, xpss.CreatedAt, xpss.UpdatedAt)
	res, err := db.Exec(sqlstr, xpss.Name, xpss.Probability, xpss.SeqNum, xpss.ActiveFlag, xpss.SalesMethodID, xpss.CreatedBy, xpss.UpdatedBy, xpss.CreatedAt, xpss.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xpss.ID = uint(id)
	xpss._exists = true

	return nil
}

// Update updates the XPipelineSalesStage in the database.
func (xpss *XPipelineSalesStage) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpss._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xpss._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_pipeline_sales_stages SET ` +
		`name = ?, probability = ?, seq_num = ?, active_flag = ?, sales_method_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xpss.Name, xpss.Probability, xpss.SeqNum, xpss.ActiveFlag, xpss.SalesMethodID, xpss.CreatedBy, xpss.UpdatedBy, xpss.CreatedAt, xpss.UpdatedAt, xpss.ID)
	_, err = db.Exec(sqlstr, xpss.Name, xpss.Probability, xpss.SeqNum, xpss.ActiveFlag, xpss.SalesMethodID, xpss.CreatedBy, xpss.UpdatedBy, xpss.CreatedAt, xpss.UpdatedAt, xpss.ID)
	return err
}

// Save saves the XPipelineSalesStage to the database.
func (xpss *XPipelineSalesStage) Save(db XODB) error {
	if xpss.Exists() {
		return xpss.Update(db)
	}

	return xpss.Insert(db)
}

// Delete deletes the XPipelineSalesStage from the database.
func (xpss *XPipelineSalesStage) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpss._exists {
		return nil
	}

	// if deleted, bail
	if xpss._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_pipeline_sales_stages WHERE id = ?`

	// run query
	XOLog(sqlstr, xpss.ID)
	_, err = db.Exec(sqlstr, xpss.ID)
	if err != nil {
		return err
	}

	// set deleted
	xpss._deleted = true

	return nil
}

// XPipelineSalesStagesByCreatedBy retrieves a row from 'x_showroom.x_pipeline_sales_stages' as a XPipelineSalesStage.
//
// Generated from index 'x_pipeline_sales_stages_created_by_foreign'.
func XPipelineSalesStagesByCreatedBy(db XODB, createdBy uint) ([]*XPipelineSalesStage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, probability, seq_num, active_flag, sales_method_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pipeline_sales_stages ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPipelineSalesStage{}
	for q.Next() {
		xpss := XPipelineSalesStage{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpss.ID, &xpss.Name, &xpss.Probability, &xpss.SeqNum, &xpss.ActiveFlag, &xpss.SalesMethodID, &xpss.CreatedBy, &xpss.UpdatedBy, &xpss.CreatedAt, &xpss.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpss)
	}

	return res, nil
}

// XPipelineSalesStageByID retrieves a row from 'x_showroom.x_pipeline_sales_stages' as a XPipelineSalesStage.
//
// Generated from index 'x_pipeline_sales_stages_id_pkey'.
func XPipelineSalesStageByID(db XODB, id uint) (*XPipelineSalesStage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, probability, seq_num, active_flag, sales_method_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pipeline_sales_stages ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xpss := XPipelineSalesStage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xpss.ID, &xpss.Name, &xpss.Probability, &xpss.SeqNum, &xpss.ActiveFlag, &xpss.SalesMethodID, &xpss.CreatedBy, &xpss.UpdatedBy, &xpss.CreatedAt, &xpss.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xpss, nil
}

// XPipelineSalesStageByNameSalesMethodID retrieves a row from 'x_showroom.x_pipeline_sales_stages' as a XPipelineSalesStage.
//
// Generated from index 'x_pipeline_sales_stages_name_sales_method_id_unique'.
func XPipelineSalesStageByNameSalesMethodID(db XODB, name string, salesMethodID uint) (*XPipelineSalesStage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, probability, seq_num, active_flag, sales_method_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pipeline_sales_stages ` +
		`WHERE name = ? AND sales_method_id = ?`

	// run query
	XOLog(sqlstr, name, salesMethodID)
	xpss := XPipelineSalesStage{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, salesMethodID).Scan(&xpss.ID, &xpss.Name, &xpss.Probability, &xpss.SeqNum, &xpss.ActiveFlag, &xpss.SalesMethodID, &xpss.CreatedBy, &xpss.UpdatedBy, &xpss.CreatedAt, &xpss.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xpss, nil
}

// XPipelineSalesStagesBySalesMethodID retrieves a row from 'x_showroom.x_pipeline_sales_stages' as a XPipelineSalesStage.
//
// Generated from index 'x_pipeline_sales_stages_sales_method_id_foreign'.
func XPipelineSalesStagesBySalesMethodID(db XODB, salesMethodID uint) ([]*XPipelineSalesStage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, probability, seq_num, active_flag, sales_method_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pipeline_sales_stages ` +
		`WHERE sales_method_id = ?`

	// run query
	XOLog(sqlstr, salesMethodID)
	q, err := db.Query(sqlstr, salesMethodID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPipelineSalesStage{}
	for q.Next() {
		xpss := XPipelineSalesStage{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpss.ID, &xpss.Name, &xpss.Probability, &xpss.SeqNum, &xpss.ActiveFlag, &xpss.SalesMethodID, &xpss.CreatedBy, &xpss.UpdatedBy, &xpss.CreatedAt, &xpss.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpss)
	}

	return res, nil
}

// XPipelineSalesStagesByUpdatedBy retrieves a row from 'x_showroom.x_pipeline_sales_stages' as a XPipelineSalesStage.
//
// Generated from index 'x_pipeline_sales_stages_updated_by_foreign'.
func XPipelineSalesStagesByUpdatedBy(db XODB, updatedBy uint) ([]*XPipelineSalesStage, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, probability, seq_num, active_flag, sales_method_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pipeline_sales_stages ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPipelineSalesStage{}
	for q.Next() {
		xpss := XPipelineSalesStage{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpss.ID, &xpss.Name, &xpss.Probability, &xpss.SeqNum, &xpss.ActiveFlag, &xpss.SalesMethodID, &xpss.CreatedBy, &xpss.UpdatedBy, &xpss.CreatedAt, &xpss.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpss)
	}

	return res, nil
}
