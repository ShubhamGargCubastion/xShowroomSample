// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XSkuPriComp represents a row from 'x_showroom.x_sku_pri_comp'.
type XSkuPriComp struct {
	ID                    uint           `json:"id"`                      // id
	SkuID                 uint           `json:"sku_id"`                  // sku_id
	SkuPriDimID           uint           `json:"sku_pri_dim_id"`          // sku_pri_dim_id
	PricingComponentName  string         `json:"pricing_component_name"`  // pricing_component_name
	PricingComponentType  string         `json:"pricing_component_type"`  // pricing_component_type
	PricingComponentValue float64        `json:"pricing_component_value"` // pricing_component_value
	CreatedBy             uint           `json:"created_by"`              // created_by
	UpdatedBy             uint           `json:"updated_by"`              // updated_by
	CreatedAt             mysql.NullTime `json:"created_at"`              // created_at
	UpdatedAt             mysql.NullTime `json:"updated_at"`              // updated_at
	PrimaryFlag           sql.NullString `json:"primary_flag"`            // primary_flag

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XSkuPriComp exists in the database.
func (xspc *XSkuPriComp) Exists() bool {
	return xspc._exists
}

// Deleted provides information if the XSkuPriComp has been deleted from the database.
func (xspc *XSkuPriComp) Deleted() bool {
	return xspc._deleted
}

// Insert inserts the XSkuPriComp to the database.
func (xspc *XSkuPriComp) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xspc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_sku_pri_comp (` +
		`sku_id, sku_pri_dim_id, pricing_component_name, pricing_component_type, pricing_component_value, created_by, updated_by, created_at, updated_at, primary_flag` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xspc.SkuID, xspc.SkuPriDimID, xspc.PricingComponentName, xspc.PricingComponentType, xspc.PricingComponentValue, xspc.CreatedBy, xspc.UpdatedBy, xspc.CreatedAt, xspc.UpdatedAt, xspc.PrimaryFlag)
	res, err := db.Exec(sqlstr, xspc.SkuID, xspc.SkuPriDimID, xspc.PricingComponentName, xspc.PricingComponentType, xspc.PricingComponentValue, xspc.CreatedBy, xspc.UpdatedBy, xspc.CreatedAt, xspc.UpdatedAt, xspc.PrimaryFlag)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xspc.ID = uint(id)
	xspc._exists = true

	return nil
}

// Update updates the XSkuPriComp in the database.
func (xspc *XSkuPriComp) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xspc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xspc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_sku_pri_comp SET ` +
		`sku_id = ?, sku_pri_dim_id = ?, pricing_component_name = ?, pricing_component_type = ?, pricing_component_value = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?, primary_flag = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xspc.SkuID, xspc.SkuPriDimID, xspc.PricingComponentName, xspc.PricingComponentType, xspc.PricingComponentValue, xspc.CreatedBy, xspc.UpdatedBy, xspc.CreatedAt, xspc.UpdatedAt, xspc.PrimaryFlag, xspc.ID)
	_, err = db.Exec(sqlstr, xspc.SkuID, xspc.SkuPriDimID, xspc.PricingComponentName, xspc.PricingComponentType, xspc.PricingComponentValue, xspc.CreatedBy, xspc.UpdatedBy, xspc.CreatedAt, xspc.UpdatedAt, xspc.PrimaryFlag, xspc.ID)
	return err
}

// Save saves the XSkuPriComp to the database.
func (xspc *XSkuPriComp) Save(db XODB) error {
	if xspc.Exists() {
		return xspc.Update(db)
	}

	return xspc.Insert(db)
}

// Delete deletes the XSkuPriComp from the database.
func (xspc *XSkuPriComp) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xspc._exists {
		return nil
	}

	// if deleted, bail
	if xspc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_sku_pri_comp WHERE id = ?`

	// run query
	XOLog(sqlstr, xspc.ID)
	_, err = db.Exec(sqlstr, xspc.ID)
	if err != nil {
		return err
	}

	// set deleted
	xspc._deleted = true

	return nil
}

// XSkuPriCompsByCreatedBy retrieves a row from 'x_showroom.x_sku_pri_comp' as a XSkuPriComp.
//
// Generated from index 'x_sku_pri_comp_created_by_foreign'.
func XSkuPriCompsByCreatedBy(db XODB, createdBy uint) ([]*XSkuPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku_id, sku_pri_dim_id, pricing_component_name, pricing_component_type, pricing_component_value, created_by, updated_by, created_at, updated_at, primary_flag ` +
		`FROM x_showroom.x_sku_pri_comp ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSkuPriComp{}
	for q.Next() {
		xspc := XSkuPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xspc.ID, &xspc.SkuID, &xspc.SkuPriDimID, &xspc.PricingComponentName, &xspc.PricingComponentType, &xspc.PricingComponentValue, &xspc.CreatedBy, &xspc.UpdatedBy, &xspc.CreatedAt, &xspc.UpdatedAt, &xspc.PrimaryFlag)
		if err != nil {
			return nil, err
		}

		res = append(res, &xspc)
	}

	return res, nil
}

// XSkuPriCompByID retrieves a row from 'x_showroom.x_sku_pri_comp' as a XSkuPriComp.
//
// Generated from index 'x_sku_pri_comp_id_pkey'.
func XSkuPriCompByID(db XODB, id uint) (*XSkuPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku_id, sku_pri_dim_id, pricing_component_name, pricing_component_type, pricing_component_value, created_by, updated_by, created_at, updated_at, primary_flag ` +
		`FROM x_showroom.x_sku_pri_comp ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xspc := XSkuPriComp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xspc.ID, &xspc.SkuID, &xspc.SkuPriDimID, &xspc.PricingComponentName, &xspc.PricingComponentType, &xspc.PricingComponentValue, &xspc.CreatedBy, &xspc.UpdatedBy, &xspc.CreatedAt, &xspc.UpdatedAt, &xspc.PrimaryFlag)
	if err != nil {
		return nil, err
	}

	return &xspc, nil
}

// XSkuPriCompByPricingComponentNameSkuPriDimID retrieves a row from 'x_showroom.x_sku_pri_comp' as a XSkuPriComp.
//
// Generated from index 'x_sku_pri_comp_pricing_component_name_sku_pri_dim_id_unique'.
func XSkuPriCompByPricingComponentNameSkuPriDimID(db XODB, pricingComponentName string, skuPriDimID uint) (*XSkuPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku_id, sku_pri_dim_id, pricing_component_name, pricing_component_type, pricing_component_value, created_by, updated_by, created_at, updated_at, primary_flag ` +
		`FROM x_showroom.x_sku_pri_comp ` +
		`WHERE pricing_component_name = ? AND sku_pri_dim_id = ?`

	// run query
	XOLog(sqlstr, pricingComponentName, skuPriDimID)
	xspc := XSkuPriComp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, pricingComponentName, skuPriDimID).Scan(&xspc.ID, &xspc.SkuID, &xspc.SkuPriDimID, &xspc.PricingComponentName, &xspc.PricingComponentType, &xspc.PricingComponentValue, &xspc.CreatedBy, &xspc.UpdatedBy, &xspc.CreatedAt, &xspc.UpdatedAt, &xspc.PrimaryFlag)
	if err != nil {
		return nil, err
	}

	return &xspc, nil
}

// XSkuPriCompsBySkuID retrieves a row from 'x_showroom.x_sku_pri_comp' as a XSkuPriComp.
//
// Generated from index 'x_sku_pri_comp_sku_id_foreign'.
func XSkuPriCompsBySkuID(db XODB, skuID uint) ([]*XSkuPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku_id, sku_pri_dim_id, pricing_component_name, pricing_component_type, pricing_component_value, created_by, updated_by, created_at, updated_at, primary_flag ` +
		`FROM x_showroom.x_sku_pri_comp ` +
		`WHERE sku_id = ?`

	// run query
	XOLog(sqlstr, skuID)
	q, err := db.Query(sqlstr, skuID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSkuPriComp{}
	for q.Next() {
		xspc := XSkuPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xspc.ID, &xspc.SkuID, &xspc.SkuPriDimID, &xspc.PricingComponentName, &xspc.PricingComponentType, &xspc.PricingComponentValue, &xspc.CreatedBy, &xspc.UpdatedBy, &xspc.CreatedAt, &xspc.UpdatedAt, &xspc.PrimaryFlag)
		if err != nil {
			return nil, err
		}

		res = append(res, &xspc)
	}

	return res, nil
}

// XSkuPriCompsBySkuPriDimID retrieves a row from 'x_showroom.x_sku_pri_comp' as a XSkuPriComp.
//
// Generated from index 'x_sku_pri_comp_sku_pri_dim_id_foreign'.
func XSkuPriCompsBySkuPriDimID(db XODB, skuPriDimID uint) ([]*XSkuPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku_id, sku_pri_dim_id, pricing_component_name, pricing_component_type, pricing_component_value, created_by, updated_by, created_at, updated_at, primary_flag ` +
		`FROM x_showroom.x_sku_pri_comp ` +
		`WHERE sku_pri_dim_id = ?`

	// run query
	XOLog(sqlstr, skuPriDimID)
	q, err := db.Query(sqlstr, skuPriDimID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSkuPriComp{}
	for q.Next() {
		xspc := XSkuPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xspc.ID, &xspc.SkuID, &xspc.SkuPriDimID, &xspc.PricingComponentName, &xspc.PricingComponentType, &xspc.PricingComponentValue, &xspc.CreatedBy, &xspc.UpdatedBy, &xspc.CreatedAt, &xspc.UpdatedAt, &xspc.PrimaryFlag)
		if err != nil {
			return nil, err
		}

		res = append(res, &xspc)
	}

	return res, nil
}

// XSkuPriCompsByUpdatedBy retrieves a row from 'x_showroom.x_sku_pri_comp' as a XSkuPriComp.
//
// Generated from index 'x_sku_pri_comp_updated_by_foreign'.
func XSkuPriCompsByUpdatedBy(db XODB, updatedBy uint) ([]*XSkuPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku_id, sku_pri_dim_id, pricing_component_name, pricing_component_type, pricing_component_value, created_by, updated_by, created_at, updated_at, primary_flag ` +
		`FROM x_showroom.x_sku_pri_comp ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSkuPriComp{}
	for q.Next() {
		xspc := XSkuPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xspc.ID, &xspc.SkuID, &xspc.SkuPriDimID, &xspc.PricingComponentName, &xspc.PricingComponentType, &xspc.PricingComponentValue, &xspc.CreatedBy, &xspc.UpdatedBy, &xspc.CreatedAt, &xspc.UpdatedAt, &xspc.PrimaryFlag)
		if err != nil {
			return nil, err
		}

		res = append(res, &xspc)
	}

	return res, nil
}
