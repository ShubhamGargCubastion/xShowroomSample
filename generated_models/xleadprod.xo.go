// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XLeadProd represents a row from 'x_showroom.x_lead_prod'.
type XLeadProd struct {
	ID             uint           `json:"id"`               // id
	ProdID         uint           `json:"prod_id"`          // prod_id
	CategoryID     sql.NullInt64  `json:"category_id"`      // category_id
	ParProdID      sql.NullInt64  `json:"par_prod_id"`      // par_prod_id
	LeadID         uint           `json:"lead_id"`          // lead_id
	BrochureSentDt mysql.NullTime `json:"brochure_sent_dt"` // brochure_sent_dt
	QuoteSentDt    mysql.NullTime `json:"quote_sent_dt"`    // quote_sent_dt
	DemoDt         mysql.NullTime `json:"demo_dt"`          // demo_dt
	PrimaryFlag    string         `json:"primary_flag"`     // primary_flag
	CreatedBy      uint           `json:"created_by"`       // created_by
	UpdatedBy      uint           `json:"updated_by"`       // updated_by
	CreatedAt      mysql.NullTime `json:"created_at"`       // created_at
	UpdatedAt      mysql.NullTime `json:"updated_at"`       // updated_at
	ListPrice      float64        `json:"list_price"`       // list_price
	Quantity       int            `json:"quantity"`         // quantity
	SkuDesc        sql.NullString `json:"sku_desc"`         // sku_desc
	IntegrationID  sql.NullString `json:"integration_id"`   // integration_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XLeadProd exists in the database.
func (xlp *XLeadProd) Exists() bool {
	return xlp._exists
}

// Deleted provides information if the XLeadProd has been deleted from the database.
func (xlp *XLeadProd) Deleted() bool {
	return xlp._deleted
}

// Insert inserts the XLeadProd to the database.
func (xlp *XLeadProd) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xlp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_lead_prod (` +
		`prod_id, category_id, par_prod_id, lead_id, brochure_sent_dt, quote_sent_dt, demo_dt, primary_flag, created_by, updated_by, created_at, updated_at, list_price, quantity, sku_desc, integration_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xlp.ProdID, xlp.CategoryID, xlp.ParProdID, xlp.LeadID, xlp.BrochureSentDt, xlp.QuoteSentDt, xlp.DemoDt, xlp.PrimaryFlag, xlp.CreatedBy, xlp.UpdatedBy, xlp.CreatedAt, xlp.UpdatedAt, xlp.ListPrice, xlp.Quantity, xlp.SkuDesc, xlp.IntegrationID)
	res, err := db.Exec(sqlstr, xlp.ProdID, xlp.CategoryID, xlp.ParProdID, xlp.LeadID, xlp.BrochureSentDt, xlp.QuoteSentDt, xlp.DemoDt, xlp.PrimaryFlag, xlp.CreatedBy, xlp.UpdatedBy, xlp.CreatedAt, xlp.UpdatedAt, xlp.ListPrice, xlp.Quantity, xlp.SkuDesc, xlp.IntegrationID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xlp.ID = uint(id)
	xlp._exists = true

	return nil
}

// Update updates the XLeadProd in the database.
func (xlp *XLeadProd) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xlp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xlp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_lead_prod SET ` +
		`prod_id = ?, category_id = ?, par_prod_id = ?, lead_id = ?, brochure_sent_dt = ?, quote_sent_dt = ?, demo_dt = ?, primary_flag = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?, list_price = ?, quantity = ?, sku_desc = ?, integration_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xlp.ProdID, xlp.CategoryID, xlp.ParProdID, xlp.LeadID, xlp.BrochureSentDt, xlp.QuoteSentDt, xlp.DemoDt, xlp.PrimaryFlag, xlp.CreatedBy, xlp.UpdatedBy, xlp.CreatedAt, xlp.UpdatedAt, xlp.ListPrice, xlp.Quantity, xlp.SkuDesc, xlp.IntegrationID, xlp.ID)
	_, err = db.Exec(sqlstr, xlp.ProdID, xlp.CategoryID, xlp.ParProdID, xlp.LeadID, xlp.BrochureSentDt, xlp.QuoteSentDt, xlp.DemoDt, xlp.PrimaryFlag, xlp.CreatedBy, xlp.UpdatedBy, xlp.CreatedAt, xlp.UpdatedAt, xlp.ListPrice, xlp.Quantity, xlp.SkuDesc, xlp.IntegrationID, xlp.ID)
	return err
}

// Save saves the XLeadProd to the database.
func (xlp *XLeadProd) Save(db XODB) error {
	if xlp.Exists() {
		return xlp.Update(db)
	}

	return xlp.Insert(db)
}

// Delete deletes the XLeadProd from the database.
func (xlp *XLeadProd) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xlp._exists {
		return nil
	}

	// if deleted, bail
	if xlp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_lead_prod WHERE id = ?`

	// run query
	XOLog(sqlstr, xlp.ID)
	_, err = db.Exec(sqlstr, xlp.ID)
	if err != nil {
		return err
	}

	// set deleted
	xlp._deleted = true

	return nil
}

// XLeadProdsByCategoryID retrieves a row from 'x_showroom.x_lead_prod' as a XLeadProd.
//
// Generated from index 'x_lead_prod_category_id_foreign'.
func XLeadProdsByCategoryID(db XODB, categoryID sql.NullInt64) ([]*XLeadProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, prod_id, category_id, par_prod_id, lead_id, brochure_sent_dt, quote_sent_dt, demo_dt, primary_flag, created_by, updated_by, created_at, updated_at, list_price, quantity, sku_desc, integration_id ` +
		`FROM x_showroom.x_lead_prod ` +
		`WHERE category_id = ?`

	// run query
	XOLog(sqlstr, categoryID)
	q, err := db.Query(sqlstr, categoryID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadProd{}
	for q.Next() {
		xlp := XLeadProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlp.ID, &xlp.ProdID, &xlp.CategoryID, &xlp.ParProdID, &xlp.LeadID, &xlp.BrochureSentDt, &xlp.QuoteSentDt, &xlp.DemoDt, &xlp.PrimaryFlag, &xlp.CreatedBy, &xlp.UpdatedBy, &xlp.CreatedAt, &xlp.UpdatedAt, &xlp.ListPrice, &xlp.Quantity, &xlp.SkuDesc, &xlp.IntegrationID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlp)
	}

	return res, nil
}

// XLeadProdsByCreatedBy retrieves a row from 'x_showroom.x_lead_prod' as a XLeadProd.
//
// Generated from index 'x_lead_prod_created_by_foreign'.
func XLeadProdsByCreatedBy(db XODB, createdBy uint) ([]*XLeadProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, prod_id, category_id, par_prod_id, lead_id, brochure_sent_dt, quote_sent_dt, demo_dt, primary_flag, created_by, updated_by, created_at, updated_at, list_price, quantity, sku_desc, integration_id ` +
		`FROM x_showroom.x_lead_prod ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadProd{}
	for q.Next() {
		xlp := XLeadProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlp.ID, &xlp.ProdID, &xlp.CategoryID, &xlp.ParProdID, &xlp.LeadID, &xlp.BrochureSentDt, &xlp.QuoteSentDt, &xlp.DemoDt, &xlp.PrimaryFlag, &xlp.CreatedBy, &xlp.UpdatedBy, &xlp.CreatedAt, &xlp.UpdatedAt, &xlp.ListPrice, &xlp.Quantity, &xlp.SkuDesc, &xlp.IntegrationID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlp)
	}

	return res, nil
}

// XLeadProdByID retrieves a row from 'x_showroom.x_lead_prod' as a XLeadProd.
//
// Generated from index 'x_lead_prod_id_pkey'.
func XLeadProdByID(db XODB, id uint) (*XLeadProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, prod_id, category_id, par_prod_id, lead_id, brochure_sent_dt, quote_sent_dt, demo_dt, primary_flag, created_by, updated_by, created_at, updated_at, list_price, quantity, sku_desc, integration_id ` +
		`FROM x_showroom.x_lead_prod ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xlp := XLeadProd{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xlp.ID, &xlp.ProdID, &xlp.CategoryID, &xlp.ParProdID, &xlp.LeadID, &xlp.BrochureSentDt, &xlp.QuoteSentDt, &xlp.DemoDt, &xlp.PrimaryFlag, &xlp.CreatedBy, &xlp.UpdatedBy, &xlp.CreatedAt, &xlp.UpdatedAt, &xlp.ListPrice, &xlp.Quantity, &xlp.SkuDesc, &xlp.IntegrationID)
	if err != nil {
		return nil, err
	}

	return &xlp, nil
}

// XLeadProdsByLeadID retrieves a row from 'x_showroom.x_lead_prod' as a XLeadProd.
//
// Generated from index 'x_lead_prod_lead_id_foreign'.
func XLeadProdsByLeadID(db XODB, leadID uint) ([]*XLeadProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, prod_id, category_id, par_prod_id, lead_id, brochure_sent_dt, quote_sent_dt, demo_dt, primary_flag, created_by, updated_by, created_at, updated_at, list_price, quantity, sku_desc, integration_id ` +
		`FROM x_showroom.x_lead_prod ` +
		`WHERE lead_id = ?`

	// run query
	XOLog(sqlstr, leadID)
	q, err := db.Query(sqlstr, leadID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadProd{}
	for q.Next() {
		xlp := XLeadProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlp.ID, &xlp.ProdID, &xlp.CategoryID, &xlp.ParProdID, &xlp.LeadID, &xlp.BrochureSentDt, &xlp.QuoteSentDt, &xlp.DemoDt, &xlp.PrimaryFlag, &xlp.CreatedBy, &xlp.UpdatedBy, &xlp.CreatedAt, &xlp.UpdatedAt, &xlp.ListPrice, &xlp.Quantity, &xlp.SkuDesc, &xlp.IntegrationID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlp)
	}

	return res, nil
}

// XLeadProdsByParProdID retrieves a row from 'x_showroom.x_lead_prod' as a XLeadProd.
//
// Generated from index 'x_lead_prod_par_prod_id_foreign'.
func XLeadProdsByParProdID(db XODB, parProdID sql.NullInt64) ([]*XLeadProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, prod_id, category_id, par_prod_id, lead_id, brochure_sent_dt, quote_sent_dt, demo_dt, primary_flag, created_by, updated_by, created_at, updated_at, list_price, quantity, sku_desc, integration_id ` +
		`FROM x_showroom.x_lead_prod ` +
		`WHERE par_prod_id = ?`

	// run query
	XOLog(sqlstr, parProdID)
	q, err := db.Query(sqlstr, parProdID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadProd{}
	for q.Next() {
		xlp := XLeadProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlp.ID, &xlp.ProdID, &xlp.CategoryID, &xlp.ParProdID, &xlp.LeadID, &xlp.BrochureSentDt, &xlp.QuoteSentDt, &xlp.DemoDt, &xlp.PrimaryFlag, &xlp.CreatedBy, &xlp.UpdatedBy, &xlp.CreatedAt, &xlp.UpdatedAt, &xlp.ListPrice, &xlp.Quantity, &xlp.SkuDesc, &xlp.IntegrationID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlp)
	}

	return res, nil
}

// XLeadProdsByProdID retrieves a row from 'x_showroom.x_lead_prod' as a XLeadProd.
//
// Generated from index 'x_lead_prod_prod_id_foreign'.
func XLeadProdsByProdID(db XODB, prodID uint) ([]*XLeadProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, prod_id, category_id, par_prod_id, lead_id, brochure_sent_dt, quote_sent_dt, demo_dt, primary_flag, created_by, updated_by, created_at, updated_at, list_price, quantity, sku_desc, integration_id ` +
		`FROM x_showroom.x_lead_prod ` +
		`WHERE prod_id = ?`

	// run query
	XOLog(sqlstr, prodID)
	q, err := db.Query(sqlstr, prodID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadProd{}
	for q.Next() {
		xlp := XLeadProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlp.ID, &xlp.ProdID, &xlp.CategoryID, &xlp.ParProdID, &xlp.LeadID, &xlp.BrochureSentDt, &xlp.QuoteSentDt, &xlp.DemoDt, &xlp.PrimaryFlag, &xlp.CreatedBy, &xlp.UpdatedBy, &xlp.CreatedAt, &xlp.UpdatedAt, &xlp.ListPrice, &xlp.Quantity, &xlp.SkuDesc, &xlp.IntegrationID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlp)
	}

	return res, nil
}

// XLeadProdsByUpdatedBy retrieves a row from 'x_showroom.x_lead_prod' as a XLeadProd.
//
// Generated from index 'x_lead_prod_updated_by_foreign'.
func XLeadProdsByUpdatedBy(db XODB, updatedBy uint) ([]*XLeadProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, prod_id, category_id, par_prod_id, lead_id, brochure_sent_dt, quote_sent_dt, demo_dt, primary_flag, created_by, updated_by, created_at, updated_at, list_price, quantity, sku_desc, integration_id ` +
		`FROM x_showroom.x_lead_prod ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadProd{}
	for q.Next() {
		xlp := XLeadProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlp.ID, &xlp.ProdID, &xlp.CategoryID, &xlp.ParProdID, &xlp.LeadID, &xlp.BrochureSentDt, &xlp.QuoteSentDt, &xlp.DemoDt, &xlp.PrimaryFlag, &xlp.CreatedBy, &xlp.UpdatedBy, &xlp.CreatedAt, &xlp.UpdatedAt, &xlp.ListPrice, &xlp.Quantity, &xlp.SkuDesc, &xlp.IntegrationID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlp)
	}

	return res, nil
}
