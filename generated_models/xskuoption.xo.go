// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XSkuOption represents a row from 'x_showroom.x_sku_option'.
type XSkuOption struct {
	ID           uint           `json:"id"`             // id
	SkuID        uint           `json:"sku_id"`         // sku_id
	ProdID       uint           `json:"prod_id"`        // prod_id
	OptionID     uint           `json:"option_id"`      // option_id
	OptionAttrID uint           `json:"option_attr_id"` // option_attr_id
	CreatedBy    uint           `json:"created_by"`     // created_by
	UpdatedBy    uint           `json:"updated_by"`     // updated_by
	CreatedAt    mysql.NullTime `json:"created_at"`     // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XSkuOption exists in the database.
func (xso *XSkuOption) Exists() bool {
	return xso._exists
}

// Deleted provides information if the XSkuOption has been deleted from the database.
func (xso *XSkuOption) Deleted() bool {
	return xso._deleted
}

// Insert inserts the XSkuOption to the database.
func (xso *XSkuOption) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xso._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_sku_option (` +
		`sku_id, prod_id, option_id, option_attr_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xso.SkuID, xso.ProdID, xso.OptionID, xso.OptionAttrID, xso.CreatedBy, xso.UpdatedBy, xso.CreatedAt, xso.UpdatedAt)
	res, err := db.Exec(sqlstr, xso.SkuID, xso.ProdID, xso.OptionID, xso.OptionAttrID, xso.CreatedBy, xso.UpdatedBy, xso.CreatedAt, xso.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xso.ID = uint(id)
	xso._exists = true

	return nil
}

// Update updates the XSkuOption in the database.
func (xso *XSkuOption) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xso._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xso._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_sku_option SET ` +
		`sku_id = ?, prod_id = ?, option_id = ?, option_attr_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xso.SkuID, xso.ProdID, xso.OptionID, xso.OptionAttrID, xso.CreatedBy, xso.UpdatedBy, xso.CreatedAt, xso.UpdatedAt, xso.ID)
	_, err = db.Exec(sqlstr, xso.SkuID, xso.ProdID, xso.OptionID, xso.OptionAttrID, xso.CreatedBy, xso.UpdatedBy, xso.CreatedAt, xso.UpdatedAt, xso.ID)
	return err
}

// Save saves the XSkuOption to the database.
func (xso *XSkuOption) Save(db XODB) error {
	if xso.Exists() {
		return xso.Update(db)
	}

	return xso.Insert(db)
}

// Delete deletes the XSkuOption from the database.
func (xso *XSkuOption) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xso._exists {
		return nil
	}

	// if deleted, bail
	if xso._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_sku_option WHERE id = ?`

	// run query
	XOLog(sqlstr, xso.ID)
	_, err = db.Exec(sqlstr, xso.ID)
	if err != nil {
		return err
	}

	// set deleted
	xso._deleted = true

	return nil
}

// XSkuOptionsByCreatedBy retrieves a row from 'x_showroom.x_sku_option' as a XSkuOption.
//
// Generated from index 'x_sku_option_created_by_foreign'.
func XSkuOptionsByCreatedBy(db XODB, createdBy uint) ([]*XSkuOption, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku_id, prod_id, option_id, option_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sku_option ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSkuOption{}
	for q.Next() {
		xso := XSkuOption{
			_exists: true,
		}

		// scan
		err = q.Scan(&xso.ID, &xso.SkuID, &xso.ProdID, &xso.OptionID, &xso.OptionAttrID, &xso.CreatedBy, &xso.UpdatedBy, &xso.CreatedAt, &xso.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xso)
	}

	return res, nil
}

// XSkuOptionByID retrieves a row from 'x_showroom.x_sku_option' as a XSkuOption.
//
// Generated from index 'x_sku_option_id_pkey'.
func XSkuOptionByID(db XODB, id uint) (*XSkuOption, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku_id, prod_id, option_id, option_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sku_option ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xso := XSkuOption{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xso.ID, &xso.SkuID, &xso.ProdID, &xso.OptionID, &xso.OptionAttrID, &xso.CreatedBy, &xso.UpdatedBy, &xso.CreatedAt, &xso.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xso, nil
}

// XSkuOptionsByOptionAttrID retrieves a row from 'x_showroom.x_sku_option' as a XSkuOption.
//
// Generated from index 'x_sku_option_option_attr_id_foreign'.
func XSkuOptionsByOptionAttrID(db XODB, optionAttrID uint) ([]*XSkuOption, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku_id, prod_id, option_id, option_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sku_option ` +
		`WHERE option_attr_id = ?`

	// run query
	XOLog(sqlstr, optionAttrID)
	q, err := db.Query(sqlstr, optionAttrID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSkuOption{}
	for q.Next() {
		xso := XSkuOption{
			_exists: true,
		}

		// scan
		err = q.Scan(&xso.ID, &xso.SkuID, &xso.ProdID, &xso.OptionID, &xso.OptionAttrID, &xso.CreatedBy, &xso.UpdatedBy, &xso.CreatedAt, &xso.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xso)
	}

	return res, nil
}

// XSkuOptionByOptionIDSkuID retrieves a row from 'x_showroom.x_sku_option' as a XSkuOption.
//
// Generated from index 'x_sku_option_option_id_sku_id_unique'.
func XSkuOptionByOptionIDSkuID(db XODB, optionID uint, skuID uint) (*XSkuOption, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku_id, prod_id, option_id, option_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sku_option ` +
		`WHERE option_id = ? AND sku_id = ?`

	// run query
	XOLog(sqlstr, optionID, skuID)
	xso := XSkuOption{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, optionID, skuID).Scan(&xso.ID, &xso.SkuID, &xso.ProdID, &xso.OptionID, &xso.OptionAttrID, &xso.CreatedBy, &xso.UpdatedBy, &xso.CreatedAt, &xso.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xso, nil
}

// XSkuOptionsByProdID retrieves a row from 'x_showroom.x_sku_option' as a XSkuOption.
//
// Generated from index 'x_sku_option_prod_id_foreign'.
func XSkuOptionsByProdID(db XODB, prodID uint) ([]*XSkuOption, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku_id, prod_id, option_id, option_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sku_option ` +
		`WHERE prod_id = ?`

	// run query
	XOLog(sqlstr, prodID)
	q, err := db.Query(sqlstr, prodID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSkuOption{}
	for q.Next() {
		xso := XSkuOption{
			_exists: true,
		}

		// scan
		err = q.Scan(&xso.ID, &xso.SkuID, &xso.ProdID, &xso.OptionID, &xso.OptionAttrID, &xso.CreatedBy, &xso.UpdatedBy, &xso.CreatedAt, &xso.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xso)
	}

	return res, nil
}

// XSkuOptionsBySkuID retrieves a row from 'x_showroom.x_sku_option' as a XSkuOption.
//
// Generated from index 'x_sku_option_sku_id_foreign'.
func XSkuOptionsBySkuID(db XODB, skuID uint) ([]*XSkuOption, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku_id, prod_id, option_id, option_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sku_option ` +
		`WHERE sku_id = ?`

	// run query
	XOLog(sqlstr, skuID)
	q, err := db.Query(sqlstr, skuID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSkuOption{}
	for q.Next() {
		xso := XSkuOption{
			_exists: true,
		}

		// scan
		err = q.Scan(&xso.ID, &xso.SkuID, &xso.ProdID, &xso.OptionID, &xso.OptionAttrID, &xso.CreatedBy, &xso.UpdatedBy, &xso.CreatedAt, &xso.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xso)
	}

	return res, nil
}

// XSkuOptionsByUpdatedBy retrieves a row from 'x_showroom.x_sku_option' as a XSkuOption.
//
// Generated from index 'x_sku_option_updated_by_foreign'.
func XSkuOptionsByUpdatedBy(db XODB, updatedBy uint) ([]*XSkuOption, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sku_id, prod_id, option_id, option_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sku_option ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSkuOption{}
	for q.Next() {
		xso := XSkuOption{
			_exists: true,
		}

		// scan
		err = q.Scan(&xso.ID, &xso.SkuID, &xso.ProdID, &xso.OptionID, &xso.OptionAttrID, &xso.CreatedBy, &xso.UpdatedBy, &xso.CreatedAt, &xso.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xso)
	}

	return res, nil
}
