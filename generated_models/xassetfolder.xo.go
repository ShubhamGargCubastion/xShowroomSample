// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XAssetFolder represents a row from 'x_showroom.x_asset_folder'.
type XAssetFolder struct {
	ID        uint           `json:"id"`         // id
	Name      string         `json:"name"`       // name
	ParID     sql.NullInt64  `json:"par_id"`     // par_id
	OrgID     uint           `json:"org_id"`     // org_id
	CreatedBy uint           `json:"created_by"` // created_by
	UpdatedBy uint           `json:"updated_by"` // updated_by
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XAssetFolder exists in the database.
func (xaf *XAssetFolder) Exists() bool {
	return xaf._exists
}

// Deleted provides information if the XAssetFolder has been deleted from the database.
func (xaf *XAssetFolder) Deleted() bool {
	return xaf._deleted
}

// Insert inserts the XAssetFolder to the database.
func (xaf *XAssetFolder) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xaf._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_asset_folder (` +
		`name, par_id, org_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xaf.Name, xaf.ParID, xaf.OrgID, xaf.CreatedBy, xaf.UpdatedBy, xaf.CreatedAt, xaf.UpdatedAt)
	res, err := db.Exec(sqlstr, xaf.Name, xaf.ParID, xaf.OrgID, xaf.CreatedBy, xaf.UpdatedBy, xaf.CreatedAt, xaf.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xaf.ID = uint(id)
	xaf._exists = true

	return nil
}

// Update updates the XAssetFolder in the database.
func (xaf *XAssetFolder) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xaf._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xaf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_asset_folder SET ` +
		`name = ?, par_id = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xaf.Name, xaf.ParID, xaf.OrgID, xaf.CreatedBy, xaf.UpdatedBy, xaf.CreatedAt, xaf.UpdatedAt, xaf.ID)
	_, err = db.Exec(sqlstr, xaf.Name, xaf.ParID, xaf.OrgID, xaf.CreatedBy, xaf.UpdatedBy, xaf.CreatedAt, xaf.UpdatedAt, xaf.ID)
	return err
}

// Save saves the XAssetFolder to the database.
func (xaf *XAssetFolder) Save(db XODB) error {
	if xaf.Exists() {
		return xaf.Update(db)
	}

	return xaf.Insert(db)
}

// Delete deletes the XAssetFolder from the database.
func (xaf *XAssetFolder) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xaf._exists {
		return nil
	}

	// if deleted, bail
	if xaf._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_asset_folder WHERE id = ?`

	// run query
	XOLog(sqlstr, xaf.ID)
	_, err = db.Exec(sqlstr, xaf.ID)
	if err != nil {
		return err
	}

	// set deleted
	xaf._deleted = true

	return nil
}

// XUserByCreatedBy returns the XUser associated with the XAssetFolder's CreatedBy (created_by).
//
// Generated from foreign key 'x_asset_folder_created_by_foreign'.
func (xaf *XAssetFolder) XUserByCreatedBy(db XODB) (*XUser, error) {
	return XUserByID(db, xaf.CreatedBy)
}

// XOrgExt returns the XOrgExt associated with the XAssetFolder's OrgID (org_id).
//
// Generated from foreign key 'x_asset_folder_org_id_foreign'.
func (xaf *XAssetFolder) XOrgExt(db XODB) (*XOrgExt, error) {
	return XOrgExtByID(db, xaf.OrgID)
}

// XAssetFolder returns the XAssetFolder associated with the XAssetFolder's ParID (par_id).
//
// Generated from foreign key 'x_asset_folder_par_id_foreign'.
func (xaf *XAssetFolder) XAssetFolder(db XODB) (*XAssetFolder, error) {
	return XAssetFolderByID(db, uint(xaf.ParID.Int64))
}

// XUserByUpdatedBy returns the XUser associated with the XAssetFolder's UpdatedBy (updated_by).
//
// Generated from foreign key 'x_asset_folder_updated_by_foreign'.
func (xaf *XAssetFolder) XUserByUpdatedBy(db XODB) (*XUser, error) {
	return XUserByID(db, xaf.UpdatedBy)
}

// XAssetFoldersByCreatedBy retrieves a row from 'x_showroom.x_asset_folder' as a XAssetFolder.
//
// Generated from index 'x_asset_folder_created_by_foreign'.
func XAssetFoldersByCreatedBy(db XODB, createdBy uint) ([]*XAssetFolder, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, par_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_asset_folder ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XAssetFolder{}
	for q.Next() {
		xaf := XAssetFolder{
			_exists: true,
		}

		// scan
		err = q.Scan(&xaf.ID, &xaf.Name, &xaf.ParID, &xaf.OrgID, &xaf.CreatedBy, &xaf.UpdatedBy, &xaf.CreatedAt, &xaf.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xaf)
	}

	return res, nil
}

// XAssetFolderByID retrieves a row from 'x_showroom.x_asset_folder' as a XAssetFolder.
//
// Generated from index 'x_asset_folder_id_pkey'.
func XAssetFolderByID(db XODB, id uint) (*XAssetFolder, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, par_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_asset_folder ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xaf := XAssetFolder{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xaf.ID, &xaf.Name, &xaf.ParID, &xaf.OrgID, &xaf.CreatedBy, &xaf.UpdatedBy, &xaf.CreatedAt, &xaf.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xaf, nil
}

// XAssetFolderByNameParIDOrgID retrieves a row from 'x_showroom.x_asset_folder' as a XAssetFolder.
//
// Generated from index 'x_asset_folder_name_par_id_org_id_unique'.
func XAssetFolderByNameParIDOrgID(db XODB, name string, parID sql.NullInt64, orgID uint) (*XAssetFolder, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, par_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_asset_folder ` +
		`WHERE name = ? AND par_id = ? AND org_id = ?`

	// run query
	XOLog(sqlstr, name, parID, orgID)
	xaf := XAssetFolder{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, parID, orgID).Scan(&xaf.ID, &xaf.Name, &xaf.ParID, &xaf.OrgID, &xaf.CreatedBy, &xaf.UpdatedBy, &xaf.CreatedAt, &xaf.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xaf, nil
}

// XAssetFoldersByOrgID retrieves a row from 'x_showroom.x_asset_folder' as a XAssetFolder.
//
// Generated from index 'x_asset_folder_org_id_foreign'.
func XAssetFoldersByOrgID(db XODB, orgID uint) ([]*XAssetFolder, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, par_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_asset_folder ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XAssetFolder{}
	for q.Next() {
		xaf := XAssetFolder{
			_exists: true,
		}

		// scan
		err = q.Scan(&xaf.ID, &xaf.Name, &xaf.ParID, &xaf.OrgID, &xaf.CreatedBy, &xaf.UpdatedBy, &xaf.CreatedAt, &xaf.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xaf)
	}

	return res, nil
}

// XAssetFoldersByParID retrieves a row from 'x_showroom.x_asset_folder' as a XAssetFolder.
//
// Generated from index 'x_asset_folder_par_id_foreign'.
func XAssetFoldersByParID(db XODB, parID sql.NullInt64) ([]*XAssetFolder, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, par_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_asset_folder ` +
		`WHERE par_id = ?`

	// run query
	XOLog(sqlstr, parID)
	q, err := db.Query(sqlstr, parID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XAssetFolder{}
	for q.Next() {
		xaf := XAssetFolder{
			_exists: true,
		}

		// scan
		err = q.Scan(&xaf.ID, &xaf.Name, &xaf.ParID, &xaf.OrgID, &xaf.CreatedBy, &xaf.UpdatedBy, &xaf.CreatedAt, &xaf.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xaf)
	}

	return res, nil
}

// XAssetFoldersByUpdatedBy retrieves a row from 'x_showroom.x_asset_folder' as a XAssetFolder.
//
// Generated from index 'x_asset_folder_updated_by_foreign'.
func XAssetFoldersByUpdatedBy(db XODB, updatedBy uint) ([]*XAssetFolder, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, par_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_asset_folder ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XAssetFolder{}
	for q.Next() {
		xaf := XAssetFolder{
			_exists: true,
		}

		// scan
		err = q.Scan(&xaf.ID, &xaf.Name, &xaf.ParID, &xaf.OrgID, &xaf.CreatedBy, &xaf.UpdatedBy, &xaf.CreatedAt, &xaf.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xaf)
	}

	return res, nil
}
