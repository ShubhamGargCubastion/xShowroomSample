// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XDevice represents a row from 'x_showroom.x_device'.
type XDevice struct {
	ID          uint           `json:"id"`           // id
	DeviceID    string         `json:"device_id"`    // device_id
	UserID      sql.NullInt64  `json:"user_id"`      // user_id
	BlockedFlag string         `json:"blocked_flag"` // blocked_flag
	CreatedBy   uint           `json:"created_by"`   // created_by
	UpdatedBy   uint           `json:"updated_by"`   // updated_by
	OrgID       uint           `json:"org_id"`       // org_id
	CreatedAt   mysql.NullTime `json:"created_at"`   // created_at
	UpdatedAt   mysql.NullTime `json:"updated_at"`   // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XDevice exists in the database.
func (xd *XDevice) Exists() bool {
	return xd._exists
}

// Deleted provides information if the XDevice has been deleted from the database.
func (xd *XDevice) Deleted() bool {
	return xd._deleted
}

// Insert inserts the XDevice to the database.
func (xd *XDevice) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_device (` +
		`device_id, user_id, blocked_flag, created_by, updated_by, org_id, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xd.DeviceID, xd.UserID, xd.BlockedFlag, xd.CreatedBy, xd.UpdatedBy, xd.OrgID, xd.CreatedAt, xd.UpdatedAt)
	res, err := db.Exec(sqlstr, xd.DeviceID, xd.UserID, xd.BlockedFlag, xd.CreatedBy, xd.UpdatedBy, xd.OrgID, xd.CreatedAt, xd.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xd.ID = uint(id)
	xd._exists = true

	return nil
}

// Update updates the XDevice in the database.
func (xd *XDevice) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_device SET ` +
		`device_id = ?, user_id = ?, blocked_flag = ?, created_by = ?, updated_by = ?, org_id = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xd.DeviceID, xd.UserID, xd.BlockedFlag, xd.CreatedBy, xd.UpdatedBy, xd.OrgID, xd.CreatedAt, xd.UpdatedAt, xd.ID)
	_, err = db.Exec(sqlstr, xd.DeviceID, xd.UserID, xd.BlockedFlag, xd.CreatedBy, xd.UpdatedBy, xd.OrgID, xd.CreatedAt, xd.UpdatedAt, xd.ID)
	return err
}

// Save saves the XDevice to the database.
func (xd *XDevice) Save(db XODB) error {
	if xd.Exists() {
		return xd.Update(db)
	}

	return xd.Insert(db)
}

// Delete deletes the XDevice from the database.
func (xd *XDevice) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xd._exists {
		return nil
	}

	// if deleted, bail
	if xd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_device WHERE id = ?`

	// run query
	XOLog(sqlstr, xd.ID)
	_, err = db.Exec(sqlstr, xd.ID)
	if err != nil {
		return err
	}

	// set deleted
	xd._deleted = true

	return nil
}

// XDevicesByCreatedBy retrieves a row from 'x_showroom.x_device' as a XDevice.
//
// Generated from index 'x_device_created_by_foreign'.
func XDevicesByCreatedBy(db XODB, createdBy uint) ([]*XDevice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, device_id, user_id, blocked_flag, created_by, updated_by, org_id, created_at, updated_at ` +
		`FROM x_showroom.x_device ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDevice{}
	for q.Next() {
		xd := XDevice{
			_exists: true,
		}

		// scan
		err = q.Scan(&xd.ID, &xd.DeviceID, &xd.UserID, &xd.BlockedFlag, &xd.CreatedBy, &xd.UpdatedBy, &xd.OrgID, &xd.CreatedAt, &xd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xd)
	}

	return res, nil
}

// XDeviceByID retrieves a row from 'x_showroom.x_device' as a XDevice.
//
// Generated from index 'x_device_id_pkey'.
func XDeviceByID(db XODB, id uint) (*XDevice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, device_id, user_id, blocked_flag, created_by, updated_by, org_id, created_at, updated_at ` +
		`FROM x_showroom.x_device ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xd := XDevice{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xd.ID, &xd.DeviceID, &xd.UserID, &xd.BlockedFlag, &xd.CreatedBy, &xd.UpdatedBy, &xd.OrgID, &xd.CreatedAt, &xd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xd, nil
}

// XDevicesByOrgID retrieves a row from 'x_showroom.x_device' as a XDevice.
//
// Generated from index 'x_device_org_id_foreign'.
func XDevicesByOrgID(db XODB, orgID uint) ([]*XDevice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, device_id, user_id, blocked_flag, created_by, updated_by, org_id, created_at, updated_at ` +
		`FROM x_showroom.x_device ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDevice{}
	for q.Next() {
		xd := XDevice{
			_exists: true,
		}

		// scan
		err = q.Scan(&xd.ID, &xd.DeviceID, &xd.UserID, &xd.BlockedFlag, &xd.CreatedBy, &xd.UpdatedBy, &xd.OrgID, &xd.CreatedAt, &xd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xd)
	}

	return res, nil
}

// XDevicesByUpdatedBy retrieves a row from 'x_showroom.x_device' as a XDevice.
//
// Generated from index 'x_device_updated_by_foreign'.
func XDevicesByUpdatedBy(db XODB, updatedBy uint) ([]*XDevice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, device_id, user_id, blocked_flag, created_by, updated_by, org_id, created_at, updated_at ` +
		`FROM x_showroom.x_device ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDevice{}
	for q.Next() {
		xd := XDevice{
			_exists: true,
		}

		// scan
		err = q.Scan(&xd.ID, &xd.DeviceID, &xd.UserID, &xd.BlockedFlag, &xd.CreatedBy, &xd.UpdatedBy, &xd.OrgID, &xd.CreatedAt, &xd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xd)
	}

	return res, nil
}

// XDevicesByUserID retrieves a row from 'x_showroom.x_device' as a XDevice.
//
// Generated from index 'x_device_user_id_foreign'.
func XDevicesByUserID(db XODB, userID sql.NullInt64) ([]*XDevice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, device_id, user_id, blocked_flag, created_by, updated_by, org_id, created_at, updated_at ` +
		`FROM x_showroom.x_device ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDevice{}
	for q.Next() {
		xd := XDevice{
			_exists: true,
		}

		// scan
		err = q.Scan(&xd.ID, &xd.DeviceID, &xd.UserID, &xd.BlockedFlag, &xd.CreatedBy, &xd.UpdatedBy, &xd.OrgID, &xd.CreatedAt, &xd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xd)
	}

	return res, nil
}
