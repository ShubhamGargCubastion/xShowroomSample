// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XDemoGroupDefDtlItem represents a row from 'x_showroom.x_demo_group_def_dtl_item'.
type XDemoGroupDefDtlItem struct {
	ID                uint           `json:"id"`                    // id
	TypeCd            string         `json:"type_cd"`               // type_cd
	Width             float64        `json:"width"`                 // width
	Height            float64        `json:"height"`                // height
	XCoordinate       float64        `json:"x_coordinate"`          // x_coordinate
	YCoordinate       float64        `json:"y_coordinate"`          // y_coordinate
	Alpha             float64        `json:"alpha"`                 // alpha
	AttID             sql.NullInt64  `json:"att_id"`                // att_id
	DescText          sql.NullString `json:"desc_text"`             // desc_text
	DescTextFontName  sql.NullString `json:"desc_text_font_name"`   // desc_text_font_name
	DescTextFontSize  sql.NullString `json:"desc_text_font_size"`   // desc_text_font_size
	DescTextFontColor sql.NullString `json:"desc_text_font_color"`  // desc_text_font_color
	DemoGroupDefID    uint           `json:"demo_group_def_id"`     // demo_group_def_id
	DemoGroupDefDtlID uint           `json:"demo_group_def_dtl_id"` // demo_group_def_dtl_id
	CreatedBy         uint           `json:"created_by"`            // created_by
	UpdatedBy         uint           `json:"updated_by"`            // updated_by
	CreatedAt         mysql.NullTime `json:"created_at"`            // created_at
	UpdatedAt         mysql.NullTime `json:"updated_at"`            // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XDemoGroupDefDtlItem exists in the database.
func (xdgddi *XDemoGroupDefDtlItem) Exists() bool {
	return xdgddi._exists
}

// Deleted provides information if the XDemoGroupDefDtlItem has been deleted from the database.
func (xdgddi *XDemoGroupDefDtlItem) Deleted() bool {
	return xdgddi._deleted
}

// Insert inserts the XDemoGroupDefDtlItem to the database.
func (xdgddi *XDemoGroupDefDtlItem) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xdgddi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_demo_group_def_dtl_item (` +
		`type_cd, width, height, x_coordinate, y_coordinate, alpha, att_id, desc_text, desc_text_font_name, desc_text_font_size, desc_text_font_color, demo_group_def_id, demo_group_def_dtl_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xdgddi.TypeCd, xdgddi.Width, xdgddi.Height, xdgddi.XCoordinate, xdgddi.YCoordinate, xdgddi.Alpha, xdgddi.AttID, xdgddi.DescText, xdgddi.DescTextFontName, xdgddi.DescTextFontSize, xdgddi.DescTextFontColor, xdgddi.DemoGroupDefID, xdgddi.DemoGroupDefDtlID, xdgddi.CreatedBy, xdgddi.UpdatedBy, xdgddi.CreatedAt, xdgddi.UpdatedAt)
	res, err := db.Exec(sqlstr, xdgddi.TypeCd, xdgddi.Width, xdgddi.Height, xdgddi.XCoordinate, xdgddi.YCoordinate, xdgddi.Alpha, xdgddi.AttID, xdgddi.DescText, xdgddi.DescTextFontName, xdgddi.DescTextFontSize, xdgddi.DescTextFontColor, xdgddi.DemoGroupDefID, xdgddi.DemoGroupDefDtlID, xdgddi.CreatedBy, xdgddi.UpdatedBy, xdgddi.CreatedAt, xdgddi.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xdgddi.ID = uint(id)
	xdgddi._exists = true

	return nil
}

// Update updates the XDemoGroupDefDtlItem in the database.
func (xdgddi *XDemoGroupDefDtlItem) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xdgddi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xdgddi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_demo_group_def_dtl_item SET ` +
		`type_cd = ?, width = ?, height = ?, x_coordinate = ?, y_coordinate = ?, alpha = ?, att_id = ?, desc_text = ?, desc_text_font_name = ?, desc_text_font_size = ?, desc_text_font_color = ?, demo_group_def_id = ?, demo_group_def_dtl_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xdgddi.TypeCd, xdgddi.Width, xdgddi.Height, xdgddi.XCoordinate, xdgddi.YCoordinate, xdgddi.Alpha, xdgddi.AttID, xdgddi.DescText, xdgddi.DescTextFontName, xdgddi.DescTextFontSize, xdgddi.DescTextFontColor, xdgddi.DemoGroupDefID, xdgddi.DemoGroupDefDtlID, xdgddi.CreatedBy, xdgddi.UpdatedBy, xdgddi.CreatedAt, xdgddi.UpdatedAt, xdgddi.ID)
	_, err = db.Exec(sqlstr, xdgddi.TypeCd, xdgddi.Width, xdgddi.Height, xdgddi.XCoordinate, xdgddi.YCoordinate, xdgddi.Alpha, xdgddi.AttID, xdgddi.DescText, xdgddi.DescTextFontName, xdgddi.DescTextFontSize, xdgddi.DescTextFontColor, xdgddi.DemoGroupDefID, xdgddi.DemoGroupDefDtlID, xdgddi.CreatedBy, xdgddi.UpdatedBy, xdgddi.CreatedAt, xdgddi.UpdatedAt, xdgddi.ID)
	return err
}

// Save saves the XDemoGroupDefDtlItem to the database.
func (xdgddi *XDemoGroupDefDtlItem) Save(db XODB) error {
	if xdgddi.Exists() {
		return xdgddi.Update(db)
	}

	return xdgddi.Insert(db)
}

// Delete deletes the XDemoGroupDefDtlItem from the database.
func (xdgddi *XDemoGroupDefDtlItem) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xdgddi._exists {
		return nil
	}

	// if deleted, bail
	if xdgddi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_demo_group_def_dtl_item WHERE id = ?`

	// run query
	XOLog(sqlstr, xdgddi.ID)
	_, err = db.Exec(sqlstr, xdgddi.ID)
	if err != nil {
		return err
	}

	// set deleted
	xdgddi._deleted = true

	return nil
}

// XDemoGroupDefDtlItemsByCreatedBy retrieves a row from 'x_showroom.x_demo_group_def_dtl_item' as a XDemoGroupDefDtlItem.
//
// Generated from index 'x_demo_group_def_dtl_item_created_by_foreign'.
func XDemoGroupDefDtlItemsByCreatedBy(db XODB, createdBy uint) ([]*XDemoGroupDefDtlItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type_cd, width, height, x_coordinate, y_coordinate, alpha, att_id, desc_text, desc_text_font_name, desc_text_font_size, desc_text_font_color, demo_group_def_id, demo_group_def_dtl_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo_group_def_dtl_item ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroupDefDtlItem{}
	for q.Next() {
		xdgddi := XDemoGroupDefDtlItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdgddi.ID, &xdgddi.TypeCd, &xdgddi.Width, &xdgddi.Height, &xdgddi.XCoordinate, &xdgddi.YCoordinate, &xdgddi.Alpha, &xdgddi.AttID, &xdgddi.DescText, &xdgddi.DescTextFontName, &xdgddi.DescTextFontSize, &xdgddi.DescTextFontColor, &xdgddi.DemoGroupDefID, &xdgddi.DemoGroupDefDtlID, &xdgddi.CreatedBy, &xdgddi.UpdatedBy, &xdgddi.CreatedAt, &xdgddi.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdgddi)
	}

	return res, nil
}

// XDemoGroupDefDtlItemsByDemoGroupDefDtlID retrieves a row from 'x_showroom.x_demo_group_def_dtl_item' as a XDemoGroupDefDtlItem.
//
// Generated from index 'x_demo_group_def_dtl_item_demo_group_def_dtl_id_foreign'.
func XDemoGroupDefDtlItemsByDemoGroupDefDtlID(db XODB, demoGroupDefDtlID uint) ([]*XDemoGroupDefDtlItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type_cd, width, height, x_coordinate, y_coordinate, alpha, att_id, desc_text, desc_text_font_name, desc_text_font_size, desc_text_font_color, demo_group_def_id, demo_group_def_dtl_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo_group_def_dtl_item ` +
		`WHERE demo_group_def_dtl_id = ?`

	// run query
	XOLog(sqlstr, demoGroupDefDtlID)
	q, err := db.Query(sqlstr, demoGroupDefDtlID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroupDefDtlItem{}
	for q.Next() {
		xdgddi := XDemoGroupDefDtlItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdgddi.ID, &xdgddi.TypeCd, &xdgddi.Width, &xdgddi.Height, &xdgddi.XCoordinate, &xdgddi.YCoordinate, &xdgddi.Alpha, &xdgddi.AttID, &xdgddi.DescText, &xdgddi.DescTextFontName, &xdgddi.DescTextFontSize, &xdgddi.DescTextFontColor, &xdgddi.DemoGroupDefID, &xdgddi.DemoGroupDefDtlID, &xdgddi.CreatedBy, &xdgddi.UpdatedBy, &xdgddi.CreatedAt, &xdgddi.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdgddi)
	}

	return res, nil
}

// XDemoGroupDefDtlItemsByDemoGroupDefID retrieves a row from 'x_showroom.x_demo_group_def_dtl_item' as a XDemoGroupDefDtlItem.
//
// Generated from index 'x_demo_group_def_dtl_item_demo_group_def_id_foreign'.
func XDemoGroupDefDtlItemsByDemoGroupDefID(db XODB, demoGroupDefID uint) ([]*XDemoGroupDefDtlItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type_cd, width, height, x_coordinate, y_coordinate, alpha, att_id, desc_text, desc_text_font_name, desc_text_font_size, desc_text_font_color, demo_group_def_id, demo_group_def_dtl_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo_group_def_dtl_item ` +
		`WHERE demo_group_def_id = ?`

	// run query
	XOLog(sqlstr, demoGroupDefID)
	q, err := db.Query(sqlstr, demoGroupDefID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroupDefDtlItem{}
	for q.Next() {
		xdgddi := XDemoGroupDefDtlItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdgddi.ID, &xdgddi.TypeCd, &xdgddi.Width, &xdgddi.Height, &xdgddi.XCoordinate, &xdgddi.YCoordinate, &xdgddi.Alpha, &xdgddi.AttID, &xdgddi.DescText, &xdgddi.DescTextFontName, &xdgddi.DescTextFontSize, &xdgddi.DescTextFontColor, &xdgddi.DemoGroupDefID, &xdgddi.DemoGroupDefDtlID, &xdgddi.CreatedBy, &xdgddi.UpdatedBy, &xdgddi.CreatedAt, &xdgddi.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdgddi)
	}

	return res, nil
}

// XDemoGroupDefDtlItemByID retrieves a row from 'x_showroom.x_demo_group_def_dtl_item' as a XDemoGroupDefDtlItem.
//
// Generated from index 'x_demo_group_def_dtl_item_id_pkey'.
func XDemoGroupDefDtlItemByID(db XODB, id uint) (*XDemoGroupDefDtlItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type_cd, width, height, x_coordinate, y_coordinate, alpha, att_id, desc_text, desc_text_font_name, desc_text_font_size, desc_text_font_color, demo_group_def_id, demo_group_def_dtl_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo_group_def_dtl_item ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xdgddi := XDemoGroupDefDtlItem{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xdgddi.ID, &xdgddi.TypeCd, &xdgddi.Width, &xdgddi.Height, &xdgddi.XCoordinate, &xdgddi.YCoordinate, &xdgddi.Alpha, &xdgddi.AttID, &xdgddi.DescText, &xdgddi.DescTextFontName, &xdgddi.DescTextFontSize, &xdgddi.DescTextFontColor, &xdgddi.DemoGroupDefID, &xdgddi.DemoGroupDefDtlID, &xdgddi.CreatedBy, &xdgddi.UpdatedBy, &xdgddi.CreatedAt, &xdgddi.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xdgddi, nil
}

// XDemoGroupDefDtlItemsByUpdatedBy retrieves a row from 'x_showroom.x_demo_group_def_dtl_item' as a XDemoGroupDefDtlItem.
//
// Generated from index 'x_demo_group_def_dtl_item_updated_by_foreign'.
func XDemoGroupDefDtlItemsByUpdatedBy(db XODB, updatedBy uint) ([]*XDemoGroupDefDtlItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type_cd, width, height, x_coordinate, y_coordinate, alpha, att_id, desc_text, desc_text_font_name, desc_text_font_size, desc_text_font_color, demo_group_def_id, demo_group_def_dtl_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo_group_def_dtl_item ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroupDefDtlItem{}
	for q.Next() {
		xdgddi := XDemoGroupDefDtlItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdgddi.ID, &xdgddi.TypeCd, &xdgddi.Width, &xdgddi.Height, &xdgddi.XCoordinate, &xdgddi.YCoordinate, &xdgddi.Alpha, &xdgddi.AttID, &xdgddi.DescText, &xdgddi.DescTextFontName, &xdgddi.DescTextFontSize, &xdgddi.DescTextFontColor, &xdgddi.DemoGroupDefID, &xdgddi.DemoGroupDefDtlID, &xdgddi.CreatedBy, &xdgddi.UpdatedBy, &xdgddi.CreatedAt, &xdgddi.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdgddi)
	}

	return res, nil
}
