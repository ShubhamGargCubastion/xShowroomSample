// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XLeadProdAttr represents a row from 'x_showroom.x_lead_prod_attr'.
type XLeadProdAttr struct {
	ID               uint           `json:"id"`                  // id
	LeadProdID       uint           `json:"lead_prod_id"`        // lead_prod_id
	ProdOptionID     uint           `json:"prod_option_id"`      // prod_option_id
	ProdOptionAttrID uint           `json:"prod_option_attr_id"` // prod_option_attr_id
	CreatedBy        uint           `json:"created_by"`          // created_by
	UpdatedBy        uint           `json:"updated_by"`          // updated_by
	CreatedAt        mysql.NullTime `json:"created_at"`          // created_at
	UpdatedAt        mysql.NullTime `json:"updated_at"`          // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XLeadProdAttr exists in the database.
func (xlpa *XLeadProdAttr) Exists() bool {
	return xlpa._exists
}

// Deleted provides information if the XLeadProdAttr has been deleted from the database.
func (xlpa *XLeadProdAttr) Deleted() bool {
	return xlpa._deleted
}

// Insert inserts the XLeadProdAttr to the database.
func (xlpa *XLeadProdAttr) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xlpa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_lead_prod_attr (` +
		`lead_prod_id, prod_option_id, prod_option_attr_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xlpa.LeadProdID, xlpa.ProdOptionID, xlpa.ProdOptionAttrID, xlpa.CreatedBy, xlpa.UpdatedBy, xlpa.CreatedAt, xlpa.UpdatedAt)
	res, err := db.Exec(sqlstr, xlpa.LeadProdID, xlpa.ProdOptionID, xlpa.ProdOptionAttrID, xlpa.CreatedBy, xlpa.UpdatedBy, xlpa.CreatedAt, xlpa.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xlpa.ID = uint(id)
	xlpa._exists = true

	return nil
}

// Update updates the XLeadProdAttr in the database.
func (xlpa *XLeadProdAttr) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xlpa._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xlpa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_lead_prod_attr SET ` +
		`lead_prod_id = ?, prod_option_id = ?, prod_option_attr_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xlpa.LeadProdID, xlpa.ProdOptionID, xlpa.ProdOptionAttrID, xlpa.CreatedBy, xlpa.UpdatedBy, xlpa.CreatedAt, xlpa.UpdatedAt, xlpa.ID)
	_, err = db.Exec(sqlstr, xlpa.LeadProdID, xlpa.ProdOptionID, xlpa.ProdOptionAttrID, xlpa.CreatedBy, xlpa.UpdatedBy, xlpa.CreatedAt, xlpa.UpdatedAt, xlpa.ID)
	return err
}

// Save saves the XLeadProdAttr to the database.
func (xlpa *XLeadProdAttr) Save(db XODB) error {
	if xlpa.Exists() {
		return xlpa.Update(db)
	}

	return xlpa.Insert(db)
}

// Delete deletes the XLeadProdAttr from the database.
func (xlpa *XLeadProdAttr) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xlpa._exists {
		return nil
	}

	// if deleted, bail
	if xlpa._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_lead_prod_attr WHERE id = ?`

	// run query
	XOLog(sqlstr, xlpa.ID)
	_, err = db.Exec(sqlstr, xlpa.ID)
	if err != nil {
		return err
	}

	// set deleted
	xlpa._deleted = true

	return nil
}

// XLeadProdAttrsByCreatedBy retrieves a row from 'x_showroom.x_lead_prod_attr' as a XLeadProdAttr.
//
// Generated from index 'x_lead_prod_attr_created_by_foreign'.
func XLeadProdAttrsByCreatedBy(db XODB, createdBy uint) ([]*XLeadProdAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, lead_prod_id, prod_option_id, prod_option_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_prod_attr ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadProdAttr{}
	for q.Next() {
		xlpa := XLeadProdAttr{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlpa.ID, &xlpa.LeadProdID, &xlpa.ProdOptionID, &xlpa.ProdOptionAttrID, &xlpa.CreatedBy, &xlpa.UpdatedBy, &xlpa.CreatedAt, &xlpa.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlpa)
	}

	return res, nil
}

// XLeadProdAttrByID retrieves a row from 'x_showroom.x_lead_prod_attr' as a XLeadProdAttr.
//
// Generated from index 'x_lead_prod_attr_id_pkey'.
func XLeadProdAttrByID(db XODB, id uint) (*XLeadProdAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, lead_prod_id, prod_option_id, prod_option_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_prod_attr ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xlpa := XLeadProdAttr{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xlpa.ID, &xlpa.LeadProdID, &xlpa.ProdOptionID, &xlpa.ProdOptionAttrID, &xlpa.CreatedBy, &xlpa.UpdatedBy, &xlpa.CreatedAt, &xlpa.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xlpa, nil
}

// XLeadProdAttrByLeadProdIDProdOptionIDProdOptionAttrID retrieves a row from 'x_showroom.x_lead_prod_attr' as a XLeadProdAttr.
//
// Generated from index 'x_lead_prod_attr_lp_id_po_id_poa_id'.
func XLeadProdAttrByLeadProdIDProdOptionIDProdOptionAttrID(db XODB, leadProdID uint, prodOptionID uint, prodOptionAttrID uint) (*XLeadProdAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, lead_prod_id, prod_option_id, prod_option_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_prod_attr ` +
		`WHERE lead_prod_id = ? AND prod_option_id = ? AND prod_option_attr_id = ?`

	// run query
	XOLog(sqlstr, leadProdID, prodOptionID, prodOptionAttrID)
	xlpa := XLeadProdAttr{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, leadProdID, prodOptionID, prodOptionAttrID).Scan(&xlpa.ID, &xlpa.LeadProdID, &xlpa.ProdOptionID, &xlpa.ProdOptionAttrID, &xlpa.CreatedBy, &xlpa.UpdatedBy, &xlpa.CreatedAt, &xlpa.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xlpa, nil
}

// XLeadProdAttrsByProdOptionAttrID retrieves a row from 'x_showroom.x_lead_prod_attr' as a XLeadProdAttr.
//
// Generated from index 'x_lead_prod_attr_prod_option_attr_id_foreign'.
func XLeadProdAttrsByProdOptionAttrID(db XODB, prodOptionAttrID uint) ([]*XLeadProdAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, lead_prod_id, prod_option_id, prod_option_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_prod_attr ` +
		`WHERE prod_option_attr_id = ?`

	// run query
	XOLog(sqlstr, prodOptionAttrID)
	q, err := db.Query(sqlstr, prodOptionAttrID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadProdAttr{}
	for q.Next() {
		xlpa := XLeadProdAttr{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlpa.ID, &xlpa.LeadProdID, &xlpa.ProdOptionID, &xlpa.ProdOptionAttrID, &xlpa.CreatedBy, &xlpa.UpdatedBy, &xlpa.CreatedAt, &xlpa.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlpa)
	}

	return res, nil
}

// XLeadProdAttrsByProdOptionID retrieves a row from 'x_showroom.x_lead_prod_attr' as a XLeadProdAttr.
//
// Generated from index 'x_lead_prod_attr_prod_option_id_foreign'.
func XLeadProdAttrsByProdOptionID(db XODB, prodOptionID uint) ([]*XLeadProdAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, lead_prod_id, prod_option_id, prod_option_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_prod_attr ` +
		`WHERE prod_option_id = ?`

	// run query
	XOLog(sqlstr, prodOptionID)
	q, err := db.Query(sqlstr, prodOptionID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadProdAttr{}
	for q.Next() {
		xlpa := XLeadProdAttr{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlpa.ID, &xlpa.LeadProdID, &xlpa.ProdOptionID, &xlpa.ProdOptionAttrID, &xlpa.CreatedBy, &xlpa.UpdatedBy, &xlpa.CreatedAt, &xlpa.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlpa)
	}

	return res, nil
}

// XLeadProdAttrsByUpdatedBy retrieves a row from 'x_showroom.x_lead_prod_attr' as a XLeadProdAttr.
//
// Generated from index 'x_lead_prod_attr_updated_by_foreign'.
func XLeadProdAttrsByUpdatedBy(db XODB, updatedBy uint) ([]*XLeadProdAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, lead_prod_id, prod_option_id, prod_option_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_prod_attr ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadProdAttr{}
	for q.Next() {
		xlpa := XLeadProdAttr{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlpa.ID, &xlpa.LeadProdID, &xlpa.ProdOptionID, &xlpa.ProdOptionAttrID, &xlpa.CreatedBy, &xlpa.UpdatedBy, &xlpa.CreatedAt, &xlpa.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlpa)
	}

	return res, nil
}
