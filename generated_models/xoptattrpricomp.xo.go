// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XOptAttrPriComp represents a row from 'x_showroom.x_opt_attr_pri_comp'.
type XOptAttrPriComp struct {
	ID                    uint           `json:"id"`                      // id
	PricingComponentName  string         `json:"pricing_component_name"`  // pricing_component_name
	PrimaryFlag           string         `json:"primary_flag"`            // primary_flag
	PricingComponentType  string         `json:"pricing_component_type"`  // pricing_component_type
	PricingComponentValue float64        `json:"pricing_component_value"` // pricing_component_value
	OptAttrID             uint           `json:"opt_attr_id"`             // opt_attr_id
	OptAttrPriDimID       uint           `json:"opt_attr_pri_dim_id"`     // opt_attr_pri_dim_id
	CreatedBy             uint           `json:"created_by"`              // created_by
	UpdatedBy             uint           `json:"updated_by"`              // updated_by
	CreatedAt             mysql.NullTime `json:"created_at"`              // created_at
	UpdatedAt             mysql.NullTime `json:"updated_at"`              // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XOptAttrPriComp exists in the database.
func (xoapc *XOptAttrPriComp) Exists() bool {
	return xoapc._exists
}

// Deleted provides information if the XOptAttrPriComp has been deleted from the database.
func (xoapc *XOptAttrPriComp) Deleted() bool {
	return xoapc._deleted
}

// Insert inserts the XOptAttrPriComp to the database.
func (xoapc *XOptAttrPriComp) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xoapc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_opt_attr_pri_comp (` +
		`pricing_component_name, primary_flag, pricing_component_type, pricing_component_value, opt_attr_id, opt_attr_pri_dim_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xoapc.PricingComponentName, xoapc.PrimaryFlag, xoapc.PricingComponentType, xoapc.PricingComponentValue, xoapc.OptAttrID, xoapc.OptAttrPriDimID, xoapc.CreatedBy, xoapc.UpdatedBy, xoapc.CreatedAt, xoapc.UpdatedAt)
	res, err := db.Exec(sqlstr, xoapc.PricingComponentName, xoapc.PrimaryFlag, xoapc.PricingComponentType, xoapc.PricingComponentValue, xoapc.OptAttrID, xoapc.OptAttrPriDimID, xoapc.CreatedBy, xoapc.UpdatedBy, xoapc.CreatedAt, xoapc.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xoapc.ID = uint(id)
	xoapc._exists = true

	return nil
}

// Update updates the XOptAttrPriComp in the database.
func (xoapc *XOptAttrPriComp) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xoapc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xoapc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_opt_attr_pri_comp SET ` +
		`pricing_component_name = ?, primary_flag = ?, pricing_component_type = ?, pricing_component_value = ?, opt_attr_id = ?, opt_attr_pri_dim_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xoapc.PricingComponentName, xoapc.PrimaryFlag, xoapc.PricingComponentType, xoapc.PricingComponentValue, xoapc.OptAttrID, xoapc.OptAttrPriDimID, xoapc.CreatedBy, xoapc.UpdatedBy, xoapc.CreatedAt, xoapc.UpdatedAt, xoapc.ID)
	_, err = db.Exec(sqlstr, xoapc.PricingComponentName, xoapc.PrimaryFlag, xoapc.PricingComponentType, xoapc.PricingComponentValue, xoapc.OptAttrID, xoapc.OptAttrPriDimID, xoapc.CreatedBy, xoapc.UpdatedBy, xoapc.CreatedAt, xoapc.UpdatedAt, xoapc.ID)
	return err
}

// Save saves the XOptAttrPriComp to the database.
func (xoapc *XOptAttrPriComp) Save(db XODB) error {
	if xoapc.Exists() {
		return xoapc.Update(db)
	}

	return xoapc.Insert(db)
}

// Delete deletes the XOptAttrPriComp from the database.
func (xoapc *XOptAttrPriComp) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xoapc._exists {
		return nil
	}

	// if deleted, bail
	if xoapc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_opt_attr_pri_comp WHERE id = ?`

	// run query
	XOLog(sqlstr, xoapc.ID)
	_, err = db.Exec(sqlstr, xoapc.ID)
	if err != nil {
		return err
	}

	// set deleted
	xoapc._deleted = true

	return nil
}

// XOptAttrPriCompsByCreatedBy retrieves a row from 'x_showroom.x_opt_attr_pri_comp' as a XOptAttrPriComp.
//
// Generated from index 'x_opt_attr_pri_comp_created_by_foreign'.
func XOptAttrPriCompsByCreatedBy(db XODB, createdBy uint) ([]*XOptAttrPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_component_name, primary_flag, pricing_component_type, pricing_component_value, opt_attr_id, opt_attr_pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_opt_attr_pri_comp ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XOptAttrPriComp{}
	for q.Next() {
		xoapc := XOptAttrPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xoapc.ID, &xoapc.PricingComponentName, &xoapc.PrimaryFlag, &xoapc.PricingComponentType, &xoapc.PricingComponentValue, &xoapc.OptAttrID, &xoapc.OptAttrPriDimID, &xoapc.CreatedBy, &xoapc.UpdatedBy, &xoapc.CreatedAt, &xoapc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xoapc)
	}

	return res, nil
}

// XOptAttrPriCompByID retrieves a row from 'x_showroom.x_opt_attr_pri_comp' as a XOptAttrPriComp.
//
// Generated from index 'x_opt_attr_pri_comp_id_pkey'.
func XOptAttrPriCompByID(db XODB, id uint) (*XOptAttrPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_component_name, primary_flag, pricing_component_type, pricing_component_value, opt_attr_id, opt_attr_pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_opt_attr_pri_comp ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xoapc := XOptAttrPriComp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xoapc.ID, &xoapc.PricingComponentName, &xoapc.PrimaryFlag, &xoapc.PricingComponentType, &xoapc.PricingComponentValue, &xoapc.OptAttrID, &xoapc.OptAttrPriDimID, &xoapc.CreatedBy, &xoapc.UpdatedBy, &xoapc.CreatedAt, &xoapc.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xoapc, nil
}

// XOptAttrPriCompsByOptAttrID retrieves a row from 'x_showroom.x_opt_attr_pri_comp' as a XOptAttrPriComp.
//
// Generated from index 'x_opt_attr_pri_comp_opt_attr_id_foreign'.
func XOptAttrPriCompsByOptAttrID(db XODB, optAttrID uint) ([]*XOptAttrPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_component_name, primary_flag, pricing_component_type, pricing_component_value, opt_attr_id, opt_attr_pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_opt_attr_pri_comp ` +
		`WHERE opt_attr_id = ?`

	// run query
	XOLog(sqlstr, optAttrID)
	q, err := db.Query(sqlstr, optAttrID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XOptAttrPriComp{}
	for q.Next() {
		xoapc := XOptAttrPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xoapc.ID, &xoapc.PricingComponentName, &xoapc.PrimaryFlag, &xoapc.PricingComponentType, &xoapc.PricingComponentValue, &xoapc.OptAttrID, &xoapc.OptAttrPriDimID, &xoapc.CreatedBy, &xoapc.UpdatedBy, &xoapc.CreatedAt, &xoapc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xoapc)
	}

	return res, nil
}

// XOptAttrPriCompsByOptAttrPriDimID retrieves a row from 'x_showroom.x_opt_attr_pri_comp' as a XOptAttrPriComp.
//
// Generated from index 'x_opt_attr_pri_comp_opt_attr_pri_dim_id_foreign'.
func XOptAttrPriCompsByOptAttrPriDimID(db XODB, optAttrPriDimID uint) ([]*XOptAttrPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_component_name, primary_flag, pricing_component_type, pricing_component_value, opt_attr_id, opt_attr_pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_opt_attr_pri_comp ` +
		`WHERE opt_attr_pri_dim_id = ?`

	// run query
	XOLog(sqlstr, optAttrPriDimID)
	q, err := db.Query(sqlstr, optAttrPriDimID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XOptAttrPriComp{}
	for q.Next() {
		xoapc := XOptAttrPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xoapc.ID, &xoapc.PricingComponentName, &xoapc.PrimaryFlag, &xoapc.PricingComponentType, &xoapc.PricingComponentValue, &xoapc.OptAttrID, &xoapc.OptAttrPriDimID, &xoapc.CreatedBy, &xoapc.UpdatedBy, &xoapc.CreatedAt, &xoapc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xoapc)
	}

	return res, nil
}

// XOptAttrPriCompsByUpdatedBy retrieves a row from 'x_showroom.x_opt_attr_pri_comp' as a XOptAttrPriComp.
//
// Generated from index 'x_opt_attr_pri_comp_updated_by_foreign'.
func XOptAttrPriCompsByUpdatedBy(db XODB, updatedBy uint) ([]*XOptAttrPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_component_name, primary_flag, pricing_component_type, pricing_component_value, opt_attr_id, opt_attr_pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_opt_attr_pri_comp ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XOptAttrPriComp{}
	for q.Next() {
		xoapc := XOptAttrPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xoapc.ID, &xoapc.PricingComponentName, &xoapc.PrimaryFlag, &xoapc.PricingComponentType, &xoapc.PricingComponentValue, &xoapc.OptAttrID, &xoapc.OptAttrPriDimID, &xoapc.CreatedBy, &xoapc.UpdatedBy, &xoapc.CreatedAt, &xoapc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xoapc)
	}

	return res, nil
}
