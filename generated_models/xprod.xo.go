// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// XProd represents a row from 'x_showroom.x_prod'.
type XProd struct {
	ID                 uint           `json:"id"`                    // id
	Name               string         `json:"name"`                  // name
	DisplayName        string         `json:"display_name"`          // display_name
	StartDt            time.Time      `json:"start_dt"`              // start_dt
	EndDt              mysql.NullTime `json:"end_dt"`                // end_dt
	DescText           sql.NullString `json:"desc_text"`             // desc_text
	PricingCompGroup   sql.NullString `json:"pricing_comp_group"`    // pricing_comp_group
	AttID              sql.NullInt64  `json:"att_id"`                // att_id
	OrgID              uint           `json:"org_id"`                // org_id
	CreatedBy          uint           `json:"created_by"`            // created_by
	UpdatedBy          uint           `json:"updated_by"`            // updated_by
	CreatedAt          mysql.NullTime `json:"created_at"`            // created_at
	UpdatedAt          mysql.NullTime `json:"updated_at"`            // updated_at
	TaxSlab            sql.NullString `json:"tax_slab"`              // tax_slab
	ProdRptGroupID     sql.NullInt64  `json:"prod_rpt_group_id"`     // prod_rpt_group_id
	TaxSlabID          sql.NullInt64  `json:"tax_slab_id"`           // tax_slab_id
	PricingCompGroupID sql.NullInt64  `json:"pricing_comp_group_id"` // pricing_comp_group_id
	TypeCd             sql.NullString `json:"type_cd"`               // type_cd
	PricingTypeCd      sql.NullString `json:"pricing_type_cd"`       // pricing_type_cd
	PriDemoID          sql.NullInt64  `json:"pri_demo_id"`           // pri_demo_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XProd exists in the database.
func (xp *XProd) Exists() bool {
	return xp._exists
}

// Deleted provides information if the XProd has been deleted from the database.
func (xp *XProd) Deleted() bool {
	return xp._deleted
}

// Insert inserts the XProd to the database.
func (xp *XProd) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_prod (` +
		`name, display_name, start_dt, end_dt, desc_text, pricing_comp_group, att_id, org_id, created_by, updated_by, created_at, updated_at, tax_slab, prod_rpt_group_id, tax_slab_id, pricing_comp_group_id, type_cd, pricing_type_cd, pri_demo_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xp.Name, xp.DisplayName, xp.StartDt, xp.EndDt, xp.DescText, xp.PricingCompGroup, xp.AttID, xp.OrgID, xp.CreatedBy, xp.UpdatedBy, xp.CreatedAt, xp.UpdatedAt, xp.TaxSlab, xp.ProdRptGroupID, xp.TaxSlabID, xp.PricingCompGroupID, xp.TypeCd, xp.PricingTypeCd, xp.PriDemoID)
	res, err := db.Exec(sqlstr, xp.Name, xp.DisplayName, xp.StartDt, xp.EndDt, xp.DescText, xp.PricingCompGroup, xp.AttID, xp.OrgID, xp.CreatedBy, xp.UpdatedBy, xp.CreatedAt, xp.UpdatedAt, xp.TaxSlab, xp.ProdRptGroupID, xp.TaxSlabID, xp.PricingCompGroupID, xp.TypeCd, xp.PricingTypeCd, xp.PriDemoID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xp.ID = uint(id)
	xp._exists = true

	return nil
}

// Update updates the XProd in the database.
func (xp *XProd) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_prod SET ` +
		`name = ?, display_name = ?, start_dt = ?, end_dt = ?, desc_text = ?, pricing_comp_group = ?, att_id = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?, tax_slab = ?, prod_rpt_group_id = ?, tax_slab_id = ?, pricing_comp_group_id = ?, type_cd = ?, pricing_type_cd = ?, pri_demo_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xp.Name, xp.DisplayName, xp.StartDt, xp.EndDt, xp.DescText, xp.PricingCompGroup, xp.AttID, xp.OrgID, xp.CreatedBy, xp.UpdatedBy, xp.CreatedAt, xp.UpdatedAt, xp.TaxSlab, xp.ProdRptGroupID, xp.TaxSlabID, xp.PricingCompGroupID, xp.TypeCd, xp.PricingTypeCd, xp.PriDemoID, xp.ID)
	_, err = db.Exec(sqlstr, xp.Name, xp.DisplayName, xp.StartDt, xp.EndDt, xp.DescText, xp.PricingCompGroup, xp.AttID, xp.OrgID, xp.CreatedBy, xp.UpdatedBy, xp.CreatedAt, xp.UpdatedAt, xp.TaxSlab, xp.ProdRptGroupID, xp.TaxSlabID, xp.PricingCompGroupID, xp.TypeCd, xp.PricingTypeCd, xp.PriDemoID, xp.ID)
	return err
}

// Save saves the XProd to the database.
func (xp *XProd) Save(db XODB) error {
	if xp.Exists() {
		return xp.Update(db)
	}

	return xp.Insert(db)
}

// Delete deletes the XProd from the database.
func (xp *XProd) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xp._exists {
		return nil
	}

	// if deleted, bail
	if xp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_prod WHERE id = ?`

	// run query
	XOLog(sqlstr, xp.ID)
	_, err = db.Exec(sqlstr, xp.ID)
	if err != nil {
		return err
	}

	// set deleted
	xp._deleted = true

	return nil
}

// XProdsByAttID retrieves a row from 'x_showroom.x_prod' as a XProd.
//
// Generated from index 'x_prod_att_id_foreign'.
func XProdsByAttID(db XODB, attID sql.NullInt64) ([]*XProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, start_dt, end_dt, desc_text, pricing_comp_group, att_id, org_id, created_by, updated_by, created_at, updated_at, tax_slab, prod_rpt_group_id, tax_slab_id, pricing_comp_group_id, type_cd, pricing_type_cd, pri_demo_id ` +
		`FROM x_showroom.x_prod ` +
		`WHERE att_id = ?`

	// run query
	XOLog(sqlstr, attID)
	q, err := db.Query(sqlstr, attID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProd{}
	for q.Next() {
		xp := XProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.StartDt, &xp.EndDt, &xp.DescText, &xp.PricingCompGroup, &xp.AttID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt, &xp.TaxSlab, &xp.ProdRptGroupID, &xp.TaxSlabID, &xp.PricingCompGroupID, &xp.TypeCd, &xp.PricingTypeCd, &xp.PriDemoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xp)
	}

	return res, nil
}

// XProdsByCreatedBy retrieves a row from 'x_showroom.x_prod' as a XProd.
//
// Generated from index 'x_prod_created_by_foreign'.
func XProdsByCreatedBy(db XODB, createdBy uint) ([]*XProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, start_dt, end_dt, desc_text, pricing_comp_group, att_id, org_id, created_by, updated_by, created_at, updated_at, tax_slab, prod_rpt_group_id, tax_slab_id, pricing_comp_group_id, type_cd, pricing_type_cd, pri_demo_id ` +
		`FROM x_showroom.x_prod ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProd{}
	for q.Next() {
		xp := XProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.StartDt, &xp.EndDt, &xp.DescText, &xp.PricingCompGroup, &xp.AttID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt, &xp.TaxSlab, &xp.ProdRptGroupID, &xp.TaxSlabID, &xp.PricingCompGroupID, &xp.TypeCd, &xp.PricingTypeCd, &xp.PriDemoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xp)
	}

	return res, nil
}

// XProdByID retrieves a row from 'x_showroom.x_prod' as a XProd.
//
// Generated from index 'x_prod_id_pkey'.
func XProdByID(db XODB, id uint) (*XProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, start_dt, end_dt, desc_text, pricing_comp_group, att_id, org_id, created_by, updated_by, created_at, updated_at, tax_slab, prod_rpt_group_id, tax_slab_id, pricing_comp_group_id, type_cd, pricing_type_cd, pri_demo_id ` +
		`FROM x_showroom.x_prod ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xp := XProd{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.StartDt, &xp.EndDt, &xp.DescText, &xp.PricingCompGroup, &xp.AttID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt, &xp.TaxSlab, &xp.ProdRptGroupID, &xp.TaxSlabID, &xp.PricingCompGroupID, &xp.TypeCd, &xp.PricingTypeCd, &xp.PriDemoID)
	if err != nil {
		return nil, err
	}

	return &xp, nil
}

// XProdByNameOrgID retrieves a row from 'x_showroom.x_prod' as a XProd.
//
// Generated from index 'x_prod_name_org_id_unique'.
func XProdByNameOrgID(db XODB, name string, orgID uint) (*XProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, start_dt, end_dt, desc_text, pricing_comp_group, att_id, org_id, created_by, updated_by, created_at, updated_at, tax_slab, prod_rpt_group_id, tax_slab_id, pricing_comp_group_id, type_cd, pricing_type_cd, pri_demo_id ` +
		`FROM x_showroom.x_prod ` +
		`WHERE name = ? AND org_id = ?`

	// run query
	XOLog(sqlstr, name, orgID)
	xp := XProd{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, orgID).Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.StartDt, &xp.EndDt, &xp.DescText, &xp.PricingCompGroup, &xp.AttID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt, &xp.TaxSlab, &xp.ProdRptGroupID, &xp.TaxSlabID, &xp.PricingCompGroupID, &xp.TypeCd, &xp.PricingTypeCd, &xp.PriDemoID)
	if err != nil {
		return nil, err
	}

	return &xp, nil
}

// XProdsByOrgID retrieves a row from 'x_showroom.x_prod' as a XProd.
//
// Generated from index 'x_prod_org_id_foreign'.
func XProdsByOrgID(db XODB, orgID uint) ([]*XProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, start_dt, end_dt, desc_text, pricing_comp_group, att_id, org_id, created_by, updated_by, created_at, updated_at, tax_slab, prod_rpt_group_id, tax_slab_id, pricing_comp_group_id, type_cd, pricing_type_cd, pri_demo_id ` +
		`FROM x_showroom.x_prod ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProd{}
	for q.Next() {
		xp := XProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.StartDt, &xp.EndDt, &xp.DescText, &xp.PricingCompGroup, &xp.AttID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt, &xp.TaxSlab, &xp.ProdRptGroupID, &xp.TaxSlabID, &xp.PricingCompGroupID, &xp.TypeCd, &xp.PricingTypeCd, &xp.PriDemoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xp)
	}

	return res, nil
}

// XProdsByPriDemoID retrieves a row from 'x_showroom.x_prod' as a XProd.
//
// Generated from index 'x_prod_pri_demo_id_foreign'.
func XProdsByPriDemoID(db XODB, priDemoID sql.NullInt64) ([]*XProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, start_dt, end_dt, desc_text, pricing_comp_group, att_id, org_id, created_by, updated_by, created_at, updated_at, tax_slab, prod_rpt_group_id, tax_slab_id, pricing_comp_group_id, type_cd, pricing_type_cd, pri_demo_id ` +
		`FROM x_showroom.x_prod ` +
		`WHERE pri_demo_id = ?`

	// run query
	XOLog(sqlstr, priDemoID)
	q, err := db.Query(sqlstr, priDemoID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProd{}
	for q.Next() {
		xp := XProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.StartDt, &xp.EndDt, &xp.DescText, &xp.PricingCompGroup, &xp.AttID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt, &xp.TaxSlab, &xp.ProdRptGroupID, &xp.TaxSlabID, &xp.PricingCompGroupID, &xp.TypeCd, &xp.PricingTypeCd, &xp.PriDemoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xp)
	}

	return res, nil
}

// XProdsByProdRptGroupID retrieves a row from 'x_showroom.x_prod' as a XProd.
//
// Generated from index 'x_prod_prod_rpt_group_id_foreign'.
func XProdsByProdRptGroupID(db XODB, prodRptGroupID sql.NullInt64) ([]*XProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, start_dt, end_dt, desc_text, pricing_comp_group, att_id, org_id, created_by, updated_by, created_at, updated_at, tax_slab, prod_rpt_group_id, tax_slab_id, pricing_comp_group_id, type_cd, pricing_type_cd, pri_demo_id ` +
		`FROM x_showroom.x_prod ` +
		`WHERE prod_rpt_group_id = ?`

	// run query
	XOLog(sqlstr, prodRptGroupID)
	q, err := db.Query(sqlstr, prodRptGroupID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProd{}
	for q.Next() {
		xp := XProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.StartDt, &xp.EndDt, &xp.DescText, &xp.PricingCompGroup, &xp.AttID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt, &xp.TaxSlab, &xp.ProdRptGroupID, &xp.TaxSlabID, &xp.PricingCompGroupID, &xp.TypeCd, &xp.PricingTypeCd, &xp.PriDemoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xp)
	}

	return res, nil
}

// XProdsByUpdatedBy retrieves a row from 'x_showroom.x_prod' as a XProd.
//
// Generated from index 'x_prod_updated_by_foreign'.
func XProdsByUpdatedBy(db XODB, updatedBy uint) ([]*XProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, start_dt, end_dt, desc_text, pricing_comp_group, att_id, org_id, created_by, updated_by, created_at, updated_at, tax_slab, prod_rpt_group_id, tax_slab_id, pricing_comp_group_id, type_cd, pricing_type_cd, pri_demo_id ` +
		`FROM x_showroom.x_prod ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProd{}
	for q.Next() {
		xp := XProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xp.ID, &xp.Name, &xp.DisplayName, &xp.StartDt, &xp.EndDt, &xp.DescText, &xp.PricingCompGroup, &xp.AttID, &xp.OrgID, &xp.CreatedBy, &xp.UpdatedBy, &xp.CreatedAt, &xp.UpdatedAt, &xp.TaxSlab, &xp.ProdRptGroupID, &xp.TaxSlabID, &xp.PricingCompGroupID, &xp.TypeCd, &xp.PricingTypeCd, &xp.PriDemoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xp)
	}

	return res, nil
}
