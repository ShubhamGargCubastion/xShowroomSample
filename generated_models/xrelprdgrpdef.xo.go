// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XRelPrdGrpDef represents a row from 'x_showroom.x_rel_prd_grp_def'.
type XRelPrdGrpDef struct {
	ID          uint           `json:"id"`           // id
	Name        string         `json:"name"`         // name
	DisplayName string         `json:"display_name"` // display_name
	SeqNum      uint           `json:"seq_num"`      // seq_num
	AttID       sql.NullInt64  `json:"att_id"`       // att_id
	OrgID       uint           `json:"org_id"`       // org_id
	CreatedBy   uint           `json:"created_by"`   // created_by
	UpdatedBy   uint           `json:"updated_by"`   // updated_by
	CreatedAt   mysql.NullTime `json:"created_at"`   // created_at
	UpdatedAt   mysql.NullTime `json:"updated_at"`   // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XRelPrdGrpDef exists in the database.
func (xrpgd *XRelPrdGrpDef) Exists() bool {
	return xrpgd._exists
}

// Deleted provides information if the XRelPrdGrpDef has been deleted from the database.
func (xrpgd *XRelPrdGrpDef) Deleted() bool {
	return xrpgd._deleted
}

// Insert inserts the XRelPrdGrpDef to the database.
func (xrpgd *XRelPrdGrpDef) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xrpgd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_rel_prd_grp_def (` +
		`name, display_name, seq_num, att_id, org_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xrpgd.Name, xrpgd.DisplayName, xrpgd.SeqNum, xrpgd.AttID, xrpgd.OrgID, xrpgd.CreatedBy, xrpgd.UpdatedBy, xrpgd.CreatedAt, xrpgd.UpdatedAt)
	res, err := db.Exec(sqlstr, xrpgd.Name, xrpgd.DisplayName, xrpgd.SeqNum, xrpgd.AttID, xrpgd.OrgID, xrpgd.CreatedBy, xrpgd.UpdatedBy, xrpgd.CreatedAt, xrpgd.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xrpgd.ID = uint(id)
	xrpgd._exists = true

	return nil
}

// Update updates the XRelPrdGrpDef in the database.
func (xrpgd *XRelPrdGrpDef) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xrpgd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xrpgd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_rel_prd_grp_def SET ` +
		`name = ?, display_name = ?, seq_num = ?, att_id = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xrpgd.Name, xrpgd.DisplayName, xrpgd.SeqNum, xrpgd.AttID, xrpgd.OrgID, xrpgd.CreatedBy, xrpgd.UpdatedBy, xrpgd.CreatedAt, xrpgd.UpdatedAt, xrpgd.ID)
	_, err = db.Exec(sqlstr, xrpgd.Name, xrpgd.DisplayName, xrpgd.SeqNum, xrpgd.AttID, xrpgd.OrgID, xrpgd.CreatedBy, xrpgd.UpdatedBy, xrpgd.CreatedAt, xrpgd.UpdatedAt, xrpgd.ID)
	return err
}

// Save saves the XRelPrdGrpDef to the database.
func (xrpgd *XRelPrdGrpDef) Save(db XODB) error {
	if xrpgd.Exists() {
		return xrpgd.Update(db)
	}

	return xrpgd.Insert(db)
}

// Delete deletes the XRelPrdGrpDef from the database.
func (xrpgd *XRelPrdGrpDef) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xrpgd._exists {
		return nil
	}

	// if deleted, bail
	if xrpgd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_rel_prd_grp_def WHERE id = ?`

	// run query
	XOLog(sqlstr, xrpgd.ID)
	_, err = db.Exec(sqlstr, xrpgd.ID)
	if err != nil {
		return err
	}

	// set deleted
	xrpgd._deleted = true

	return nil
}

// XRelPrdGrpDevesByAttID retrieves a row from 'x_showroom.x_rel_prd_grp_def' as a XRelPrdGrpDef.
//
// Generated from index 'x_rel_prd_grp_def_att_id_foreign'.
func XRelPrdGrpDevesByAttID(db XODB, attID sql.NullInt64) ([]*XRelPrdGrpDef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_rel_prd_grp_def ` +
		`WHERE att_id = ?`

	// run query
	XOLog(sqlstr, attID)
	q, err := db.Query(sqlstr, attID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XRelPrdGrpDef{}
	for q.Next() {
		xrpgd := XRelPrdGrpDef{
			_exists: true,
		}

		// scan
		err = q.Scan(&xrpgd.ID, &xrpgd.Name, &xrpgd.DisplayName, &xrpgd.SeqNum, &xrpgd.AttID, &xrpgd.OrgID, &xrpgd.CreatedBy, &xrpgd.UpdatedBy, &xrpgd.CreatedAt, &xrpgd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xrpgd)
	}

	return res, nil
}

// XRelPrdGrpDevesByCreatedBy retrieves a row from 'x_showroom.x_rel_prd_grp_def' as a XRelPrdGrpDef.
//
// Generated from index 'x_rel_prd_grp_def_created_by_foreign'.
func XRelPrdGrpDevesByCreatedBy(db XODB, createdBy uint) ([]*XRelPrdGrpDef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_rel_prd_grp_def ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XRelPrdGrpDef{}
	for q.Next() {
		xrpgd := XRelPrdGrpDef{
			_exists: true,
		}

		// scan
		err = q.Scan(&xrpgd.ID, &xrpgd.Name, &xrpgd.DisplayName, &xrpgd.SeqNum, &xrpgd.AttID, &xrpgd.OrgID, &xrpgd.CreatedBy, &xrpgd.UpdatedBy, &xrpgd.CreatedAt, &xrpgd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xrpgd)
	}

	return res, nil
}

// XRelPrdGrpDefByID retrieves a row from 'x_showroom.x_rel_prd_grp_def' as a XRelPrdGrpDef.
//
// Generated from index 'x_rel_prd_grp_def_id_pkey'.
func XRelPrdGrpDefByID(db XODB, id uint) (*XRelPrdGrpDef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_rel_prd_grp_def ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xrpgd := XRelPrdGrpDef{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xrpgd.ID, &xrpgd.Name, &xrpgd.DisplayName, &xrpgd.SeqNum, &xrpgd.AttID, &xrpgd.OrgID, &xrpgd.CreatedBy, &xrpgd.UpdatedBy, &xrpgd.CreatedAt, &xrpgd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xrpgd, nil
}

// XRelPrdGrpDefByNameOrgID retrieves a row from 'x_showroom.x_rel_prd_grp_def' as a XRelPrdGrpDef.
//
// Generated from index 'x_rel_prd_grp_def_name_org_id_unique'.
func XRelPrdGrpDefByNameOrgID(db XODB, name string, orgID uint) (*XRelPrdGrpDef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_rel_prd_grp_def ` +
		`WHERE name = ? AND org_id = ?`

	// run query
	XOLog(sqlstr, name, orgID)
	xrpgd := XRelPrdGrpDef{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, orgID).Scan(&xrpgd.ID, &xrpgd.Name, &xrpgd.DisplayName, &xrpgd.SeqNum, &xrpgd.AttID, &xrpgd.OrgID, &xrpgd.CreatedBy, &xrpgd.UpdatedBy, &xrpgd.CreatedAt, &xrpgd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xrpgd, nil
}

// XRelPrdGrpDevesByOrgID retrieves a row from 'x_showroom.x_rel_prd_grp_def' as a XRelPrdGrpDef.
//
// Generated from index 'x_rel_prd_grp_def_org_id_foreign'.
func XRelPrdGrpDevesByOrgID(db XODB, orgID uint) ([]*XRelPrdGrpDef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_rel_prd_grp_def ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XRelPrdGrpDef{}
	for q.Next() {
		xrpgd := XRelPrdGrpDef{
			_exists: true,
		}

		// scan
		err = q.Scan(&xrpgd.ID, &xrpgd.Name, &xrpgd.DisplayName, &xrpgd.SeqNum, &xrpgd.AttID, &xrpgd.OrgID, &xrpgd.CreatedBy, &xrpgd.UpdatedBy, &xrpgd.CreatedAt, &xrpgd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xrpgd)
	}

	return res, nil
}

// XRelPrdGrpDevesByUpdatedBy retrieves a row from 'x_showroom.x_rel_prd_grp_def' as a XRelPrdGrpDef.
//
// Generated from index 'x_rel_prd_grp_def_updated_by_foreign'.
func XRelPrdGrpDevesByUpdatedBy(db XODB, updatedBy uint) ([]*XRelPrdGrpDef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_rel_prd_grp_def ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XRelPrdGrpDef{}
	for q.Next() {
		xrpgd := XRelPrdGrpDef{
			_exists: true,
		}

		// scan
		err = q.Scan(&xrpgd.ID, &xrpgd.Name, &xrpgd.DisplayName, &xrpgd.SeqNum, &xrpgd.AttID, &xrpgd.OrgID, &xrpgd.CreatedBy, &xrpgd.UpdatedBy, &xrpgd.CreatedAt, &xrpgd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xrpgd)
	}

	return res, nil
}
