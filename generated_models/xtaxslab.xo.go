// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XTaxSlab represents a row from 'x_showroom.x_tax_slab'.
type XTaxSlab struct {
	ID         uint            `json:"id"`          // id
	Name       string          `json:"name"`        // name
	TaxCode    sql.NullString  `json:"tax_code"`    // tax_code
	ActiveFlag string          `json:"active_flag"` // active_flag
	GstRate    float64         `json:"gst_rate"`    // gst_rate
	CessRate   sql.NullFloat64 `json:"cess_rate"`   // cess_rate
	DescText   sql.NullString  `json:"desc_text"`   // desc_text
	OrgID      uint            `json:"org_id"`      // org_id
	CreatedBy  uint            `json:"created_by"`  // created_by
	UpdatedBy  uint            `json:"updated_by"`  // updated_by
	CreatedAt  mysql.NullTime  `json:"created_at"`  // created_at
	UpdatedAt  mysql.NullTime  `json:"updated_at"`  // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XTaxSlab exists in the database.
func (xts *XTaxSlab) Exists() bool {
	return xts._exists
}

// Deleted provides information if the XTaxSlab has been deleted from the database.
func (xts *XTaxSlab) Deleted() bool {
	return xts._deleted
}

// Insert inserts the XTaxSlab to the database.
func (xts *XTaxSlab) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xts._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_tax_slab (` +
		`name, tax_code, active_flag, gst_rate, cess_rate, desc_text, org_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xts.Name, xts.TaxCode, xts.ActiveFlag, xts.GstRate, xts.CessRate, xts.DescText, xts.OrgID, xts.CreatedBy, xts.UpdatedBy, xts.CreatedAt, xts.UpdatedAt)
	res, err := db.Exec(sqlstr, xts.Name, xts.TaxCode, xts.ActiveFlag, xts.GstRate, xts.CessRate, xts.DescText, xts.OrgID, xts.CreatedBy, xts.UpdatedBy, xts.CreatedAt, xts.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xts.ID = uint(id)
	xts._exists = true

	return nil
}

// Update updates the XTaxSlab in the database.
func (xts *XTaxSlab) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xts._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xts._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_tax_slab SET ` +
		`name = ?, tax_code = ?, active_flag = ?, gst_rate = ?, cess_rate = ?, desc_text = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xts.Name, xts.TaxCode, xts.ActiveFlag, xts.GstRate, xts.CessRate, xts.DescText, xts.OrgID, xts.CreatedBy, xts.UpdatedBy, xts.CreatedAt, xts.UpdatedAt, xts.ID)
	_, err = db.Exec(sqlstr, xts.Name, xts.TaxCode, xts.ActiveFlag, xts.GstRate, xts.CessRate, xts.DescText, xts.OrgID, xts.CreatedBy, xts.UpdatedBy, xts.CreatedAt, xts.UpdatedAt, xts.ID)
	return err
}

// Save saves the XTaxSlab to the database.
func (xts *XTaxSlab) Save(db XODB) error {
	if xts.Exists() {
		return xts.Update(db)
	}

	return xts.Insert(db)
}

// Delete deletes the XTaxSlab from the database.
func (xts *XTaxSlab) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xts._exists {
		return nil
	}

	// if deleted, bail
	if xts._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_tax_slab WHERE id = ?`

	// run query
	XOLog(sqlstr, xts.ID)
	_, err = db.Exec(sqlstr, xts.ID)
	if err != nil {
		return err
	}

	// set deleted
	xts._deleted = true

	return nil
}

// XTaxSlabsByCreatedBy retrieves a row from 'x_showroom.x_tax_slab' as a XTaxSlab.
//
// Generated from index 'x_tax_slab_created_by_foreign'.
func XTaxSlabsByCreatedBy(db XODB, createdBy uint) ([]*XTaxSlab, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, tax_code, active_flag, gst_rate, cess_rate, desc_text, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_tax_slab ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XTaxSlab{}
	for q.Next() {
		xts := XTaxSlab{
			_exists: true,
		}

		// scan
		err = q.Scan(&xts.ID, &xts.Name, &xts.TaxCode, &xts.ActiveFlag, &xts.GstRate, &xts.CessRate, &xts.DescText, &xts.OrgID, &xts.CreatedBy, &xts.UpdatedBy, &xts.CreatedAt, &xts.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xts)
	}

	return res, nil
}

// XTaxSlabByID retrieves a row from 'x_showroom.x_tax_slab' as a XTaxSlab.
//
// Generated from index 'x_tax_slab_id_pkey'.
func XTaxSlabByID(db XODB, id uint) (*XTaxSlab, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, tax_code, active_flag, gst_rate, cess_rate, desc_text, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_tax_slab ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xts := XTaxSlab{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xts.ID, &xts.Name, &xts.TaxCode, &xts.ActiveFlag, &xts.GstRate, &xts.CessRate, &xts.DescText, &xts.OrgID, &xts.CreatedBy, &xts.UpdatedBy, &xts.CreatedAt, &xts.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xts, nil
}

// XTaxSlabByNameOrgID retrieves a row from 'x_showroom.x_tax_slab' as a XTaxSlab.
//
// Generated from index 'x_tax_slab_name_org_id_unique'.
func XTaxSlabByNameOrgID(db XODB, name string, orgID uint) (*XTaxSlab, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, tax_code, active_flag, gst_rate, cess_rate, desc_text, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_tax_slab ` +
		`WHERE name = ? AND org_id = ?`

	// run query
	XOLog(sqlstr, name, orgID)
	xts := XTaxSlab{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, orgID).Scan(&xts.ID, &xts.Name, &xts.TaxCode, &xts.ActiveFlag, &xts.GstRate, &xts.CessRate, &xts.DescText, &xts.OrgID, &xts.CreatedBy, &xts.UpdatedBy, &xts.CreatedAt, &xts.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xts, nil
}

// XTaxSlabsByOrgID retrieves a row from 'x_showroom.x_tax_slab' as a XTaxSlab.
//
// Generated from index 'x_tax_slab_org_id_foreign'.
func XTaxSlabsByOrgID(db XODB, orgID uint) ([]*XTaxSlab, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, tax_code, active_flag, gst_rate, cess_rate, desc_text, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_tax_slab ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XTaxSlab{}
	for q.Next() {
		xts := XTaxSlab{
			_exists: true,
		}

		// scan
		err = q.Scan(&xts.ID, &xts.Name, &xts.TaxCode, &xts.ActiveFlag, &xts.GstRate, &xts.CessRate, &xts.DescText, &xts.OrgID, &xts.CreatedBy, &xts.UpdatedBy, &xts.CreatedAt, &xts.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xts)
	}

	return res, nil
}

// XTaxSlabsByUpdatedBy retrieves a row from 'x_showroom.x_tax_slab' as a XTaxSlab.
//
// Generated from index 'x_tax_slab_updated_by_foreign'.
func XTaxSlabsByUpdatedBy(db XODB, updatedBy uint) ([]*XTaxSlab, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, tax_code, active_flag, gst_rate, cess_rate, desc_text, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_tax_slab ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XTaxSlab{}
	for q.Next() {
		xts := XTaxSlab{
			_exists: true,
		}

		// scan
		err = q.Scan(&xts.ID, &xts.Name, &xts.TaxCode, &xts.ActiveFlag, &xts.GstRate, &xts.CessRate, &xts.DescText, &xts.OrgID, &xts.CreatedBy, &xts.UpdatedBy, &xts.CreatedAt, &xts.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xts)
	}

	return res, nil
}
