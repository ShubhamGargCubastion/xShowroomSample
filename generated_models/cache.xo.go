// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Cache represents a row from 'x_showroom.cache'.
type Cache struct {
	Key        string `json:"key"`        // key
	Value      string `json:"value"`      // value
	Expiration int    `json:"expiration"` // expiration

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Cache exists in the database.
func (c *Cache) Exists() bool {
	return c._exists
}

// Deleted provides information if the Cache has been deleted from the database.
func (c *Cache) Deleted() bool {
	return c._deleted
}

// Insert inserts the Cache to the database.
func (c *Cache) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO x_showroom.cache (` +
		`key, value, expiration` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.Key, c.Value, c.Expiration)
	_, err = db.Exec(sqlstr, c.Key, c.Value, c.Expiration)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Cache in the database.
func (c *Cache) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.cache SET ` +
		`value = ?, expiration = ?` +
		` WHERE key = ?`

	// run query
	XOLog(sqlstr, c.Value, c.Expiration, c.Key)
	_, err = db.Exec(sqlstr, c.Value, c.Expiration, c.Key)
	return err
}

// Save saves the Cache to the database.
func (c *Cache) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the Cache from the database.
func (c *Cache) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.cache WHERE key = ?`

	// run query
	XOLog(sqlstr, c.Key)
	_, err = db.Exec(sqlstr, c.Key)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CacheByKey retrieves a row from 'x_showroom.cache' as a Cache.
//
// Generated from index 'cache_key_pkey'.
func CacheByKey(db XODB, key string) (*Cache, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`key, value, expiration ` +
		`FROM x_showroom.cache ` +
		`WHERE key = ?`

	// run query
	XOLog(sqlstr, key)
	c := Cache{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, key).Scan(&c.Key, &c.Value, &c.Expiration)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// CacheByKey retrieves a row from 'x_showroom.cache' as a Cache.
//
// Generated from index 'cache_key_unique'.
func CacheByKey(db XODB, key string) (*Cache, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`key, value, expiration ` +
		`FROM x_showroom.cache ` +
		`WHERE key = ?`

	// run query
	XOLog(sqlstr, key)
	c := Cache{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, key).Scan(&c.Key, &c.Value, &c.Expiration)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
