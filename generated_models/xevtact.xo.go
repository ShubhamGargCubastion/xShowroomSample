// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XEvtAct represents a row from 'x_showroom.x_evt_act'.
type XEvtAct struct {
	ID                    uint           `json:"id"`                       // id
	IntegrationID         string         `json:"integration_id"`           // integration_id
	TypeCd                sql.NullString `json:"type_cd"`                  // type_cd
	SubTypeCd             sql.NullString `json:"sub_type_cd"`              // sub_type_cd
	DescText              sql.NullString `json:"desc_text"`                // desc_text
	StatusCd              string         `json:"status_cd"`                // status_cd
	PlannedStartDt        mysql.NullTime `json:"planned_start_dt"`         // planned_start_dt
	StartDt               mysql.NullTime `json:"start_dt"`                 // start_dt
	EndDt                 mysql.NullTime `json:"end_dt"`                   // end_dt
	ActivityImportance    sql.NullInt64  `json:"activity_importance"`      // activity_importance
	ActivityScore         sql.NullInt64  `json:"activity_score"`           // activity_score
	LeadID                sql.NullInt64  `json:"lead_id"`                  // lead_id
	PlannedStartDtMonth   sql.NullInt64  `json:"planned_start_dt_month"`   // planned_start_dt_month
	PlannedStartDtQuarter sql.NullString `json:"planned_start_dt_quarter"` // planned_start_dt_quarter
	PlannedStartDtYear    sql.NullString `json:"planned_start_dt_year"`    // planned_start_dt_year
	OwnerID               uint           `json:"owner_id"`                 // owner_id
	OrgID                 uint           `json:"org_id"`                   // org_id
	CreatedBy             uint           `json:"created_by"`               // created_by
	UpdatedBy             uint           `json:"updated_by"`               // updated_by
	CreatedAt             mysql.NullTime `json:"created_at"`               // created_at
	UpdatedAt             mysql.NullTime `json:"updated_at"`               // updated_at
	TimelineTypeCd        string         `json:"timeline_type_cd"`         // timeline_type_cd
	ActivityID            sql.NullInt64  `json:"activity_id"`              // activity_id
	AccountID             sql.NullInt64  `json:"account_id"`               // account_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XEvtAct exists in the database.
func (xea *XEvtAct) Exists() bool {
	return xea._exists
}

// Deleted provides information if the XEvtAct has been deleted from the database.
func (xea *XEvtAct) Deleted() bool {
	return xea._deleted
}

// Insert inserts the XEvtAct to the database.
func (xea *XEvtAct) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xea._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_evt_act (` +
		`integration_id, type_cd, sub_type_cd, desc_text, status_cd, planned_start_dt, start_dt, end_dt, activity_importance, activity_score, lead_id, planned_start_dt_month, planned_start_dt_quarter, planned_start_dt_year, owner_id, org_id, created_by, updated_by, created_at, updated_at, timeline_type_cd, activity_id, account_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xea.IntegrationID, xea.TypeCd, xea.SubTypeCd, xea.DescText, xea.StatusCd, xea.PlannedStartDt, xea.StartDt, xea.EndDt, xea.ActivityImportance, xea.ActivityScore, xea.LeadID, xea.PlannedStartDtMonth, xea.PlannedStartDtQuarter, xea.PlannedStartDtYear, xea.OwnerID, xea.OrgID, xea.CreatedBy, xea.UpdatedBy, xea.CreatedAt, xea.UpdatedAt, xea.TimelineTypeCd, xea.ActivityID, xea.AccountID)
	res, err := db.Exec(sqlstr, xea.IntegrationID, xea.TypeCd, xea.SubTypeCd, xea.DescText, xea.StatusCd, xea.PlannedStartDt, xea.StartDt, xea.EndDt, xea.ActivityImportance, xea.ActivityScore, xea.LeadID, xea.PlannedStartDtMonth, xea.PlannedStartDtQuarter, xea.PlannedStartDtYear, xea.OwnerID, xea.OrgID, xea.CreatedBy, xea.UpdatedBy, xea.CreatedAt, xea.UpdatedAt, xea.TimelineTypeCd, xea.ActivityID, xea.AccountID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xea.ID = uint(id)
	xea._exists = true

	return nil
}

// Update updates the XEvtAct in the database.
func (xea *XEvtAct) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xea._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xea._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_evt_act SET ` +
		`integration_id = ?, type_cd = ?, sub_type_cd = ?, desc_text = ?, status_cd = ?, planned_start_dt = ?, start_dt = ?, end_dt = ?, activity_importance = ?, activity_score = ?, lead_id = ?, planned_start_dt_month = ?, planned_start_dt_quarter = ?, planned_start_dt_year = ?, owner_id = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?, timeline_type_cd = ?, activity_id = ?, account_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xea.IntegrationID, xea.TypeCd, xea.SubTypeCd, xea.DescText, xea.StatusCd, xea.PlannedStartDt, xea.StartDt, xea.EndDt, xea.ActivityImportance, xea.ActivityScore, xea.LeadID, xea.PlannedStartDtMonth, xea.PlannedStartDtQuarter, xea.PlannedStartDtYear, xea.OwnerID, xea.OrgID, xea.CreatedBy, xea.UpdatedBy, xea.CreatedAt, xea.UpdatedAt, xea.TimelineTypeCd, xea.ActivityID, xea.AccountID, xea.ID)
	_, err = db.Exec(sqlstr, xea.IntegrationID, xea.TypeCd, xea.SubTypeCd, xea.DescText, xea.StatusCd, xea.PlannedStartDt, xea.StartDt, xea.EndDt, xea.ActivityImportance, xea.ActivityScore, xea.LeadID, xea.PlannedStartDtMonth, xea.PlannedStartDtQuarter, xea.PlannedStartDtYear, xea.OwnerID, xea.OrgID, xea.CreatedBy, xea.UpdatedBy, xea.CreatedAt, xea.UpdatedAt, xea.TimelineTypeCd, xea.ActivityID, xea.AccountID, xea.ID)
	return err
}

// Save saves the XEvtAct to the database.
func (xea *XEvtAct) Save(db XODB) error {
	if xea.Exists() {
		return xea.Update(db)
	}

	return xea.Insert(db)
}

// Delete deletes the XEvtAct from the database.
func (xea *XEvtAct) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xea._exists {
		return nil
	}

	// if deleted, bail
	if xea._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_evt_act WHERE id = ?`

	// run query
	XOLog(sqlstr, xea.ID)
	_, err = db.Exec(sqlstr, xea.ID)
	if err != nil {
		return err
	}

	// set deleted
	xea._deleted = true

	return nil
}

// XEvtActsByAccountID retrieves a row from 'x_showroom.x_evt_act' as a XEvtAct.
//
// Generated from index 'x_evt_act_account_id_foreign'.
func XEvtActsByAccountID(db XODB, accountID sql.NullInt64) ([]*XEvtAct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, type_cd, sub_type_cd, desc_text, status_cd, planned_start_dt, start_dt, end_dt, activity_importance, activity_score, lead_id, planned_start_dt_month, planned_start_dt_quarter, planned_start_dt_year, owner_id, org_id, created_by, updated_by, created_at, updated_at, timeline_type_cd, activity_id, account_id ` +
		`FROM x_showroom.x_evt_act ` +
		`WHERE account_id = ?`

	// run query
	XOLog(sqlstr, accountID)
	q, err := db.Query(sqlstr, accountID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XEvtAct{}
	for q.Next() {
		xea := XEvtAct{
			_exists: true,
		}

		// scan
		err = q.Scan(&xea.ID, &xea.IntegrationID, &xea.TypeCd, &xea.SubTypeCd, &xea.DescText, &xea.StatusCd, &xea.PlannedStartDt, &xea.StartDt, &xea.EndDt, &xea.ActivityImportance, &xea.ActivityScore, &xea.LeadID, &xea.PlannedStartDtMonth, &xea.PlannedStartDtQuarter, &xea.PlannedStartDtYear, &xea.OwnerID, &xea.OrgID, &xea.CreatedBy, &xea.UpdatedBy, &xea.CreatedAt, &xea.UpdatedAt, &xea.TimelineTypeCd, &xea.ActivityID, &xea.AccountID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xea)
	}

	return res, nil
}

// XEvtActsByActivityID retrieves a row from 'x_showroom.x_evt_act' as a XEvtAct.
//
// Generated from index 'x_evt_act_activity_id_foreign'.
func XEvtActsByActivityID(db XODB, activityID sql.NullInt64) ([]*XEvtAct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, type_cd, sub_type_cd, desc_text, status_cd, planned_start_dt, start_dt, end_dt, activity_importance, activity_score, lead_id, planned_start_dt_month, planned_start_dt_quarter, planned_start_dt_year, owner_id, org_id, created_by, updated_by, created_at, updated_at, timeline_type_cd, activity_id, account_id ` +
		`FROM x_showroom.x_evt_act ` +
		`WHERE activity_id = ?`

	// run query
	XOLog(sqlstr, activityID)
	q, err := db.Query(sqlstr, activityID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XEvtAct{}
	for q.Next() {
		xea := XEvtAct{
			_exists: true,
		}

		// scan
		err = q.Scan(&xea.ID, &xea.IntegrationID, &xea.TypeCd, &xea.SubTypeCd, &xea.DescText, &xea.StatusCd, &xea.PlannedStartDt, &xea.StartDt, &xea.EndDt, &xea.ActivityImportance, &xea.ActivityScore, &xea.LeadID, &xea.PlannedStartDtMonth, &xea.PlannedStartDtQuarter, &xea.PlannedStartDtYear, &xea.OwnerID, &xea.OrgID, &xea.CreatedBy, &xea.UpdatedBy, &xea.CreatedAt, &xea.UpdatedAt, &xea.TimelineTypeCd, &xea.ActivityID, &xea.AccountID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xea)
	}

	return res, nil
}

// XEvtActsByCreatedBy retrieves a row from 'x_showroom.x_evt_act' as a XEvtAct.
//
// Generated from index 'x_evt_act_created_by_foreign'.
func XEvtActsByCreatedBy(db XODB, createdBy uint) ([]*XEvtAct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, type_cd, sub_type_cd, desc_text, status_cd, planned_start_dt, start_dt, end_dt, activity_importance, activity_score, lead_id, planned_start_dt_month, planned_start_dt_quarter, planned_start_dt_year, owner_id, org_id, created_by, updated_by, created_at, updated_at, timeline_type_cd, activity_id, account_id ` +
		`FROM x_showroom.x_evt_act ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XEvtAct{}
	for q.Next() {
		xea := XEvtAct{
			_exists: true,
		}

		// scan
		err = q.Scan(&xea.ID, &xea.IntegrationID, &xea.TypeCd, &xea.SubTypeCd, &xea.DescText, &xea.StatusCd, &xea.PlannedStartDt, &xea.StartDt, &xea.EndDt, &xea.ActivityImportance, &xea.ActivityScore, &xea.LeadID, &xea.PlannedStartDtMonth, &xea.PlannedStartDtQuarter, &xea.PlannedStartDtYear, &xea.OwnerID, &xea.OrgID, &xea.CreatedBy, &xea.UpdatedBy, &xea.CreatedAt, &xea.UpdatedAt, &xea.TimelineTypeCd, &xea.ActivityID, &xea.AccountID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xea)
	}

	return res, nil
}

// XEvtActByID retrieves a row from 'x_showroom.x_evt_act' as a XEvtAct.
//
// Generated from index 'x_evt_act_id_pkey'.
func XEvtActByID(db XODB, id uint) (*XEvtAct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, type_cd, sub_type_cd, desc_text, status_cd, planned_start_dt, start_dt, end_dt, activity_importance, activity_score, lead_id, planned_start_dt_month, planned_start_dt_quarter, planned_start_dt_year, owner_id, org_id, created_by, updated_by, created_at, updated_at, timeline_type_cd, activity_id, account_id ` +
		`FROM x_showroom.x_evt_act ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xea := XEvtAct{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xea.ID, &xea.IntegrationID, &xea.TypeCd, &xea.SubTypeCd, &xea.DescText, &xea.StatusCd, &xea.PlannedStartDt, &xea.StartDt, &xea.EndDt, &xea.ActivityImportance, &xea.ActivityScore, &xea.LeadID, &xea.PlannedStartDtMonth, &xea.PlannedStartDtQuarter, &xea.PlannedStartDtYear, &xea.OwnerID, &xea.OrgID, &xea.CreatedBy, &xea.UpdatedBy, &xea.CreatedAt, &xea.UpdatedAt, &xea.TimelineTypeCd, &xea.ActivityID, &xea.AccountID)
	if err != nil {
		return nil, err
	}

	return &xea, nil
}

// XEvtActsByLeadID retrieves a row from 'x_showroom.x_evt_act' as a XEvtAct.
//
// Generated from index 'x_evt_act_lead_id_foreign'.
func XEvtActsByLeadID(db XODB, leadID sql.NullInt64) ([]*XEvtAct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, type_cd, sub_type_cd, desc_text, status_cd, planned_start_dt, start_dt, end_dt, activity_importance, activity_score, lead_id, planned_start_dt_month, planned_start_dt_quarter, planned_start_dt_year, owner_id, org_id, created_by, updated_by, created_at, updated_at, timeline_type_cd, activity_id, account_id ` +
		`FROM x_showroom.x_evt_act ` +
		`WHERE lead_id = ?`

	// run query
	XOLog(sqlstr, leadID)
	q, err := db.Query(sqlstr, leadID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XEvtAct{}
	for q.Next() {
		xea := XEvtAct{
			_exists: true,
		}

		// scan
		err = q.Scan(&xea.ID, &xea.IntegrationID, &xea.TypeCd, &xea.SubTypeCd, &xea.DescText, &xea.StatusCd, &xea.PlannedStartDt, &xea.StartDt, &xea.EndDt, &xea.ActivityImportance, &xea.ActivityScore, &xea.LeadID, &xea.PlannedStartDtMonth, &xea.PlannedStartDtQuarter, &xea.PlannedStartDtYear, &xea.OwnerID, &xea.OrgID, &xea.CreatedBy, &xea.UpdatedBy, &xea.CreatedAt, &xea.UpdatedAt, &xea.TimelineTypeCd, &xea.ActivityID, &xea.AccountID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xea)
	}

	return res, nil
}

// XEvtActsByOrgID retrieves a row from 'x_showroom.x_evt_act' as a XEvtAct.
//
// Generated from index 'x_evt_act_org_id_foreign'.
func XEvtActsByOrgID(db XODB, orgID uint) ([]*XEvtAct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, type_cd, sub_type_cd, desc_text, status_cd, planned_start_dt, start_dt, end_dt, activity_importance, activity_score, lead_id, planned_start_dt_month, planned_start_dt_quarter, planned_start_dt_year, owner_id, org_id, created_by, updated_by, created_at, updated_at, timeline_type_cd, activity_id, account_id ` +
		`FROM x_showroom.x_evt_act ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XEvtAct{}
	for q.Next() {
		xea := XEvtAct{
			_exists: true,
		}

		// scan
		err = q.Scan(&xea.ID, &xea.IntegrationID, &xea.TypeCd, &xea.SubTypeCd, &xea.DescText, &xea.StatusCd, &xea.PlannedStartDt, &xea.StartDt, &xea.EndDt, &xea.ActivityImportance, &xea.ActivityScore, &xea.LeadID, &xea.PlannedStartDtMonth, &xea.PlannedStartDtQuarter, &xea.PlannedStartDtYear, &xea.OwnerID, &xea.OrgID, &xea.CreatedBy, &xea.UpdatedBy, &xea.CreatedAt, &xea.UpdatedAt, &xea.TimelineTypeCd, &xea.ActivityID, &xea.AccountID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xea)
	}

	return res, nil
}

// XEvtActsByOwnerID retrieves a row from 'x_showroom.x_evt_act' as a XEvtAct.
//
// Generated from index 'x_evt_act_owner_id_foreign'.
func XEvtActsByOwnerID(db XODB, ownerID uint) ([]*XEvtAct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, type_cd, sub_type_cd, desc_text, status_cd, planned_start_dt, start_dt, end_dt, activity_importance, activity_score, lead_id, planned_start_dt_month, planned_start_dt_quarter, planned_start_dt_year, owner_id, org_id, created_by, updated_by, created_at, updated_at, timeline_type_cd, activity_id, account_id ` +
		`FROM x_showroom.x_evt_act ` +
		`WHERE owner_id = ?`

	// run query
	XOLog(sqlstr, ownerID)
	q, err := db.Query(sqlstr, ownerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XEvtAct{}
	for q.Next() {
		xea := XEvtAct{
			_exists: true,
		}

		// scan
		err = q.Scan(&xea.ID, &xea.IntegrationID, &xea.TypeCd, &xea.SubTypeCd, &xea.DescText, &xea.StatusCd, &xea.PlannedStartDt, &xea.StartDt, &xea.EndDt, &xea.ActivityImportance, &xea.ActivityScore, &xea.LeadID, &xea.PlannedStartDtMonth, &xea.PlannedStartDtQuarter, &xea.PlannedStartDtYear, &xea.OwnerID, &xea.OrgID, &xea.CreatedBy, &xea.UpdatedBy, &xea.CreatedAt, &xea.UpdatedAt, &xea.TimelineTypeCd, &xea.ActivityID, &xea.AccountID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xea)
	}

	return res, nil
}

// XEvtActsByUpdatedBy retrieves a row from 'x_showroom.x_evt_act' as a XEvtAct.
//
// Generated from index 'x_evt_act_updated_by_foreign'.
func XEvtActsByUpdatedBy(db XODB, updatedBy uint) ([]*XEvtAct, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, type_cd, sub_type_cd, desc_text, status_cd, planned_start_dt, start_dt, end_dt, activity_importance, activity_score, lead_id, planned_start_dt_month, planned_start_dt_quarter, planned_start_dt_year, owner_id, org_id, created_by, updated_by, created_at, updated_at, timeline_type_cd, activity_id, account_id ` +
		`FROM x_showroom.x_evt_act ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XEvtAct{}
	for q.Next() {
		xea := XEvtAct{
			_exists: true,
		}

		// scan
		err = q.Scan(&xea.ID, &xea.IntegrationID, &xea.TypeCd, &xea.SubTypeCd, &xea.DescText, &xea.StatusCd, &xea.PlannedStartDt, &xea.StartDt, &xea.EndDt, &xea.ActivityImportance, &xea.ActivityScore, &xea.LeadID, &xea.PlannedStartDtMonth, &xea.PlannedStartDtQuarter, &xea.PlannedStartDtYear, &xea.OwnerID, &xea.OrgID, &xea.CreatedBy, &xea.UpdatedBy, &xea.CreatedAt, &xea.UpdatedAt, &xea.TimelineTypeCd, &xea.ActivityID, &xea.AccountID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xea)
	}

	return res, nil
}
