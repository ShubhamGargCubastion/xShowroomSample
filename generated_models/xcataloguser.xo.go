// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XCatalogUser represents a row from 'x_showroom.x_catalog_users'.
type XCatalogUser struct {
	ID        uint           `json:"id"`         // id
	UserID    uint           `json:"user_id"`    // user_id
	CatalogID uint           `json:"catalog_id"` // catalog_id
	CreatedBy uint           `json:"created_by"` // created_by
	UpdatedBy uint           `json:"updated_by"` // updated_by
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XCatalogUser exists in the database.
func (xcu *XCatalogUser) Exists() bool {
	return xcu._exists
}

// Deleted provides information if the XCatalogUser has been deleted from the database.
func (xcu *XCatalogUser) Deleted() bool {
	return xcu._deleted
}

// Insert inserts the XCatalogUser to the database.
func (xcu *XCatalogUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xcu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_catalog_users (` +
		`user_id, catalog_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xcu.UserID, xcu.CatalogID, xcu.CreatedBy, xcu.UpdatedBy, xcu.CreatedAt, xcu.UpdatedAt)
	res, err := db.Exec(sqlstr, xcu.UserID, xcu.CatalogID, xcu.CreatedBy, xcu.UpdatedBy, xcu.CreatedAt, xcu.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xcu.ID = uint(id)
	xcu._exists = true

	return nil
}

// Update updates the XCatalogUser in the database.
func (xcu *XCatalogUser) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xcu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xcu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_catalog_users SET ` +
		`user_id = ?, catalog_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xcu.UserID, xcu.CatalogID, xcu.CreatedBy, xcu.UpdatedBy, xcu.CreatedAt, xcu.UpdatedAt, xcu.ID)
	_, err = db.Exec(sqlstr, xcu.UserID, xcu.CatalogID, xcu.CreatedBy, xcu.UpdatedBy, xcu.CreatedAt, xcu.UpdatedAt, xcu.ID)
	return err
}

// Save saves the XCatalogUser to the database.
func (xcu *XCatalogUser) Save(db XODB) error {
	if xcu.Exists() {
		return xcu.Update(db)
	}

	return xcu.Insert(db)
}

// Delete deletes the XCatalogUser from the database.
func (xcu *XCatalogUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xcu._exists {
		return nil
	}

	// if deleted, bail
	if xcu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_catalog_users WHERE id = ?`

	// run query
	XOLog(sqlstr, xcu.ID)
	_, err = db.Exec(sqlstr, xcu.ID)
	if err != nil {
		return err
	}

	// set deleted
	xcu._deleted = true

	return nil
}

// XCatalogUserByCatalogIDUserID retrieves a row from 'x_showroom.x_catalog_users' as a XCatalogUser.
//
// Generated from index 'x_catalog_users_catalog_id_user_id_unique'.
func XCatalogUserByCatalogIDUserID(db XODB, catalogID uint, userID uint) (*XCatalogUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, catalog_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog_users ` +
		`WHERE catalog_id = ? AND user_id = ?`

	// run query
	XOLog(sqlstr, catalogID, userID)
	xcu := XCatalogUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, catalogID, userID).Scan(&xcu.ID, &xcu.UserID, &xcu.CatalogID, &xcu.CreatedBy, &xcu.UpdatedBy, &xcu.CreatedAt, &xcu.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xcu, nil
}

// XCatalogUsersByCreatedBy retrieves a row from 'x_showroom.x_catalog_users' as a XCatalogUser.
//
// Generated from index 'x_catalog_users_created_by_foreign'.
func XCatalogUsersByCreatedBy(db XODB, createdBy uint) ([]*XCatalogUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, catalog_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog_users ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCatalogUser{}
	for q.Next() {
		xcu := XCatalogUser{
			_exists: true,
		}

		// scan
		err = q.Scan(&xcu.ID, &xcu.UserID, &xcu.CatalogID, &xcu.CreatedBy, &xcu.UpdatedBy, &xcu.CreatedAt, &xcu.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xcu)
	}

	return res, nil
}

// XCatalogUserByID retrieves a row from 'x_showroom.x_catalog_users' as a XCatalogUser.
//
// Generated from index 'x_catalog_users_id_pkey'.
func XCatalogUserByID(db XODB, id uint) (*XCatalogUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, catalog_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog_users ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xcu := XCatalogUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xcu.ID, &xcu.UserID, &xcu.CatalogID, &xcu.CreatedBy, &xcu.UpdatedBy, &xcu.CreatedAt, &xcu.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xcu, nil
}

// XCatalogUsersByUpdatedBy retrieves a row from 'x_showroom.x_catalog_users' as a XCatalogUser.
//
// Generated from index 'x_catalog_users_updated_by_foreign'.
func XCatalogUsersByUpdatedBy(db XODB, updatedBy uint) ([]*XCatalogUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, catalog_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog_users ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCatalogUser{}
	for q.Next() {
		xcu := XCatalogUser{
			_exists: true,
		}

		// scan
		err = q.Scan(&xcu.ID, &xcu.UserID, &xcu.CatalogID, &xcu.CreatedBy, &xcu.UpdatedBy, &xcu.CreatedAt, &xcu.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xcu)
	}

	return res, nil
}

// XCatalogUsersByUserID retrieves a row from 'x_showroom.x_catalog_users' as a XCatalogUser.
//
// Generated from index 'x_catalog_users_user_id_foreign'.
func XCatalogUsersByUserID(db XODB, userID uint) ([]*XCatalogUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, catalog_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog_users ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCatalogUser{}
	for q.Next() {
		xcu := XCatalogUser{
			_exists: true,
		}

		// scan
		err = q.Scan(&xcu.ID, &xcu.UserID, &xcu.CatalogID, &xcu.CreatedBy, &xcu.UpdatedBy, &xcu.CreatedAt, &xcu.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xcu)
	}

	return res, nil
}
