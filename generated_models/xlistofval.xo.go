// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XListOfVal represents a row from 'x_showroom.x_list_of_val'.
type XListOfVal struct {
	ID         uint           `json:"id"`          // id
	TypeCd     string         `json:"type_cd"`     // type_cd
	Name       string         `json:"name"`        // name
	Value      string         `json:"value"`       // value
	SubType    sql.NullString `json:"sub_type"`    // sub_type
	ActiveFlag string         `json:"active_flag"` // active_flag
	DescText   sql.NullString `json:"desc_text"`   // desc_text
	SeqNum     uint           `json:"seq_num"`     // seq_num
	ParID      sql.NullInt64  `json:"par_id"`      // par_id
	AttID      sql.NullInt64  `json:"att_id"`      // att_id
	OrgID      uint           `json:"org_id"`      // org_id
	CreatedBy  uint           `json:"created_by"`  // created_by
	UpdatedBy  uint           `json:"updated_by"`  // updated_by
	CreatedAt  mysql.NullTime `json:"created_at"`  // created_at
	UpdatedAt  mysql.NullTime `json:"updated_at"`  // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XListOfVal exists in the database.
func (xlov *XListOfVal) Exists() bool {
	return xlov._exists
}

// Deleted provides information if the XListOfVal has been deleted from the database.
func (xlov *XListOfVal) Deleted() bool {
	return xlov._deleted
}

// Insert inserts the XListOfVal to the database.
func (xlov *XListOfVal) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xlov._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_list_of_val (` +
		`type_cd, name, value, sub_type, active_flag, desc_text, seq_num, par_id, att_id, org_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xlov.TypeCd, xlov.Name, xlov.Value, xlov.SubType, xlov.ActiveFlag, xlov.DescText, xlov.SeqNum, xlov.ParID, xlov.AttID, xlov.OrgID, xlov.CreatedBy, xlov.UpdatedBy, xlov.CreatedAt, xlov.UpdatedAt)
	res, err := db.Exec(sqlstr, xlov.TypeCd, xlov.Name, xlov.Value, xlov.SubType, xlov.ActiveFlag, xlov.DescText, xlov.SeqNum, xlov.ParID, xlov.AttID, xlov.OrgID, xlov.CreatedBy, xlov.UpdatedBy, xlov.CreatedAt, xlov.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xlov.ID = uint(id)
	xlov._exists = true

	return nil
}

// Update updates the XListOfVal in the database.
func (xlov *XListOfVal) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xlov._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xlov._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_list_of_val SET ` +
		`type_cd = ?, name = ?, value = ?, sub_type = ?, active_flag = ?, desc_text = ?, seq_num = ?, par_id = ?, att_id = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xlov.TypeCd, xlov.Name, xlov.Value, xlov.SubType, xlov.ActiveFlag, xlov.DescText, xlov.SeqNum, xlov.ParID, xlov.AttID, xlov.OrgID, xlov.CreatedBy, xlov.UpdatedBy, xlov.CreatedAt, xlov.UpdatedAt, xlov.ID)
	_, err = db.Exec(sqlstr, xlov.TypeCd, xlov.Name, xlov.Value, xlov.SubType, xlov.ActiveFlag, xlov.DescText, xlov.SeqNum, xlov.ParID, xlov.AttID, xlov.OrgID, xlov.CreatedBy, xlov.UpdatedBy, xlov.CreatedAt, xlov.UpdatedAt, xlov.ID)
	return err
}

// Save saves the XListOfVal to the database.
func (xlov *XListOfVal) Save(db XODB) error {
	if xlov.Exists() {
		return xlov.Update(db)
	}

	return xlov.Insert(db)
}

// Delete deletes the XListOfVal from the database.
func (xlov *XListOfVal) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xlov._exists {
		return nil
	}

	// if deleted, bail
	if xlov._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_list_of_val WHERE id = ?`

	// run query
	XOLog(sqlstr, xlov.ID)
	_, err = db.Exec(sqlstr, xlov.ID)
	if err != nil {
		return err
	}

	// set deleted
	xlov._deleted = true

	return nil
}

// XListOfValsByAttID retrieves a row from 'x_showroom.x_list_of_val' as a XListOfVal.
//
// Generated from index 'x_list_of_val_att_id_foreign'.
func XListOfValsByAttID(db XODB, attID sql.NullInt64) ([]*XListOfVal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type_cd, name, value, sub_type, active_flag, desc_text, seq_num, par_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_list_of_val ` +
		`WHERE att_id = ?`

	// run query
	XOLog(sqlstr, attID)
	q, err := db.Query(sqlstr, attID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XListOfVal{}
	for q.Next() {
		xlov := XListOfVal{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlov.ID, &xlov.TypeCd, &xlov.Name, &xlov.Value, &xlov.SubType, &xlov.ActiveFlag, &xlov.DescText, &xlov.SeqNum, &xlov.ParID, &xlov.AttID, &xlov.OrgID, &xlov.CreatedBy, &xlov.UpdatedBy, &xlov.CreatedAt, &xlov.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlov)
	}

	return res, nil
}

// XListOfValsByCreatedBy retrieves a row from 'x_showroom.x_list_of_val' as a XListOfVal.
//
// Generated from index 'x_list_of_val_created_by_foreign'.
func XListOfValsByCreatedBy(db XODB, createdBy uint) ([]*XListOfVal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type_cd, name, value, sub_type, active_flag, desc_text, seq_num, par_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_list_of_val ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XListOfVal{}
	for q.Next() {
		xlov := XListOfVal{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlov.ID, &xlov.TypeCd, &xlov.Name, &xlov.Value, &xlov.SubType, &xlov.ActiveFlag, &xlov.DescText, &xlov.SeqNum, &xlov.ParID, &xlov.AttID, &xlov.OrgID, &xlov.CreatedBy, &xlov.UpdatedBy, &xlov.CreatedAt, &xlov.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlov)
	}

	return res, nil
}

// XListOfValByID retrieves a row from 'x_showroom.x_list_of_val' as a XListOfVal.
//
// Generated from index 'x_list_of_val_id_pkey'.
func XListOfValByID(db XODB, id uint) (*XListOfVal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type_cd, name, value, sub_type, active_flag, desc_text, seq_num, par_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_list_of_val ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xlov := XListOfVal{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xlov.ID, &xlov.TypeCd, &xlov.Name, &xlov.Value, &xlov.SubType, &xlov.ActiveFlag, &xlov.DescText, &xlov.SeqNum, &xlov.ParID, &xlov.AttID, &xlov.OrgID, &xlov.CreatedBy, &xlov.UpdatedBy, &xlov.CreatedAt, &xlov.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xlov, nil
}

// XListOfValsByOrgID retrieves a row from 'x_showroom.x_list_of_val' as a XListOfVal.
//
// Generated from index 'x_list_of_val_org_id_foreign'.
func XListOfValsByOrgID(db XODB, orgID uint) ([]*XListOfVal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type_cd, name, value, sub_type, active_flag, desc_text, seq_num, par_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_list_of_val ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XListOfVal{}
	for q.Next() {
		xlov := XListOfVal{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlov.ID, &xlov.TypeCd, &xlov.Name, &xlov.Value, &xlov.SubType, &xlov.ActiveFlag, &xlov.DescText, &xlov.SeqNum, &xlov.ParID, &xlov.AttID, &xlov.OrgID, &xlov.CreatedBy, &xlov.UpdatedBy, &xlov.CreatedAt, &xlov.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlov)
	}

	return res, nil
}

// XListOfValsByParID retrieves a row from 'x_showroom.x_list_of_val' as a XListOfVal.
//
// Generated from index 'x_list_of_val_par_id_foreign'.
func XListOfValsByParID(db XODB, parID sql.NullInt64) ([]*XListOfVal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type_cd, name, value, sub_type, active_flag, desc_text, seq_num, par_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_list_of_val ` +
		`WHERE par_id = ?`

	// run query
	XOLog(sqlstr, parID)
	q, err := db.Query(sqlstr, parID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XListOfVal{}
	for q.Next() {
		xlov := XListOfVal{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlov.ID, &xlov.TypeCd, &xlov.Name, &xlov.Value, &xlov.SubType, &xlov.ActiveFlag, &xlov.DescText, &xlov.SeqNum, &xlov.ParID, &xlov.AttID, &xlov.OrgID, &xlov.CreatedBy, &xlov.UpdatedBy, &xlov.CreatedAt, &xlov.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlov)
	}

	return res, nil
}

// XListOfValByTypeCdSubTypeNameOrgID retrieves a row from 'x_showroom.x_list_of_val' as a XListOfVal.
//
// Generated from index 'x_list_of_val_type_cd_sub_type_name_org_id_unique'.
func XListOfValByTypeCdSubTypeNameOrgID(db XODB, typeCd string, subType sql.NullString, name string, orgID uint) (*XListOfVal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type_cd, name, value, sub_type, active_flag, desc_text, seq_num, par_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_list_of_val ` +
		`WHERE type_cd = ? AND sub_type = ? AND name = ? AND org_id = ?`

	// run query
	XOLog(sqlstr, typeCd, subType, name, orgID)
	xlov := XListOfVal{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, typeCd, subType, name, orgID).Scan(&xlov.ID, &xlov.TypeCd, &xlov.Name, &xlov.Value, &xlov.SubType, &xlov.ActiveFlag, &xlov.DescText, &xlov.SeqNum, &xlov.ParID, &xlov.AttID, &xlov.OrgID, &xlov.CreatedBy, &xlov.UpdatedBy, &xlov.CreatedAt, &xlov.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xlov, nil
}

// XListOfValByTypeCdSubTypeValueOrgID retrieves a row from 'x_showroom.x_list_of_val' as a XListOfVal.
//
// Generated from index 'x_list_of_val_type_cd_sub_type_value_org_id_unique'.
func XListOfValByTypeCdSubTypeValueOrgID(db XODB, typeCd string, subType sql.NullString, value string, orgID uint) (*XListOfVal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type_cd, name, value, sub_type, active_flag, desc_text, seq_num, par_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_list_of_val ` +
		`WHERE type_cd = ? AND sub_type = ? AND value = ? AND org_id = ?`

	// run query
	XOLog(sqlstr, typeCd, subType, value, orgID)
	xlov := XListOfVal{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, typeCd, subType, value, orgID).Scan(&xlov.ID, &xlov.TypeCd, &xlov.Name, &xlov.Value, &xlov.SubType, &xlov.ActiveFlag, &xlov.DescText, &xlov.SeqNum, &xlov.ParID, &xlov.AttID, &xlov.OrgID, &xlov.CreatedBy, &xlov.UpdatedBy, &xlov.CreatedAt, &xlov.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xlov, nil
}

// XListOfValsByUpdatedBy retrieves a row from 'x_showroom.x_list_of_val' as a XListOfVal.
//
// Generated from index 'x_list_of_val_updated_by_foreign'.
func XListOfValsByUpdatedBy(db XODB, updatedBy uint) ([]*XListOfVal, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, type_cd, name, value, sub_type, active_flag, desc_text, seq_num, par_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_list_of_val ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XListOfVal{}
	for q.Next() {
		xlov := XListOfVal{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlov.ID, &xlov.TypeCd, &xlov.Name, &xlov.Value, &xlov.SubType, &xlov.ActiveFlag, &xlov.DescText, &xlov.SeqNum, &xlov.ParID, &xlov.AttID, &xlov.OrgID, &xlov.CreatedBy, &xlov.UpdatedBy, &xlov.CreatedAt, &xlov.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlov)
	}

	return res, nil
}
