// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XDemoGroupDefDtl represents a row from 'x_showroom.x_demo_group_def_dtl'.
type XDemoGroupDefDtl struct {
	ID             uint            `json:"id"`                // id
	Name           string          `json:"name"`              // name
	DisplayName    sql.NullString  `json:"display_name"`      // display_name
	TypeCd         string          `json:"type_cd"`           // type_cd
	Value          sql.NullString  `json:"value"`             // value
	StyleCd        sql.NullString  `json:"style_cd"`          // style_cd
	Height         sql.NullFloat64 `json:"height"`            // height
	SeqNum         uint            `json:"seq_num"`           // seq_num
	AttID          sql.NullInt64   `json:"att_id"`            // att_id
	ThumbnailAttID sql.NullInt64   `json:"thumbnail_att_id"`  // thumbnail_att_id
	AttTypeCd      sql.NullString  `json:"att_type_cd"`       // att_type_cd
	DescTextLine1  sql.NullString  `json:"desc_text_line_1"`  // desc_text_line_1
	DescTextLine2  sql.NullString  `json:"desc_text_line_2"`  // desc_text_line_2
	DescTextLine3  sql.NullString  `json:"desc_text_line_3"`  // desc_text_line_3
	DemoGroupDefID uint            `json:"demo_group_def_id"` // demo_group_def_id
	CreatedBy      uint            `json:"created_by"`        // created_by
	UpdatedBy      uint            `json:"updated_by"`        // updated_by
	CreatedAt      mysql.NullTime  `json:"created_at"`        // created_at
	UpdatedAt      mysql.NullTime  `json:"updated_at"`        // updated_at
	Width          sql.NullFloat64 `json:"width"`             // width
	Alpha          sql.NullFloat64 `json:"alpha"`             // alpha

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XDemoGroupDefDtl exists in the database.
func (xdgdd *XDemoGroupDefDtl) Exists() bool {
	return xdgdd._exists
}

// Deleted provides information if the XDemoGroupDefDtl has been deleted from the database.
func (xdgdd *XDemoGroupDefDtl) Deleted() bool {
	return xdgdd._deleted
}

// Insert inserts the XDemoGroupDefDtl to the database.
func (xdgdd *XDemoGroupDefDtl) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xdgdd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_demo_group_def_dtl (` +
		`name, display_name, type_cd, value, style_cd, height, seq_num, att_id, thumbnail_att_id, att_type_cd, desc_text_line_1, desc_text_line_2, desc_text_line_3, demo_group_def_id, created_by, updated_by, created_at, updated_at, width, alpha` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xdgdd.Name, xdgdd.DisplayName, xdgdd.TypeCd, xdgdd.Value, xdgdd.StyleCd, xdgdd.Height, xdgdd.SeqNum, xdgdd.AttID, xdgdd.ThumbnailAttID, xdgdd.AttTypeCd, xdgdd.DescTextLine1, xdgdd.DescTextLine2, xdgdd.DescTextLine3, xdgdd.DemoGroupDefID, xdgdd.CreatedBy, xdgdd.UpdatedBy, xdgdd.CreatedAt, xdgdd.UpdatedAt, xdgdd.Width, xdgdd.Alpha)
	res, err := db.Exec(sqlstr, xdgdd.Name, xdgdd.DisplayName, xdgdd.TypeCd, xdgdd.Value, xdgdd.StyleCd, xdgdd.Height, xdgdd.SeqNum, xdgdd.AttID, xdgdd.ThumbnailAttID, xdgdd.AttTypeCd, xdgdd.DescTextLine1, xdgdd.DescTextLine2, xdgdd.DescTextLine3, xdgdd.DemoGroupDefID, xdgdd.CreatedBy, xdgdd.UpdatedBy, xdgdd.CreatedAt, xdgdd.UpdatedAt, xdgdd.Width, xdgdd.Alpha)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xdgdd.ID = uint(id)
	xdgdd._exists = true

	return nil
}

// Update updates the XDemoGroupDefDtl in the database.
func (xdgdd *XDemoGroupDefDtl) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xdgdd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xdgdd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_demo_group_def_dtl SET ` +
		`name = ?, display_name = ?, type_cd = ?, value = ?, style_cd = ?, height = ?, seq_num = ?, att_id = ?, thumbnail_att_id = ?, att_type_cd = ?, desc_text_line_1 = ?, desc_text_line_2 = ?, desc_text_line_3 = ?, demo_group_def_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?, width = ?, alpha = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xdgdd.Name, xdgdd.DisplayName, xdgdd.TypeCd, xdgdd.Value, xdgdd.StyleCd, xdgdd.Height, xdgdd.SeqNum, xdgdd.AttID, xdgdd.ThumbnailAttID, xdgdd.AttTypeCd, xdgdd.DescTextLine1, xdgdd.DescTextLine2, xdgdd.DescTextLine3, xdgdd.DemoGroupDefID, xdgdd.CreatedBy, xdgdd.UpdatedBy, xdgdd.CreatedAt, xdgdd.UpdatedAt, xdgdd.Width, xdgdd.Alpha, xdgdd.ID)
	_, err = db.Exec(sqlstr, xdgdd.Name, xdgdd.DisplayName, xdgdd.TypeCd, xdgdd.Value, xdgdd.StyleCd, xdgdd.Height, xdgdd.SeqNum, xdgdd.AttID, xdgdd.ThumbnailAttID, xdgdd.AttTypeCd, xdgdd.DescTextLine1, xdgdd.DescTextLine2, xdgdd.DescTextLine3, xdgdd.DemoGroupDefID, xdgdd.CreatedBy, xdgdd.UpdatedBy, xdgdd.CreatedAt, xdgdd.UpdatedAt, xdgdd.Width, xdgdd.Alpha, xdgdd.ID)
	return err
}

// Save saves the XDemoGroupDefDtl to the database.
func (xdgdd *XDemoGroupDefDtl) Save(db XODB) error {
	if xdgdd.Exists() {
		return xdgdd.Update(db)
	}

	return xdgdd.Insert(db)
}

// Delete deletes the XDemoGroupDefDtl from the database.
func (xdgdd *XDemoGroupDefDtl) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xdgdd._exists {
		return nil
	}

	// if deleted, bail
	if xdgdd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_demo_group_def_dtl WHERE id = ?`

	// run query
	XOLog(sqlstr, xdgdd.ID)
	_, err = db.Exec(sqlstr, xdgdd.ID)
	if err != nil {
		return err
	}

	// set deleted
	xdgdd._deleted = true

	return nil
}

// XDemoGroupDefDtlsByCreatedBy retrieves a row from 'x_showroom.x_demo_group_def_dtl' as a XDemoGroupDefDtl.
//
// Generated from index 'x_demo_group_def_dtl_created_by_foreign'.
func XDemoGroupDefDtlsByCreatedBy(db XODB, createdBy uint) ([]*XDemoGroupDefDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, value, style_cd, height, seq_num, att_id, thumbnail_att_id, att_type_cd, desc_text_line_1, desc_text_line_2, desc_text_line_3, demo_group_def_id, created_by, updated_by, created_at, updated_at, width, alpha ` +
		`FROM x_showroom.x_demo_group_def_dtl ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroupDefDtl{}
	for q.Next() {
		xdgdd := XDemoGroupDefDtl{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdgdd.ID, &xdgdd.Name, &xdgdd.DisplayName, &xdgdd.TypeCd, &xdgdd.Value, &xdgdd.StyleCd, &xdgdd.Height, &xdgdd.SeqNum, &xdgdd.AttID, &xdgdd.ThumbnailAttID, &xdgdd.AttTypeCd, &xdgdd.DescTextLine1, &xdgdd.DescTextLine2, &xdgdd.DescTextLine3, &xdgdd.DemoGroupDefID, &xdgdd.CreatedBy, &xdgdd.UpdatedBy, &xdgdd.CreatedAt, &xdgdd.UpdatedAt, &xdgdd.Width, &xdgdd.Alpha)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdgdd)
	}

	return res, nil
}

// XDemoGroupDefDtlsByDemoGroupDefID retrieves a row from 'x_showroom.x_demo_group_def_dtl' as a XDemoGroupDefDtl.
//
// Generated from index 'x_demo_group_def_dtl_demo_group_def_id_foreign'.
func XDemoGroupDefDtlsByDemoGroupDefID(db XODB, demoGroupDefID uint) ([]*XDemoGroupDefDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, value, style_cd, height, seq_num, att_id, thumbnail_att_id, att_type_cd, desc_text_line_1, desc_text_line_2, desc_text_line_3, demo_group_def_id, created_by, updated_by, created_at, updated_at, width, alpha ` +
		`FROM x_showroom.x_demo_group_def_dtl ` +
		`WHERE demo_group_def_id = ?`

	// run query
	XOLog(sqlstr, demoGroupDefID)
	q, err := db.Query(sqlstr, demoGroupDefID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroupDefDtl{}
	for q.Next() {
		xdgdd := XDemoGroupDefDtl{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdgdd.ID, &xdgdd.Name, &xdgdd.DisplayName, &xdgdd.TypeCd, &xdgdd.Value, &xdgdd.StyleCd, &xdgdd.Height, &xdgdd.SeqNum, &xdgdd.AttID, &xdgdd.ThumbnailAttID, &xdgdd.AttTypeCd, &xdgdd.DescTextLine1, &xdgdd.DescTextLine2, &xdgdd.DescTextLine3, &xdgdd.DemoGroupDefID, &xdgdd.CreatedBy, &xdgdd.UpdatedBy, &xdgdd.CreatedAt, &xdgdd.UpdatedAt, &xdgdd.Width, &xdgdd.Alpha)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdgdd)
	}

	return res, nil
}

// XDemoGroupDefDtlByID retrieves a row from 'x_showroom.x_demo_group_def_dtl' as a XDemoGroupDefDtl.
//
// Generated from index 'x_demo_group_def_dtl_id_pkey'.
func XDemoGroupDefDtlByID(db XODB, id uint) (*XDemoGroupDefDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, value, style_cd, height, seq_num, att_id, thumbnail_att_id, att_type_cd, desc_text_line_1, desc_text_line_2, desc_text_line_3, demo_group_def_id, created_by, updated_by, created_at, updated_at, width, alpha ` +
		`FROM x_showroom.x_demo_group_def_dtl ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xdgdd := XDemoGroupDefDtl{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xdgdd.ID, &xdgdd.Name, &xdgdd.DisplayName, &xdgdd.TypeCd, &xdgdd.Value, &xdgdd.StyleCd, &xdgdd.Height, &xdgdd.SeqNum, &xdgdd.AttID, &xdgdd.ThumbnailAttID, &xdgdd.AttTypeCd, &xdgdd.DescTextLine1, &xdgdd.DescTextLine2, &xdgdd.DescTextLine3, &xdgdd.DemoGroupDefID, &xdgdd.CreatedBy, &xdgdd.UpdatedBy, &xdgdd.CreatedAt, &xdgdd.UpdatedAt, &xdgdd.Width, &xdgdd.Alpha)
	if err != nil {
		return nil, err
	}

	return &xdgdd, nil
}

// XDemoGroupDefDtlByNameTypeCdDemoGroupDefID retrieves a row from 'x_showroom.x_demo_group_def_dtl' as a XDemoGroupDefDtl.
//
// Generated from index 'x_demo_group_def_dtl_name_type_cd_demo_group_def_id_unique'.
func XDemoGroupDefDtlByNameTypeCdDemoGroupDefID(db XODB, name string, typeCd string, demoGroupDefID uint) (*XDemoGroupDefDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, value, style_cd, height, seq_num, att_id, thumbnail_att_id, att_type_cd, desc_text_line_1, desc_text_line_2, desc_text_line_3, demo_group_def_id, created_by, updated_by, created_at, updated_at, width, alpha ` +
		`FROM x_showroom.x_demo_group_def_dtl ` +
		`WHERE name = ? AND type_cd = ? AND demo_group_def_id = ?`

	// run query
	XOLog(sqlstr, name, typeCd, demoGroupDefID)
	xdgdd := XDemoGroupDefDtl{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, typeCd, demoGroupDefID).Scan(&xdgdd.ID, &xdgdd.Name, &xdgdd.DisplayName, &xdgdd.TypeCd, &xdgdd.Value, &xdgdd.StyleCd, &xdgdd.Height, &xdgdd.SeqNum, &xdgdd.AttID, &xdgdd.ThumbnailAttID, &xdgdd.AttTypeCd, &xdgdd.DescTextLine1, &xdgdd.DescTextLine2, &xdgdd.DescTextLine3, &xdgdd.DemoGroupDefID, &xdgdd.CreatedBy, &xdgdd.UpdatedBy, &xdgdd.CreatedAt, &xdgdd.UpdatedAt, &xdgdd.Width, &xdgdd.Alpha)
	if err != nil {
		return nil, err
	}

	return &xdgdd, nil
}

// XDemoGroupDefDtlsByUpdatedBy retrieves a row from 'x_showroom.x_demo_group_def_dtl' as a XDemoGroupDefDtl.
//
// Generated from index 'x_demo_group_def_dtl_updated_by_foreign'.
func XDemoGroupDefDtlsByUpdatedBy(db XODB, updatedBy uint) ([]*XDemoGroupDefDtl, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, value, style_cd, height, seq_num, att_id, thumbnail_att_id, att_type_cd, desc_text_line_1, desc_text_line_2, desc_text_line_3, demo_group_def_id, created_by, updated_by, created_at, updated_at, width, alpha ` +
		`FROM x_showroom.x_demo_group_def_dtl ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroupDefDtl{}
	for q.Next() {
		xdgdd := XDemoGroupDefDtl{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdgdd.ID, &xdgdd.Name, &xdgdd.DisplayName, &xdgdd.TypeCd, &xdgdd.Value, &xdgdd.StyleCd, &xdgdd.Height, &xdgdd.SeqNum, &xdgdd.AttID, &xdgdd.ThumbnailAttID, &xdgdd.AttTypeCd, &xdgdd.DescTextLine1, &xdgdd.DescTextLine2, &xdgdd.DescTextLine3, &xdgdd.DemoGroupDefID, &xdgdd.CreatedBy, &xdgdd.UpdatedBy, &xdgdd.CreatedAt, &xdgdd.UpdatedAt, &xdgdd.Width, &xdgdd.Alpha)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdgdd)
	}

	return res, nil
}
