// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XSalesTargetPeriod represents a row from 'x_showroom.x_sales_target_period'.
type XSalesTargetPeriod struct {
	ID        uint           `json:"id"`         // id
	Year      string         `json:"year"`       // year
	Month     string         `json:"month"`      // month
	Quarter   string         `json:"quarter"`    // quarter
	UserID    uint           `json:"user_id"`    // user_id
	CreatedBy uint           `json:"created_by"` // created_by
	UpdatedBy uint           `json:"updated_by"` // updated_by
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XSalesTargetPeriod exists in the database.
func (xstp *XSalesTargetPeriod) Exists() bool {
	return xstp._exists
}

// Deleted provides information if the XSalesTargetPeriod has been deleted from the database.
func (xstp *XSalesTargetPeriod) Deleted() bool {
	return xstp._deleted
}

// Insert inserts the XSalesTargetPeriod to the database.
func (xstp *XSalesTargetPeriod) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xstp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_sales_target_period (` +
		`year, month, quarter, user_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xstp.Year, xstp.Month, xstp.Quarter, xstp.UserID, xstp.CreatedBy, xstp.UpdatedBy, xstp.CreatedAt, xstp.UpdatedAt)
	res, err := db.Exec(sqlstr, xstp.Year, xstp.Month, xstp.Quarter, xstp.UserID, xstp.CreatedBy, xstp.UpdatedBy, xstp.CreatedAt, xstp.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xstp.ID = uint(id)
	xstp._exists = true

	return nil
}

// Update updates the XSalesTargetPeriod in the database.
func (xstp *XSalesTargetPeriod) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xstp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xstp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_sales_target_period SET ` +
		`year = ?, month = ?, quarter = ?, user_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xstp.Year, xstp.Month, xstp.Quarter, xstp.UserID, xstp.CreatedBy, xstp.UpdatedBy, xstp.CreatedAt, xstp.UpdatedAt, xstp.ID)
	_, err = db.Exec(sqlstr, xstp.Year, xstp.Month, xstp.Quarter, xstp.UserID, xstp.CreatedBy, xstp.UpdatedBy, xstp.CreatedAt, xstp.UpdatedAt, xstp.ID)
	return err
}

// Save saves the XSalesTargetPeriod to the database.
func (xstp *XSalesTargetPeriod) Save(db XODB) error {
	if xstp.Exists() {
		return xstp.Update(db)
	}

	return xstp.Insert(db)
}

// Delete deletes the XSalesTargetPeriod from the database.
func (xstp *XSalesTargetPeriod) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xstp._exists {
		return nil
	}

	// if deleted, bail
	if xstp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_sales_target_period WHERE id = ?`

	// run query
	XOLog(sqlstr, xstp.ID)
	_, err = db.Exec(sqlstr, xstp.ID)
	if err != nil {
		return err
	}

	// set deleted
	xstp._deleted = true

	return nil
}

// XSalesTargetPeriodsByCreatedBy retrieves a row from 'x_showroom.x_sales_target_period' as a XSalesTargetPeriod.
//
// Generated from index 'x_sales_target_period_created_by_foreign'.
func XSalesTargetPeriodsByCreatedBy(db XODB, createdBy uint) ([]*XSalesTargetPeriod, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, year, month, quarter, user_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sales_target_period ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSalesTargetPeriod{}
	for q.Next() {
		xstp := XSalesTargetPeriod{
			_exists: true,
		}

		// scan
		err = q.Scan(&xstp.ID, &xstp.Year, &xstp.Month, &xstp.Quarter, &xstp.UserID, &xstp.CreatedBy, &xstp.UpdatedBy, &xstp.CreatedAt, &xstp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xstp)
	}

	return res, nil
}

// XSalesTargetPeriodByID retrieves a row from 'x_showroom.x_sales_target_period' as a XSalesTargetPeriod.
//
// Generated from index 'x_sales_target_period_id_pkey'.
func XSalesTargetPeriodByID(db XODB, id uint) (*XSalesTargetPeriod, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, year, month, quarter, user_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sales_target_period ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xstp := XSalesTargetPeriod{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xstp.ID, &xstp.Year, &xstp.Month, &xstp.Quarter, &xstp.UserID, &xstp.CreatedBy, &xstp.UpdatedBy, &xstp.CreatedAt, &xstp.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xstp, nil
}

// XSalesTargetPeriodsByUpdatedBy retrieves a row from 'x_showroom.x_sales_target_period' as a XSalesTargetPeriod.
//
// Generated from index 'x_sales_target_period_updated_by_foreign'.
func XSalesTargetPeriodsByUpdatedBy(db XODB, updatedBy uint) ([]*XSalesTargetPeriod, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, year, month, quarter, user_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sales_target_period ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSalesTargetPeriod{}
	for q.Next() {
		xstp := XSalesTargetPeriod{
			_exists: true,
		}

		// scan
		err = q.Scan(&xstp.ID, &xstp.Year, &xstp.Month, &xstp.Quarter, &xstp.UserID, &xstp.CreatedBy, &xstp.UpdatedBy, &xstp.CreatedAt, &xstp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xstp)
	}

	return res, nil
}

// XSalesTargetPeriodsByUserID retrieves a row from 'x_showroom.x_sales_target_period' as a XSalesTargetPeriod.
//
// Generated from index 'x_sales_target_period_user_id_foreign'.
func XSalesTargetPeriodsByUserID(db XODB, userID uint) ([]*XSalesTargetPeriod, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, year, month, quarter, user_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sales_target_period ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XSalesTargetPeriod{}
	for q.Next() {
		xstp := XSalesTargetPeriod{
			_exists: true,
		}

		// scan
		err = q.Scan(&xstp.ID, &xstp.Year, &xstp.Month, &xstp.Quarter, &xstp.UserID, &xstp.CreatedBy, &xstp.UpdatedBy, &xstp.CreatedAt, &xstp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xstp)
	}

	return res, nil
}

// XSalesTargetPeriodByYearMonthQuarterUserID retrieves a row from 'x_showroom.x_sales_target_period' as a XSalesTargetPeriod.
//
// Generated from index 'x_sales_target_period_year_month_quarter_user_id_unique'.
func XSalesTargetPeriodByYearMonthQuarterUserID(db XODB, year string, month string, quarter string, userID uint) (*XSalesTargetPeriod, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, year, month, quarter, user_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_sales_target_period ` +
		`WHERE year = ? AND month = ? AND quarter = ? AND user_id = ?`

	// run query
	XOLog(sqlstr, year, month, quarter, userID)
	xstp := XSalesTargetPeriod{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, year, month, quarter, userID).Scan(&xstp.ID, &xstp.Year, &xstp.Month, &xstp.Quarter, &xstp.UserID, &xstp.CreatedBy, &xstp.UpdatedBy, &xstp.CreatedAt, &xstp.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xstp, nil
}
