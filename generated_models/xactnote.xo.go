// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XActNote represents a row from 'x_showroom.x_act_notes'.
type XActNote struct {
	ID         uint           `json:"id"`          // id
	DescText   string         `json:"desc_text"`   // desc_text
	ActivityID uint           `json:"activity_id"` // activity_id
	CreatedBy  uint           `json:"created_by"`  // created_by
	UpdatedBy  uint           `json:"updated_by"`  // updated_by
	CreatedAt  mysql.NullTime `json:"created_at"`  // created_at
	UpdatedAt  mysql.NullTime `json:"updated_at"`  // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XActNote exists in the database.
func (xan *XActNote) Exists() bool {
	return xan._exists
}

// Deleted provides information if the XActNote has been deleted from the database.
func (xan *XActNote) Deleted() bool {
	return xan._deleted
}

// Insert inserts the XActNote to the database.
func (xan *XActNote) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xan._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_act_notes (` +
		`desc_text, activity_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xan.DescText, xan.ActivityID, xan.CreatedBy, xan.UpdatedBy, xan.CreatedAt, xan.UpdatedAt)
	res, err := db.Exec(sqlstr, xan.DescText, xan.ActivityID, xan.CreatedBy, xan.UpdatedBy, xan.CreatedAt, xan.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xan.ID = uint(id)
	xan._exists = true

	return nil
}

// Update updates the XActNote in the database.
func (xan *XActNote) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xan._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xan._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_act_notes SET ` +
		`desc_text = ?, activity_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xan.DescText, xan.ActivityID, xan.CreatedBy, xan.UpdatedBy, xan.CreatedAt, xan.UpdatedAt, xan.ID)
	_, err = db.Exec(sqlstr, xan.DescText, xan.ActivityID, xan.CreatedBy, xan.UpdatedBy, xan.CreatedAt, xan.UpdatedAt, xan.ID)
	return err
}

// Save saves the XActNote to the database.
func (xan *XActNote) Save(db XODB) error {
	if xan.Exists() {
		return xan.Update(db)
	}

	return xan.Insert(db)
}

// Delete deletes the XActNote from the database.
func (xan *XActNote) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xan._exists {
		return nil
	}

	// if deleted, bail
	if xan._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_act_notes WHERE id = ?`

	// run query
	XOLog(sqlstr, xan.ID)
	_, err = db.Exec(sqlstr, xan.ID)
	if err != nil {
		return err
	}

	// set deleted
	xan._deleted = true

	return nil
}

// XEvtAct returns the XEvtAct associated with the XActNote's ActivityID (activity_id).
//
// Generated from foreign key 'x_act_notes_activity_id_foreign'.
func (xan *XActNote) XEvtAct(db XODB) (*XEvtAct, error) {
	return XEvtActByID(db, xan.ActivityID)
}

// XUserByCreatedBy returns the XUser associated with the XActNote's CreatedBy (created_by).
//
// Generated from foreign key 'x_act_notes_created_by_foreign'.
func (xan *XActNote) XUserByCreatedBy(db XODB) (*XUser, error) {
	return XUserByID(db, xan.CreatedBy)
}

// XUserByUpdatedBy returns the XUser associated with the XActNote's UpdatedBy (updated_by).
//
// Generated from foreign key 'x_act_notes_updated_by_foreign'.
func (xan *XActNote) XUserByUpdatedBy(db XODB) (*XUser, error) {
	return XUserByID(db, xan.UpdatedBy)
}

// XActNotesByActivityID retrieves a row from 'x_showroom.x_act_notes' as a XActNote.
//
// Generated from index 'x_act_notes_activity_id_foreign'.
func XActNotesByActivityID(db XODB, activityID uint) ([]*XActNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, desc_text, activity_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_act_notes ` +
		`WHERE activity_id = ?`

	// run query
	XOLog(sqlstr, activityID)
	q, err := db.Query(sqlstr, activityID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XActNote{}
	for q.Next() {
		xan := XActNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&xan.ID, &xan.DescText, &xan.ActivityID, &xan.CreatedBy, &xan.UpdatedBy, &xan.CreatedAt, &xan.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xan)
	}

	return res, nil
}

// XActNotesByCreatedBy retrieves a row from 'x_showroom.x_act_notes' as a XActNote.
//
// Generated from index 'x_act_notes_created_by_foreign'.
func XActNotesByCreatedBy(db XODB, createdBy uint) ([]*XActNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, desc_text, activity_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_act_notes ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XActNote{}
	for q.Next() {
		xan := XActNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&xan.ID, &xan.DescText, &xan.ActivityID, &xan.CreatedBy, &xan.UpdatedBy, &xan.CreatedAt, &xan.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xan)
	}

	return res, nil
}

// XActNoteByID retrieves a row from 'x_showroom.x_act_notes' as a XActNote.
//
// Generated from index 'x_act_notes_id_pkey'.
func XActNoteByID(db XODB, id uint) (*XActNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, desc_text, activity_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_act_notes ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xan := XActNote{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xan.ID, &xan.DescText, &xan.ActivityID, &xan.CreatedBy, &xan.UpdatedBy, &xan.CreatedAt, &xan.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xan, nil
}

// XActNotesByUpdatedBy retrieves a row from 'x_showroom.x_act_notes' as a XActNote.
//
// Generated from index 'x_act_notes_updated_by_foreign'.
func XActNotesByUpdatedBy(db XODB, updatedBy uint) ([]*XActNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, desc_text, activity_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_act_notes ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XActNote{}
	for q.Next() {
		xan := XActNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&xan.ID, &xan.DescText, &xan.ActivityID, &xan.CreatedBy, &xan.UpdatedBy, &xan.CreatedAt, &xan.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xan)
	}

	return res, nil
}
