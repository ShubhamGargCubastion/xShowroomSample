// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XPriDd represents a row from 'x_showroom.x_pri_dd'.
type XPriDd struct {
	ID          uint           `json:"id"`           // id
	Name        string         `json:"name"`         // name
	DisplayName string         `json:"display_name"` // display_name
	TypeCd      string         `json:"type_cd"`      // type_cd
	RefObj      string         `json:"ref_obj"`      // ref_obj
	SeqNum      uint           `json:"seq_num"`      // seq_num
	OrgID       uint           `json:"org_id"`       // org_id
	CreatedBy   uint           `json:"created_by"`   // created_by
	UpdatedBy   uint           `json:"updated_by"`   // updated_by
	CreatedAt   mysql.NullTime `json:"created_at"`   // created_at
	UpdatedAt   mysql.NullTime `json:"updated_at"`   // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XPriDd exists in the database.
func (xpd *XPriDd) Exists() bool {
	return xpd._exists
}

// Deleted provides information if the XPriDd has been deleted from the database.
func (xpd *XPriDd) Deleted() bool {
	return xpd._deleted
}

// Insert inserts the XPriDd to the database.
func (xpd *XPriDd) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xpd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_pri_dd (` +
		`name, display_name, type_cd, ref_obj, seq_num, org_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xpd.Name, xpd.DisplayName, xpd.TypeCd, xpd.RefObj, xpd.SeqNum, xpd.OrgID, xpd.CreatedBy, xpd.UpdatedBy, xpd.CreatedAt, xpd.UpdatedAt)
	res, err := db.Exec(sqlstr, xpd.Name, xpd.DisplayName, xpd.TypeCd, xpd.RefObj, xpd.SeqNum, xpd.OrgID, xpd.CreatedBy, xpd.UpdatedBy, xpd.CreatedAt, xpd.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xpd.ID = uint(id)
	xpd._exists = true

	return nil
}

// Update updates the XPriDd in the database.
func (xpd *XPriDd) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xpd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_pri_dd SET ` +
		`name = ?, display_name = ?, type_cd = ?, ref_obj = ?, seq_num = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xpd.Name, xpd.DisplayName, xpd.TypeCd, xpd.RefObj, xpd.SeqNum, xpd.OrgID, xpd.CreatedBy, xpd.UpdatedBy, xpd.CreatedAt, xpd.UpdatedAt, xpd.ID)
	_, err = db.Exec(sqlstr, xpd.Name, xpd.DisplayName, xpd.TypeCd, xpd.RefObj, xpd.SeqNum, xpd.OrgID, xpd.CreatedBy, xpd.UpdatedBy, xpd.CreatedAt, xpd.UpdatedAt, xpd.ID)
	return err
}

// Save saves the XPriDd to the database.
func (xpd *XPriDd) Save(db XODB) error {
	if xpd.Exists() {
		return xpd.Update(db)
	}

	return xpd.Insert(db)
}

// Delete deletes the XPriDd from the database.
func (xpd *XPriDd) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpd._exists {
		return nil
	}

	// if deleted, bail
	if xpd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_pri_dd WHERE id = ?`

	// run query
	XOLog(sqlstr, xpd.ID)
	_, err = db.Exec(sqlstr, xpd.ID)
	if err != nil {
		return err
	}

	// set deleted
	xpd._deleted = true

	return nil
}

// XPriDdsByCreatedBy retrieves a row from 'x_showroom.x_pri_dd' as a XPriDd.
//
// Generated from index 'x_pri_dd_created_by_foreign'.
func XPriDdsByCreatedBy(db XODB, createdBy uint) ([]*XPriDd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, ref_obj, seq_num, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_dd ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriDd{}
	for q.Next() {
		xpd := XPriDd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpd.ID, &xpd.Name, &xpd.DisplayName, &xpd.TypeCd, &xpd.RefObj, &xpd.SeqNum, &xpd.OrgID, &xpd.CreatedBy, &xpd.UpdatedBy, &xpd.CreatedAt, &xpd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpd)
	}

	return res, nil
}

// XPriDdByID retrieves a row from 'x_showroom.x_pri_dd' as a XPriDd.
//
// Generated from index 'x_pri_dd_id_pkey'.
func XPriDdByID(db XODB, id uint) (*XPriDd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, ref_obj, seq_num, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_dd ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xpd := XPriDd{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xpd.ID, &xpd.Name, &xpd.DisplayName, &xpd.TypeCd, &xpd.RefObj, &xpd.SeqNum, &xpd.OrgID, &xpd.CreatedBy, &xpd.UpdatedBy, &xpd.CreatedAt, &xpd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xpd, nil
}

// XPriDdByNameOrgID retrieves a row from 'x_showroom.x_pri_dd' as a XPriDd.
//
// Generated from index 'x_pri_dd_name_org_id_unique'.
func XPriDdByNameOrgID(db XODB, name string, orgID uint) (*XPriDd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, ref_obj, seq_num, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_dd ` +
		`WHERE name = ? AND org_id = ?`

	// run query
	XOLog(sqlstr, name, orgID)
	xpd := XPriDd{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, orgID).Scan(&xpd.ID, &xpd.Name, &xpd.DisplayName, &xpd.TypeCd, &xpd.RefObj, &xpd.SeqNum, &xpd.OrgID, &xpd.CreatedBy, &xpd.UpdatedBy, &xpd.CreatedAt, &xpd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xpd, nil
}

// XPriDdsByOrgID retrieves a row from 'x_showroom.x_pri_dd' as a XPriDd.
//
// Generated from index 'x_pri_dd_org_id_foreign'.
func XPriDdsByOrgID(db XODB, orgID uint) ([]*XPriDd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, ref_obj, seq_num, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_dd ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriDd{}
	for q.Next() {
		xpd := XPriDd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpd.ID, &xpd.Name, &xpd.DisplayName, &xpd.TypeCd, &xpd.RefObj, &xpd.SeqNum, &xpd.OrgID, &xpd.CreatedBy, &xpd.UpdatedBy, &xpd.CreatedAt, &xpd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpd)
	}

	return res, nil
}

// XPriDdsByUpdatedBy retrieves a row from 'x_showroom.x_pri_dd' as a XPriDd.
//
// Generated from index 'x_pri_dd_updated_by_foreign'.
func XPriDdsByUpdatedBy(db XODB, updatedBy uint) ([]*XPriDd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, ref_obj, seq_num, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_dd ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriDd{}
	for q.Next() {
		xpd := XPriDd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpd.ID, &xpd.Name, &xpd.DisplayName, &xpd.TypeCd, &xpd.RefObj, &xpd.SeqNum, &xpd.OrgID, &xpd.CreatedBy, &xpd.UpdatedBy, &xpd.CreatedAt, &xpd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpd)
	}

	return res, nil
}
