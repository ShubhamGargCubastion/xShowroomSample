// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XProdPriDim represents a row from 'x_showroom.x_prod_pri_dim'.
type XProdPriDim struct {
	ID                    uint           `json:"id"`                      // id
	PricingDimensionName  string         `json:"pricing_dimension_name"`  // pricing_dimension_name
	PricingDimensionValue string         `json:"pricing_dimension_value"` // pricing_dimension_value
	ProdID                uint           `json:"prod_id"`                 // prod_id
	CreatedBy             uint           `json:"created_by"`              // created_by
	UpdatedBy             uint           `json:"updated_by"`              // updated_by
	CreatedAt             mysql.NullTime `json:"created_at"`              // created_at
	UpdatedAt             mysql.NullTime `json:"updated_at"`              // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XProdPriDim exists in the database.
func (xppd *XProdPriDim) Exists() bool {
	return xppd._exists
}

// Deleted provides information if the XProdPriDim has been deleted from the database.
func (xppd *XProdPriDim) Deleted() bool {
	return xppd._deleted
}

// Insert inserts the XProdPriDim to the database.
func (xppd *XProdPriDim) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xppd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_prod_pri_dim (` +
		`pricing_dimension_name, pricing_dimension_value, prod_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xppd.PricingDimensionName, xppd.PricingDimensionValue, xppd.ProdID, xppd.CreatedBy, xppd.UpdatedBy, xppd.CreatedAt, xppd.UpdatedAt)
	res, err := db.Exec(sqlstr, xppd.PricingDimensionName, xppd.PricingDimensionValue, xppd.ProdID, xppd.CreatedBy, xppd.UpdatedBy, xppd.CreatedAt, xppd.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xppd.ID = uint(id)
	xppd._exists = true

	return nil
}

// Update updates the XProdPriDim in the database.
func (xppd *XProdPriDim) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xppd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xppd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_prod_pri_dim SET ` +
		`pricing_dimension_name = ?, pricing_dimension_value = ?, prod_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xppd.PricingDimensionName, xppd.PricingDimensionValue, xppd.ProdID, xppd.CreatedBy, xppd.UpdatedBy, xppd.CreatedAt, xppd.UpdatedAt, xppd.ID)
	_, err = db.Exec(sqlstr, xppd.PricingDimensionName, xppd.PricingDimensionValue, xppd.ProdID, xppd.CreatedBy, xppd.UpdatedBy, xppd.CreatedAt, xppd.UpdatedAt, xppd.ID)
	return err
}

// Save saves the XProdPriDim to the database.
func (xppd *XProdPriDim) Save(db XODB) error {
	if xppd.Exists() {
		return xppd.Update(db)
	}

	return xppd.Insert(db)
}

// Delete deletes the XProdPriDim from the database.
func (xppd *XProdPriDim) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xppd._exists {
		return nil
	}

	// if deleted, bail
	if xppd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_prod_pri_dim WHERE id = ?`

	// run query
	XOLog(sqlstr, xppd.ID)
	_, err = db.Exec(sqlstr, xppd.ID)
	if err != nil {
		return err
	}

	// set deleted
	xppd._deleted = true

	return nil
}

// XProdPriDimByPricingDimensionNamePricingDimensionValueProdID retrieves a row from 'x_showroom.x_prod_pri_dim' as a XProdPriDim.
//
// Generated from index 'user_key_1'.
func XProdPriDimByPricingDimensionNamePricingDimensionValueProdID(db XODB, pricingDimensionName string, pricingDimensionValue string, prodID uint) (*XProdPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_dimension_name, pricing_dimension_value, prod_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_pri_dim ` +
		`WHERE pricing_dimension_name = ? AND pricing_dimension_value = ? AND prod_id = ?`

	// run query
	XOLog(sqlstr, pricingDimensionName, pricingDimensionValue, prodID)
	xppd := XProdPriDim{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, pricingDimensionName, pricingDimensionValue, prodID).Scan(&xppd.ID, &xppd.PricingDimensionName, &xppd.PricingDimensionValue, &xppd.ProdID, &xppd.CreatedBy, &xppd.UpdatedBy, &xppd.CreatedAt, &xppd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xppd, nil
}

// XProdPriDimsByCreatedBy retrieves a row from 'x_showroom.x_prod_pri_dim' as a XProdPriDim.
//
// Generated from index 'x_prod_pri_dim_created_by_foreign'.
func XProdPriDimsByCreatedBy(db XODB, createdBy uint) ([]*XProdPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_dimension_name, pricing_dimension_value, prod_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_pri_dim ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdPriDim{}
	for q.Next() {
		xppd := XProdPriDim{
			_exists: true,
		}

		// scan
		err = q.Scan(&xppd.ID, &xppd.PricingDimensionName, &xppd.PricingDimensionValue, &xppd.ProdID, &xppd.CreatedBy, &xppd.UpdatedBy, &xppd.CreatedAt, &xppd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xppd)
	}

	return res, nil
}

// XProdPriDimByID retrieves a row from 'x_showroom.x_prod_pri_dim' as a XProdPriDim.
//
// Generated from index 'x_prod_pri_dim_id_pkey'.
func XProdPriDimByID(db XODB, id uint) (*XProdPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_dimension_name, pricing_dimension_value, prod_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_pri_dim ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xppd := XProdPriDim{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xppd.ID, &xppd.PricingDimensionName, &xppd.PricingDimensionValue, &xppd.ProdID, &xppd.CreatedBy, &xppd.UpdatedBy, &xppd.CreatedAt, &xppd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xppd, nil
}

// XProdPriDimsByProdID retrieves a row from 'x_showroom.x_prod_pri_dim' as a XProdPriDim.
//
// Generated from index 'x_prod_pri_dim_prod_id_foreign'.
func XProdPriDimsByProdID(db XODB, prodID uint) ([]*XProdPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_dimension_name, pricing_dimension_value, prod_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_pri_dim ` +
		`WHERE prod_id = ?`

	// run query
	XOLog(sqlstr, prodID)
	q, err := db.Query(sqlstr, prodID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdPriDim{}
	for q.Next() {
		xppd := XProdPriDim{
			_exists: true,
		}

		// scan
		err = q.Scan(&xppd.ID, &xppd.PricingDimensionName, &xppd.PricingDimensionValue, &xppd.ProdID, &xppd.CreatedBy, &xppd.UpdatedBy, &xppd.CreatedAt, &xppd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xppd)
	}

	return res, nil
}

// XProdPriDimsByUpdatedBy retrieves a row from 'x_showroom.x_prod_pri_dim' as a XProdPriDim.
//
// Generated from index 'x_prod_pri_dim_updated_by_foreign'.
func XProdPriDimsByUpdatedBy(db XODB, updatedBy uint) ([]*XProdPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_dimension_name, pricing_dimension_value, prod_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_pri_dim ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdPriDim{}
	for q.Next() {
		xppd := XProdPriDim{
			_exists: true,
		}

		// scan
		err = q.Scan(&xppd.ID, &xppd.PricingDimensionName, &xppd.PricingDimensionValue, &xppd.ProdID, &xppd.CreatedBy, &xppd.UpdatedBy, &xppd.CreatedAt, &xppd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xppd)
	}

	return res, nil
}
