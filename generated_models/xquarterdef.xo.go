// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XQuarterDef represents a row from 'x_showroom.x_quarter_def'.
type XQuarterDef struct {
	ID          uint           `json:"id"`           // id
	Name        string         `json:"name"`         // name
	DisplayName string         `json:"display_name"` // display_name
	StartMonth  int            `json:"start_month"`  // start_month
	EndMonth    int            `json:"end_month"`    // end_month
	OrgID       uint           `json:"org_id"`       // org_id
	CreatedBy   uint           `json:"created_by"`   // created_by
	UpdatedBy   uint           `json:"updated_by"`   // updated_by
	CreatedAt   mysql.NullTime `json:"created_at"`   // created_at
	UpdatedAt   mysql.NullTime `json:"updated_at"`   // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XQuarterDef exists in the database.
func (xqd *XQuarterDef) Exists() bool {
	return xqd._exists
}

// Deleted provides information if the XQuarterDef has been deleted from the database.
func (xqd *XQuarterDef) Deleted() bool {
	return xqd._deleted
}

// Insert inserts the XQuarterDef to the database.
func (xqd *XQuarterDef) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xqd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_quarter_def (` +
		`name, display_name, start_month, end_month, org_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xqd.Name, xqd.DisplayName, xqd.StartMonth, xqd.EndMonth, xqd.OrgID, xqd.CreatedBy, xqd.UpdatedBy, xqd.CreatedAt, xqd.UpdatedAt)
	res, err := db.Exec(sqlstr, xqd.Name, xqd.DisplayName, xqd.StartMonth, xqd.EndMonth, xqd.OrgID, xqd.CreatedBy, xqd.UpdatedBy, xqd.CreatedAt, xqd.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xqd.ID = uint(id)
	xqd._exists = true

	return nil
}

// Update updates the XQuarterDef in the database.
func (xqd *XQuarterDef) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xqd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xqd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_quarter_def SET ` +
		`name = ?, display_name = ?, start_month = ?, end_month = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xqd.Name, xqd.DisplayName, xqd.StartMonth, xqd.EndMonth, xqd.OrgID, xqd.CreatedBy, xqd.UpdatedBy, xqd.CreatedAt, xqd.UpdatedAt, xqd.ID)
	_, err = db.Exec(sqlstr, xqd.Name, xqd.DisplayName, xqd.StartMonth, xqd.EndMonth, xqd.OrgID, xqd.CreatedBy, xqd.UpdatedBy, xqd.CreatedAt, xqd.UpdatedAt, xqd.ID)
	return err
}

// Save saves the XQuarterDef to the database.
func (xqd *XQuarterDef) Save(db XODB) error {
	if xqd.Exists() {
		return xqd.Update(db)
	}

	return xqd.Insert(db)
}

// Delete deletes the XQuarterDef from the database.
func (xqd *XQuarterDef) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xqd._exists {
		return nil
	}

	// if deleted, bail
	if xqd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_quarter_def WHERE id = ?`

	// run query
	XOLog(sqlstr, xqd.ID)
	_, err = db.Exec(sqlstr, xqd.ID)
	if err != nil {
		return err
	}

	// set deleted
	xqd._deleted = true

	return nil
}

// XQuarterDevesByCreatedBy retrieves a row from 'x_showroom.x_quarter_def' as a XQuarterDef.
//
// Generated from index 'x_quarter_def_created_by_foreign'.
func XQuarterDevesByCreatedBy(db XODB, createdBy uint) ([]*XQuarterDef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, start_month, end_month, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_quarter_def ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XQuarterDef{}
	for q.Next() {
		xqd := XQuarterDef{
			_exists: true,
		}

		// scan
		err = q.Scan(&xqd.ID, &xqd.Name, &xqd.DisplayName, &xqd.StartMonth, &xqd.EndMonth, &xqd.OrgID, &xqd.CreatedBy, &xqd.UpdatedBy, &xqd.CreatedAt, &xqd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xqd)
	}

	return res, nil
}

// XQuarterDefByID retrieves a row from 'x_showroom.x_quarter_def' as a XQuarterDef.
//
// Generated from index 'x_quarter_def_id_pkey'.
func XQuarterDefByID(db XODB, id uint) (*XQuarterDef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, start_month, end_month, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_quarter_def ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xqd := XQuarterDef{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xqd.ID, &xqd.Name, &xqd.DisplayName, &xqd.StartMonth, &xqd.EndMonth, &xqd.OrgID, &xqd.CreatedBy, &xqd.UpdatedBy, &xqd.CreatedAt, &xqd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xqd, nil
}

// XQuarterDefByNameStartMonthEndMonthOrgID retrieves a row from 'x_showroom.x_quarter_def' as a XQuarterDef.
//
// Generated from index 'x_quarter_def_name_start_month_end_month_org_id_unique'.
func XQuarterDefByNameStartMonthEndMonthOrgID(db XODB, name string, startMonth int, endMonth int, orgID uint) (*XQuarterDef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, start_month, end_month, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_quarter_def ` +
		`WHERE name = ? AND start_month = ? AND end_month = ? AND org_id = ?`

	// run query
	XOLog(sqlstr, name, startMonth, endMonth, orgID)
	xqd := XQuarterDef{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, startMonth, endMonth, orgID).Scan(&xqd.ID, &xqd.Name, &xqd.DisplayName, &xqd.StartMonth, &xqd.EndMonth, &xqd.OrgID, &xqd.CreatedBy, &xqd.UpdatedBy, &xqd.CreatedAt, &xqd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xqd, nil
}

// XQuarterDevesByOrgID retrieves a row from 'x_showroom.x_quarter_def' as a XQuarterDef.
//
// Generated from index 'x_quarter_def_org_id_foreign'.
func XQuarterDevesByOrgID(db XODB, orgID uint) ([]*XQuarterDef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, start_month, end_month, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_quarter_def ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XQuarterDef{}
	for q.Next() {
		xqd := XQuarterDef{
			_exists: true,
		}

		// scan
		err = q.Scan(&xqd.ID, &xqd.Name, &xqd.DisplayName, &xqd.StartMonth, &xqd.EndMonth, &xqd.OrgID, &xqd.CreatedBy, &xqd.UpdatedBy, &xqd.CreatedAt, &xqd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xqd)
	}

	return res, nil
}

// XQuarterDevesByUpdatedBy retrieves a row from 'x_showroom.x_quarter_def' as a XQuarterDef.
//
// Generated from index 'x_quarter_def_updated_by_foreign'.
func XQuarterDevesByUpdatedBy(db XODB, updatedBy uint) ([]*XQuarterDef, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, start_month, end_month, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_quarter_def ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XQuarterDef{}
	for q.Next() {
		xqd := XQuarterDef{
			_exists: true,
		}

		// scan
		err = q.Scan(&xqd.ID, &xqd.Name, &xqd.DisplayName, &xqd.StartMonth, &xqd.EndMonth, &xqd.OrgID, &xqd.CreatedBy, &xqd.UpdatedBy, &xqd.CreatedAt, &xqd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xqd)
	}

	return res, nil
}
