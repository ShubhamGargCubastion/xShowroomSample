// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XAPITracker represents a row from 'x_showroom.x_api_tracker'.
type XAPITracker struct {
	ID           uint           `json:"id"`             // id
	UserEmail    string         `json:"user_email"`     // user_email
	UserDeviceID string         `json:"user_device_id"` // user_device_id
	LatCoord     float64        `json:"lat_coord"`      // lat_coord
	LongCoord    float64        `json:"long_coord"`     // long_coord
	APIName      string         `json:"api_name"`       // api_name
	RequestBody  string         `json:"request_body"`   // request_body
	ErrorMessage sql.NullString `json:"error_message"`  // error_message
	StatusCd     string         `json:"status_cd"`      // status_cd
	OrgID        sql.NullInt64  `json:"org_id"`         // org_id
	CreatedAt    mysql.NullTime `json:"created_at"`     // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XAPITracker exists in the database.
func (xapit *XAPITracker) Exists() bool {
	return xapit._exists
}

// Deleted provides information if the XAPITracker has been deleted from the database.
func (xapit *XAPITracker) Deleted() bool {
	return xapit._deleted
}

// Insert inserts the XAPITracker to the database.
func (xapit *XAPITracker) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xapit._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_api_tracker (` +
		`user_email, user_device_id, lat_coord, long_coord, api_name, request_body, error_message, status_cd, org_id, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xapit.UserEmail, xapit.UserDeviceID, xapit.LatCoord, xapit.LongCoord, xapit.APIName, xapit.RequestBody, xapit.ErrorMessage, xapit.StatusCd, xapit.OrgID, xapit.CreatedAt, xapit.UpdatedAt)
	res, err := db.Exec(sqlstr, xapit.UserEmail, xapit.UserDeviceID, xapit.LatCoord, xapit.LongCoord, xapit.APIName, xapit.RequestBody, xapit.ErrorMessage, xapit.StatusCd, xapit.OrgID, xapit.CreatedAt, xapit.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xapit.ID = uint(id)
	xapit._exists = true

	return nil
}

// Update updates the XAPITracker in the database.
func (xapit *XAPITracker) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xapit._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xapit._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_api_tracker SET ` +
		`user_email = ?, user_device_id = ?, lat_coord = ?, long_coord = ?, api_name = ?, request_body = ?, error_message = ?, status_cd = ?, org_id = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xapit.UserEmail, xapit.UserDeviceID, xapit.LatCoord, xapit.LongCoord, xapit.APIName, xapit.RequestBody, xapit.ErrorMessage, xapit.StatusCd, xapit.OrgID, xapit.CreatedAt, xapit.UpdatedAt, xapit.ID)
	_, err = db.Exec(sqlstr, xapit.UserEmail, xapit.UserDeviceID, xapit.LatCoord, xapit.LongCoord, xapit.APIName, xapit.RequestBody, xapit.ErrorMessage, xapit.StatusCd, xapit.OrgID, xapit.CreatedAt, xapit.UpdatedAt, xapit.ID)
	return err
}

// Save saves the XAPITracker to the database.
func (xapit *XAPITracker) Save(db XODB) error {
	if xapit.Exists() {
		return xapit.Update(db)
	}

	return xapit.Insert(db)
}

// Delete deletes the XAPITracker from the database.
func (xapit *XAPITracker) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xapit._exists {
		return nil
	}

	// if deleted, bail
	if xapit._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_api_tracker WHERE id = ?`

	// run query
	XOLog(sqlstr, xapit.ID)
	_, err = db.Exec(sqlstr, xapit.ID)
	if err != nil {
		return err
	}

	// set deleted
	xapit._deleted = true

	return nil
}

// XAPITrackersByOrgID retrieves a row from 'x_showroom.x_api_tracker' as a XAPITracker.
//
// Generated from index 'org_id'.
func XAPITrackersByOrgID(db XODB, orgID sql.NullInt64) ([]*XAPITracker, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_email, user_device_id, lat_coord, long_coord, api_name, request_body, error_message, status_cd, org_id, created_at, updated_at ` +
		`FROM x_showroom.x_api_tracker ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XAPITracker{}
	for q.Next() {
		xapit := XAPITracker{
			_exists: true,
		}

		// scan
		err = q.Scan(&xapit.ID, &xapit.UserEmail, &xapit.UserDeviceID, &xapit.LatCoord, &xapit.LongCoord, &xapit.APIName, &xapit.RequestBody, &xapit.ErrorMessage, &xapit.StatusCd, &xapit.OrgID, &xapit.CreatedAt, &xapit.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xapit)
	}

	return res, nil
}

// XAPITrackerByID retrieves a row from 'x_showroom.x_api_tracker' as a XAPITracker.
//
// Generated from index 'x_api_tracker_id_pkey'.
func XAPITrackerByID(db XODB, id uint) (*XAPITracker, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_email, user_device_id, lat_coord, long_coord, api_name, request_body, error_message, status_cd, org_id, created_at, updated_at ` +
		`FROM x_showroom.x_api_tracker ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xapit := XAPITracker{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xapit.ID, &xapit.UserEmail, &xapit.UserDeviceID, &xapit.LatCoord, &xapit.LongCoord, &xapit.APIName, &xapit.RequestBody, &xapit.ErrorMessage, &xapit.StatusCd, &xapit.OrgID, &xapit.CreatedAt, &xapit.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xapit, nil
}
