// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XLeadAtt represents a row from 'x_showroom.x_lead_att'.
type XLeadAtt struct {
	ID             uint           `json:"id"`              // id
	FileExtType    sql.NullString `json:"file_ext_type"`   // file_ext_type
	AttachmentName string         `json:"attachment_name"` // attachment_name
	LeadID         uint           `json:"lead_id"`         // lead_id
	CreatedBy      uint           `json:"created_by"`      // created_by
	UpdatedBy      uint           `json:"updated_by"`      // updated_by
	CreatedAt      mysql.NullTime `json:"created_at"`      // created_at
	UpdatedAt      mysql.NullTime `json:"updated_at"`      // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XLeadAtt exists in the database.
func (xla *XLeadAtt) Exists() bool {
	return xla._exists
}

// Deleted provides information if the XLeadAtt has been deleted from the database.
func (xla *XLeadAtt) Deleted() bool {
	return xla._deleted
}

// Insert inserts the XLeadAtt to the database.
func (xla *XLeadAtt) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xla._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_lead_att (` +
		`file_ext_type, attachment_name, lead_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xla.FileExtType, xla.AttachmentName, xla.LeadID, xla.CreatedBy, xla.UpdatedBy, xla.CreatedAt, xla.UpdatedAt)
	res, err := db.Exec(sqlstr, xla.FileExtType, xla.AttachmentName, xla.LeadID, xla.CreatedBy, xla.UpdatedBy, xla.CreatedAt, xla.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xla.ID = uint(id)
	xla._exists = true

	return nil
}

// Update updates the XLeadAtt in the database.
func (xla *XLeadAtt) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xla._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xla._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_lead_att SET ` +
		`file_ext_type = ?, attachment_name = ?, lead_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xla.FileExtType, xla.AttachmentName, xla.LeadID, xla.CreatedBy, xla.UpdatedBy, xla.CreatedAt, xla.UpdatedAt, xla.ID)
	_, err = db.Exec(sqlstr, xla.FileExtType, xla.AttachmentName, xla.LeadID, xla.CreatedBy, xla.UpdatedBy, xla.CreatedAt, xla.UpdatedAt, xla.ID)
	return err
}

// Save saves the XLeadAtt to the database.
func (xla *XLeadAtt) Save(db XODB) error {
	if xla.Exists() {
		return xla.Update(db)
	}

	return xla.Insert(db)
}

// Delete deletes the XLeadAtt from the database.
func (xla *XLeadAtt) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xla._exists {
		return nil
	}

	// if deleted, bail
	if xla._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_lead_att WHERE id = ?`

	// run query
	XOLog(sqlstr, xla.ID)
	_, err = db.Exec(sqlstr, xla.ID)
	if err != nil {
		return err
	}

	// set deleted
	xla._deleted = true

	return nil
}

// XLeadAttsByCreatedBy retrieves a row from 'x_showroom.x_lead_att' as a XLeadAtt.
//
// Generated from index 'x_lead_att_created_by_foreign'.
func XLeadAttsByCreatedBy(db XODB, createdBy uint) ([]*XLeadAtt, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, file_ext_type, attachment_name, lead_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_att ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadAtt{}
	for q.Next() {
		xla := XLeadAtt{
			_exists: true,
		}

		// scan
		err = q.Scan(&xla.ID, &xla.FileExtType, &xla.AttachmentName, &xla.LeadID, &xla.CreatedBy, &xla.UpdatedBy, &xla.CreatedAt, &xla.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xla)
	}

	return res, nil
}

// XLeadAttByID retrieves a row from 'x_showroom.x_lead_att' as a XLeadAtt.
//
// Generated from index 'x_lead_att_id_pkey'.
func XLeadAttByID(db XODB, id uint) (*XLeadAtt, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, file_ext_type, attachment_name, lead_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_att ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xla := XLeadAtt{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xla.ID, &xla.FileExtType, &xla.AttachmentName, &xla.LeadID, &xla.CreatedBy, &xla.UpdatedBy, &xla.CreatedAt, &xla.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xla, nil
}

// XLeadAttsByLeadID retrieves a row from 'x_showroom.x_lead_att' as a XLeadAtt.
//
// Generated from index 'x_lead_att_lead_id_foreign'.
func XLeadAttsByLeadID(db XODB, leadID uint) ([]*XLeadAtt, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, file_ext_type, attachment_name, lead_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_att ` +
		`WHERE lead_id = ?`

	// run query
	XOLog(sqlstr, leadID)
	q, err := db.Query(sqlstr, leadID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadAtt{}
	for q.Next() {
		xla := XLeadAtt{
			_exists: true,
		}

		// scan
		err = q.Scan(&xla.ID, &xla.FileExtType, &xla.AttachmentName, &xla.LeadID, &xla.CreatedBy, &xla.UpdatedBy, &xla.CreatedAt, &xla.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xla)
	}

	return res, nil
}

// XLeadAttsByUpdatedBy retrieves a row from 'x_showroom.x_lead_att' as a XLeadAtt.
//
// Generated from index 'x_lead_att_updated_by_foreign'.
func XLeadAttsByUpdatedBy(db XODB, updatedBy uint) ([]*XLeadAtt, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, file_ext_type, attachment_name, lead_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_att ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadAtt{}
	for q.Next() {
		xla := XLeadAtt{
			_exists: true,
		}

		// scan
		err = q.Scan(&xla.ID, &xla.FileExtType, &xla.AttachmentName, &xla.LeadID, &xla.CreatedBy, &xla.UpdatedBy, &xla.CreatedAt, &xla.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xla)
	}

	return res, nil
}
