// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XOptAttrPriDim represents a row from 'x_showroom.x_opt_attr_pri_dim'.
type XOptAttrPriDim struct {
	ID                    uint           `json:"id"`                      // id
	PricingDimensionName  string         `json:"pricing_dimension_name"`  // pricing_dimension_name
	PricingDimensionValue string         `json:"pricing_dimension_value"` // pricing_dimension_value
	OptAttrID             uint           `json:"opt_attr_id"`             // opt_attr_id
	CreatedBy             uint           `json:"created_by"`              // created_by
	UpdatedBy             uint           `json:"updated_by"`              // updated_by
	CreatedAt             mysql.NullTime `json:"created_at"`              // created_at
	UpdatedAt             mysql.NullTime `json:"updated_at"`              // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XOptAttrPriDim exists in the database.
func (xoapd *XOptAttrPriDim) Exists() bool {
	return xoapd._exists
}

// Deleted provides information if the XOptAttrPriDim has been deleted from the database.
func (xoapd *XOptAttrPriDim) Deleted() bool {
	return xoapd._deleted
}

// Insert inserts the XOptAttrPriDim to the database.
func (xoapd *XOptAttrPriDim) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xoapd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_opt_attr_pri_dim (` +
		`pricing_dimension_name, pricing_dimension_value, opt_attr_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xoapd.PricingDimensionName, xoapd.PricingDimensionValue, xoapd.OptAttrID, xoapd.CreatedBy, xoapd.UpdatedBy, xoapd.CreatedAt, xoapd.UpdatedAt)
	res, err := db.Exec(sqlstr, xoapd.PricingDimensionName, xoapd.PricingDimensionValue, xoapd.OptAttrID, xoapd.CreatedBy, xoapd.UpdatedBy, xoapd.CreatedAt, xoapd.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xoapd.ID = uint(id)
	xoapd._exists = true

	return nil
}

// Update updates the XOptAttrPriDim in the database.
func (xoapd *XOptAttrPriDim) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xoapd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xoapd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_opt_attr_pri_dim SET ` +
		`pricing_dimension_name = ?, pricing_dimension_value = ?, opt_attr_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xoapd.PricingDimensionName, xoapd.PricingDimensionValue, xoapd.OptAttrID, xoapd.CreatedBy, xoapd.UpdatedBy, xoapd.CreatedAt, xoapd.UpdatedAt, xoapd.ID)
	_, err = db.Exec(sqlstr, xoapd.PricingDimensionName, xoapd.PricingDimensionValue, xoapd.OptAttrID, xoapd.CreatedBy, xoapd.UpdatedBy, xoapd.CreatedAt, xoapd.UpdatedAt, xoapd.ID)
	return err
}

// Save saves the XOptAttrPriDim to the database.
func (xoapd *XOptAttrPriDim) Save(db XODB) error {
	if xoapd.Exists() {
		return xoapd.Update(db)
	}

	return xoapd.Insert(db)
}

// Delete deletes the XOptAttrPriDim from the database.
func (xoapd *XOptAttrPriDim) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xoapd._exists {
		return nil
	}

	// if deleted, bail
	if xoapd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_opt_attr_pri_dim WHERE id = ?`

	// run query
	XOLog(sqlstr, xoapd.ID)
	_, err = db.Exec(sqlstr, xoapd.ID)
	if err != nil {
		return err
	}

	// set deleted
	xoapd._deleted = true

	return nil
}

// XOptAttrPriDimByOptAttrIDPricingDimensionNamePricingDimensionValue retrieves a row from 'x_showroom.x_opt_attr_pri_dim' as a XOptAttrPriDim.
//
// Generated from index 'USER_KEY'.
func XOptAttrPriDimByOptAttrIDPricingDimensionNamePricingDimensionValue(db XODB, optAttrID uint, pricingDimensionName string, pricingDimensionValue string) (*XOptAttrPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_dimension_name, pricing_dimension_value, opt_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_opt_attr_pri_dim ` +
		`WHERE opt_attr_id = ? AND pricing_dimension_name = ? AND pricing_dimension_value = ?`

	// run query
	XOLog(sqlstr, optAttrID, pricingDimensionName, pricingDimensionValue)
	xoapd := XOptAttrPriDim{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, optAttrID, pricingDimensionName, pricingDimensionValue).Scan(&xoapd.ID, &xoapd.PricingDimensionName, &xoapd.PricingDimensionValue, &xoapd.OptAttrID, &xoapd.CreatedBy, &xoapd.UpdatedBy, &xoapd.CreatedAt, &xoapd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xoapd, nil
}

// XOptAttrPriDimsByCreatedBy retrieves a row from 'x_showroom.x_opt_attr_pri_dim' as a XOptAttrPriDim.
//
// Generated from index 'x_opt_attr_pri_dim_created_by_foreign'.
func XOptAttrPriDimsByCreatedBy(db XODB, createdBy uint) ([]*XOptAttrPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_dimension_name, pricing_dimension_value, opt_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_opt_attr_pri_dim ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XOptAttrPriDim{}
	for q.Next() {
		xoapd := XOptAttrPriDim{
			_exists: true,
		}

		// scan
		err = q.Scan(&xoapd.ID, &xoapd.PricingDimensionName, &xoapd.PricingDimensionValue, &xoapd.OptAttrID, &xoapd.CreatedBy, &xoapd.UpdatedBy, &xoapd.CreatedAt, &xoapd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xoapd)
	}

	return res, nil
}

// XOptAttrPriDimByID retrieves a row from 'x_showroom.x_opt_attr_pri_dim' as a XOptAttrPriDim.
//
// Generated from index 'x_opt_attr_pri_dim_id_pkey'.
func XOptAttrPriDimByID(db XODB, id uint) (*XOptAttrPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_dimension_name, pricing_dimension_value, opt_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_opt_attr_pri_dim ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xoapd := XOptAttrPriDim{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xoapd.ID, &xoapd.PricingDimensionName, &xoapd.PricingDimensionValue, &xoapd.OptAttrID, &xoapd.CreatedBy, &xoapd.UpdatedBy, &xoapd.CreatedAt, &xoapd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xoapd, nil
}

// XOptAttrPriDimsByUpdatedBy retrieves a row from 'x_showroom.x_opt_attr_pri_dim' as a XOptAttrPriDim.
//
// Generated from index 'x_opt_attr_pri_dim_updated_by_foreign'.
func XOptAttrPriDimsByUpdatedBy(db XODB, updatedBy uint) ([]*XOptAttrPriDim, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_dimension_name, pricing_dimension_value, opt_attr_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_opt_attr_pri_dim ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XOptAttrPriDim{}
	for q.Next() {
		xoapd := XOptAttrPriDim{
			_exists: true,
		}

		// scan
		err = q.Scan(&xoapd.ID, &xoapd.PricingDimensionName, &xoapd.PricingDimensionValue, &xoapd.OptAttrID, &xoapd.CreatedBy, &xoapd.UpdatedBy, &xoapd.CreatedAt, &xoapd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xoapd)
	}

	return res, nil
}
