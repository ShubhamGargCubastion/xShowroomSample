// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XProdOptionAttr represents a row from 'x_showroom.x_prod_option_attr'.
type XProdOptionAttr struct {
	ID           uint           `json:"id"`             // id
	SeqNum       uint           `json:"seq_num"`        // seq_num
	ProdOptionID uint           `json:"prod_option_id"` // prod_option_id
	OptionAttrID uint           `json:"option_attr_id"` // option_attr_id
	DefaultFlag  string         `json:"default_flag"`   // default_flag
	CreatedBy    uint           `json:"created_by"`     // created_by
	UpdatedBy    uint           `json:"updated_by"`     // updated_by
	CreatedAt    mysql.NullTime `json:"created_at"`     // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XProdOptionAttr exists in the database.
func (xpoa *XProdOptionAttr) Exists() bool {
	return xpoa._exists
}

// Deleted provides information if the XProdOptionAttr has been deleted from the database.
func (xpoa *XProdOptionAttr) Deleted() bool {
	return xpoa._deleted
}

// Insert inserts the XProdOptionAttr to the database.
func (xpoa *XProdOptionAttr) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xpoa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_prod_option_attr (` +
		`seq_num, prod_option_id, option_attr_id, default_flag, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xpoa.SeqNum, xpoa.ProdOptionID, xpoa.OptionAttrID, xpoa.DefaultFlag, xpoa.CreatedBy, xpoa.UpdatedBy, xpoa.CreatedAt, xpoa.UpdatedAt)
	res, err := db.Exec(sqlstr, xpoa.SeqNum, xpoa.ProdOptionID, xpoa.OptionAttrID, xpoa.DefaultFlag, xpoa.CreatedBy, xpoa.UpdatedBy, xpoa.CreatedAt, xpoa.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xpoa.ID = uint(id)
	xpoa._exists = true

	return nil
}

// Update updates the XProdOptionAttr in the database.
func (xpoa *XProdOptionAttr) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpoa._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xpoa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_prod_option_attr SET ` +
		`seq_num = ?, prod_option_id = ?, option_attr_id = ?, default_flag = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xpoa.SeqNum, xpoa.ProdOptionID, xpoa.OptionAttrID, xpoa.DefaultFlag, xpoa.CreatedBy, xpoa.UpdatedBy, xpoa.CreatedAt, xpoa.UpdatedAt, xpoa.ID)
	_, err = db.Exec(sqlstr, xpoa.SeqNum, xpoa.ProdOptionID, xpoa.OptionAttrID, xpoa.DefaultFlag, xpoa.CreatedBy, xpoa.UpdatedBy, xpoa.CreatedAt, xpoa.UpdatedAt, xpoa.ID)
	return err
}

// Save saves the XProdOptionAttr to the database.
func (xpoa *XProdOptionAttr) Save(db XODB) error {
	if xpoa.Exists() {
		return xpoa.Update(db)
	}

	return xpoa.Insert(db)
}

// Delete deletes the XProdOptionAttr from the database.
func (xpoa *XProdOptionAttr) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpoa._exists {
		return nil
	}

	// if deleted, bail
	if xpoa._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_prod_option_attr WHERE id = ?`

	// run query
	XOLog(sqlstr, xpoa.ID)
	_, err = db.Exec(sqlstr, xpoa.ID)
	if err != nil {
		return err
	}

	// set deleted
	xpoa._deleted = true

	return nil
}

// XProdOptionAttrsByCreatedBy retrieves a row from 'x_showroom.x_prod_option_attr' as a XProdOptionAttr.
//
// Generated from index 'x_prod_option_attr_created_by_foreign'.
func XProdOptionAttrsByCreatedBy(db XODB, createdBy uint) ([]*XProdOptionAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, seq_num, prod_option_id, option_attr_id, default_flag, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_option_attr ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdOptionAttr{}
	for q.Next() {
		xpoa := XProdOptionAttr{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpoa.ID, &xpoa.SeqNum, &xpoa.ProdOptionID, &xpoa.OptionAttrID, &xpoa.DefaultFlag, &xpoa.CreatedBy, &xpoa.UpdatedBy, &xpoa.CreatedAt, &xpoa.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpoa)
	}

	return res, nil
}

// XProdOptionAttrByID retrieves a row from 'x_showroom.x_prod_option_attr' as a XProdOptionAttr.
//
// Generated from index 'x_prod_option_attr_id_pkey'.
func XProdOptionAttrByID(db XODB, id uint) (*XProdOptionAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, seq_num, prod_option_id, option_attr_id, default_flag, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_option_attr ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xpoa := XProdOptionAttr{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xpoa.ID, &xpoa.SeqNum, &xpoa.ProdOptionID, &xpoa.OptionAttrID, &xpoa.DefaultFlag, &xpoa.CreatedBy, &xpoa.UpdatedBy, &xpoa.CreatedAt, &xpoa.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xpoa, nil
}

// XProdOptionAttrsByOptionAttrID retrieves a row from 'x_showroom.x_prod_option_attr' as a XProdOptionAttr.
//
// Generated from index 'x_prod_option_attr_option_attr_id_foreign'.
func XProdOptionAttrsByOptionAttrID(db XODB, optionAttrID uint) ([]*XProdOptionAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, seq_num, prod_option_id, option_attr_id, default_flag, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_option_attr ` +
		`WHERE option_attr_id = ?`

	// run query
	XOLog(sqlstr, optionAttrID)
	q, err := db.Query(sqlstr, optionAttrID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdOptionAttr{}
	for q.Next() {
		xpoa := XProdOptionAttr{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpoa.ID, &xpoa.SeqNum, &xpoa.ProdOptionID, &xpoa.OptionAttrID, &xpoa.DefaultFlag, &xpoa.CreatedBy, &xpoa.UpdatedBy, &xpoa.CreatedAt, &xpoa.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpoa)
	}

	return res, nil
}

// XProdOptionAttrByProdOptionIDOptionAttrID retrieves a row from 'x_showroom.x_prod_option_attr' as a XProdOptionAttr.
//
// Generated from index 'x_prod_option_attr_prod_option_id_option_attr_id_unique'.
func XProdOptionAttrByProdOptionIDOptionAttrID(db XODB, prodOptionID uint, optionAttrID uint) (*XProdOptionAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, seq_num, prod_option_id, option_attr_id, default_flag, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_option_attr ` +
		`WHERE prod_option_id = ? AND option_attr_id = ?`

	// run query
	XOLog(sqlstr, prodOptionID, optionAttrID)
	xpoa := XProdOptionAttr{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, prodOptionID, optionAttrID).Scan(&xpoa.ID, &xpoa.SeqNum, &xpoa.ProdOptionID, &xpoa.OptionAttrID, &xpoa.DefaultFlag, &xpoa.CreatedBy, &xpoa.UpdatedBy, &xpoa.CreatedAt, &xpoa.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xpoa, nil
}

// XProdOptionAttrsByUpdatedBy retrieves a row from 'x_showroom.x_prod_option_attr' as a XProdOptionAttr.
//
// Generated from index 'x_prod_option_attr_updated_by_foreign'.
func XProdOptionAttrsByUpdatedBy(db XODB, updatedBy uint) ([]*XProdOptionAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, seq_num, prod_option_id, option_attr_id, default_flag, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_option_attr ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdOptionAttr{}
	for q.Next() {
		xpoa := XProdOptionAttr{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpoa.ID, &xpoa.SeqNum, &xpoa.ProdOptionID, &xpoa.OptionAttrID, &xpoa.DefaultFlag, &xpoa.CreatedBy, &xpoa.UpdatedBy, &xpoa.CreatedAt, &xpoa.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpoa)
	}

	return res, nil
}
