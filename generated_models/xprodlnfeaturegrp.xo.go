// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XProdLnFeatureGrp represents a row from 'x_showroom.x_prod_ln_feature_grp'.
type XProdLnFeatureGrp struct {
	ID          uint           `json:"id"`           // id
	Name        string         `json:"name"`         // name
	DisplayName string         `json:"display_name"` // display_name
	SeqNum      uint           `json:"seq_num"`      // seq_num
	ParID       uint           `json:"par_id"`       // par_id
	CreatedBy   uint           `json:"created_by"`   // created_by
	UpdatedBy   uint           `json:"updated_by"`   // updated_by
	CreatedAt   mysql.NullTime `json:"created_at"`   // created_at
	UpdatedAt   mysql.NullTime `json:"updated_at"`   // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XProdLnFeatureGrp exists in the database.
func (xplfg *XProdLnFeatureGrp) Exists() bool {
	return xplfg._exists
}

// Deleted provides information if the XProdLnFeatureGrp has been deleted from the database.
func (xplfg *XProdLnFeatureGrp) Deleted() bool {
	return xplfg._deleted
}

// Insert inserts the XProdLnFeatureGrp to the database.
func (xplfg *XProdLnFeatureGrp) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xplfg._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_prod_ln_feature_grp (` +
		`name, display_name, seq_num, par_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xplfg.Name, xplfg.DisplayName, xplfg.SeqNum, xplfg.ParID, xplfg.CreatedBy, xplfg.UpdatedBy, xplfg.CreatedAt, xplfg.UpdatedAt)
	res, err := db.Exec(sqlstr, xplfg.Name, xplfg.DisplayName, xplfg.SeqNum, xplfg.ParID, xplfg.CreatedBy, xplfg.UpdatedBy, xplfg.CreatedAt, xplfg.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xplfg.ID = uint(id)
	xplfg._exists = true

	return nil
}

// Update updates the XProdLnFeatureGrp in the database.
func (xplfg *XProdLnFeatureGrp) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xplfg._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xplfg._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_prod_ln_feature_grp SET ` +
		`name = ?, display_name = ?, seq_num = ?, par_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xplfg.Name, xplfg.DisplayName, xplfg.SeqNum, xplfg.ParID, xplfg.CreatedBy, xplfg.UpdatedBy, xplfg.CreatedAt, xplfg.UpdatedAt, xplfg.ID)
	_, err = db.Exec(sqlstr, xplfg.Name, xplfg.DisplayName, xplfg.SeqNum, xplfg.ParID, xplfg.CreatedBy, xplfg.UpdatedBy, xplfg.CreatedAt, xplfg.UpdatedAt, xplfg.ID)
	return err
}

// Save saves the XProdLnFeatureGrp to the database.
func (xplfg *XProdLnFeatureGrp) Save(db XODB) error {
	if xplfg.Exists() {
		return xplfg.Update(db)
	}

	return xplfg.Insert(db)
}

// Delete deletes the XProdLnFeatureGrp from the database.
func (xplfg *XProdLnFeatureGrp) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xplfg._exists {
		return nil
	}

	// if deleted, bail
	if xplfg._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_prod_ln_feature_grp WHERE id = ?`

	// run query
	XOLog(sqlstr, xplfg.ID)
	_, err = db.Exec(sqlstr, xplfg.ID)
	if err != nil {
		return err
	}

	// set deleted
	xplfg._deleted = true

	return nil
}

// XProdLnFeatureGrpsByCreatedBy retrieves a row from 'x_showroom.x_prod_ln_feature_grp' as a XProdLnFeatureGrp.
//
// Generated from index 'x_prod_ln_feature_grp_created_by_foreign'.
func XProdLnFeatureGrpsByCreatedBy(db XODB, createdBy uint) ([]*XProdLnFeatureGrp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_ln_feature_grp ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdLnFeatureGrp{}
	for q.Next() {
		xplfg := XProdLnFeatureGrp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xplfg.ID, &xplfg.Name, &xplfg.DisplayName, &xplfg.SeqNum, &xplfg.ParID, &xplfg.CreatedBy, &xplfg.UpdatedBy, &xplfg.CreatedAt, &xplfg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xplfg)
	}

	return res, nil
}

// XProdLnFeatureGrpByID retrieves a row from 'x_showroom.x_prod_ln_feature_grp' as a XProdLnFeatureGrp.
//
// Generated from index 'x_prod_ln_feature_grp_id_pkey'.
func XProdLnFeatureGrpByID(db XODB, id uint) (*XProdLnFeatureGrp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_ln_feature_grp ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xplfg := XProdLnFeatureGrp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xplfg.ID, &xplfg.Name, &xplfg.DisplayName, &xplfg.SeqNum, &xplfg.ParID, &xplfg.CreatedBy, &xplfg.UpdatedBy, &xplfg.CreatedAt, &xplfg.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xplfg, nil
}

// XProdLnFeatureGrpsByParID retrieves a row from 'x_showroom.x_prod_ln_feature_grp' as a XProdLnFeatureGrp.
//
// Generated from index 'x_prod_ln_feature_grp_par_id_foreign'.
func XProdLnFeatureGrpsByParID(db XODB, parID uint) ([]*XProdLnFeatureGrp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_ln_feature_grp ` +
		`WHERE par_id = ?`

	// run query
	XOLog(sqlstr, parID)
	q, err := db.Query(sqlstr, parID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdLnFeatureGrp{}
	for q.Next() {
		xplfg := XProdLnFeatureGrp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xplfg.ID, &xplfg.Name, &xplfg.DisplayName, &xplfg.SeqNum, &xplfg.ParID, &xplfg.CreatedBy, &xplfg.UpdatedBy, &xplfg.CreatedAt, &xplfg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xplfg)
	}

	return res, nil
}

// XProdLnFeatureGrpsByUpdatedBy retrieves a row from 'x_showroom.x_prod_ln_feature_grp' as a XProdLnFeatureGrp.
//
// Generated from index 'x_prod_ln_feature_grp_updated_by_foreign'.
func XProdLnFeatureGrpsByUpdatedBy(db XODB, updatedBy uint) ([]*XProdLnFeatureGrp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_ln_feature_grp ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdLnFeatureGrp{}
	for q.Next() {
		xplfg := XProdLnFeatureGrp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xplfg.ID, &xplfg.Name, &xplfg.DisplayName, &xplfg.SeqNum, &xplfg.ParID, &xplfg.CreatedBy, &xplfg.UpdatedBy, &xplfg.CreatedAt, &xplfg.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xplfg)
	}

	return res, nil
}

// XProdLnFeatureGrpByNameParID retrieves a row from 'x_showroom.x_prod_ln_feature_grp' as a XProdLnFeatureGrp.
//
// Generated from index 'x_unique_key_1'.
func XProdLnFeatureGrpByNameParID(db XODB, name string, parID uint) (*XProdLnFeatureGrp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_ln_feature_grp ` +
		`WHERE name = ? AND par_id = ?`

	// run query
	XOLog(sqlstr, name, parID)
	xplfg := XProdLnFeatureGrp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, parID).Scan(&xplfg.ID, &xplfg.Name, &xplfg.DisplayName, &xplfg.SeqNum, &xplfg.ParID, &xplfg.CreatedBy, &xplfg.UpdatedBy, &xplfg.CreatedAt, &xplfg.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xplfg, nil
}
