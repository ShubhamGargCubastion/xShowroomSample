// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XMasterRelease represents a row from 'x_showroom.x_master_release'.
type XMasterRelease struct {
	ID            uint           `json:"id"`              // id
	MasterTypeCd  string         `json:"master_type_cd"`  // master_type_cd
	ReleaseTypeCd string         `json:"release_type_cd"` // release_type_cd
	VersionNum    int            `json:"version_num"`     // version_num
	OrgID         uint           `json:"org_id"`          // org_id
	CreatedBy     uint           `json:"created_by"`      // created_by
	UpdatedBy     uint           `json:"updated_by"`      // updated_by
	CreatedAt     mysql.NullTime `json:"created_at"`      // created_at
	UpdatedAt     mysql.NullTime `json:"updated_at"`      // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XMasterRelease exists in the database.
func (xmr *XMasterRelease) Exists() bool {
	return xmr._exists
}

// Deleted provides information if the XMasterRelease has been deleted from the database.
func (xmr *XMasterRelease) Deleted() bool {
	return xmr._deleted
}

// Insert inserts the XMasterRelease to the database.
func (xmr *XMasterRelease) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xmr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_master_release (` +
		`master_type_cd, release_type_cd, version_num, org_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xmr.MasterTypeCd, xmr.ReleaseTypeCd, xmr.VersionNum, xmr.OrgID, xmr.CreatedBy, xmr.UpdatedBy, xmr.CreatedAt, xmr.UpdatedAt)
	res, err := db.Exec(sqlstr, xmr.MasterTypeCd, xmr.ReleaseTypeCd, xmr.VersionNum, xmr.OrgID, xmr.CreatedBy, xmr.UpdatedBy, xmr.CreatedAt, xmr.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xmr.ID = uint(id)
	xmr._exists = true

	return nil
}

// Update updates the XMasterRelease in the database.
func (xmr *XMasterRelease) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xmr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xmr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_master_release SET ` +
		`master_type_cd = ?, release_type_cd = ?, version_num = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xmr.MasterTypeCd, xmr.ReleaseTypeCd, xmr.VersionNum, xmr.OrgID, xmr.CreatedBy, xmr.UpdatedBy, xmr.CreatedAt, xmr.UpdatedAt, xmr.ID)
	_, err = db.Exec(sqlstr, xmr.MasterTypeCd, xmr.ReleaseTypeCd, xmr.VersionNum, xmr.OrgID, xmr.CreatedBy, xmr.UpdatedBy, xmr.CreatedAt, xmr.UpdatedAt, xmr.ID)
	return err
}

// Save saves the XMasterRelease to the database.
func (xmr *XMasterRelease) Save(db XODB) error {
	if xmr.Exists() {
		return xmr.Update(db)
	}

	return xmr.Insert(db)
}

// Delete deletes the XMasterRelease from the database.
func (xmr *XMasterRelease) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xmr._exists {
		return nil
	}

	// if deleted, bail
	if xmr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_master_release WHERE id = ?`

	// run query
	XOLog(sqlstr, xmr.ID)
	_, err = db.Exec(sqlstr, xmr.ID)
	if err != nil {
		return err
	}

	// set deleted
	xmr._deleted = true

	return nil
}

// XMasterReleasesByCreatedBy retrieves a row from 'x_showroom.x_master_release' as a XMasterRelease.
//
// Generated from index 'x_master_release_created_by_foreign'.
func XMasterReleasesByCreatedBy(db XODB, createdBy uint) ([]*XMasterRelease, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, master_type_cd, release_type_cd, version_num, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_master_release ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XMasterRelease{}
	for q.Next() {
		xmr := XMasterRelease{
			_exists: true,
		}

		// scan
		err = q.Scan(&xmr.ID, &xmr.MasterTypeCd, &xmr.ReleaseTypeCd, &xmr.VersionNum, &xmr.OrgID, &xmr.CreatedBy, &xmr.UpdatedBy, &xmr.CreatedAt, &xmr.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xmr)
	}

	return res, nil
}

// XMasterReleaseByID retrieves a row from 'x_showroom.x_master_release' as a XMasterRelease.
//
// Generated from index 'x_master_release_id_pkey'.
func XMasterReleaseByID(db XODB, id uint) (*XMasterRelease, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, master_type_cd, release_type_cd, version_num, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_master_release ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xmr := XMasterRelease{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xmr.ID, &xmr.MasterTypeCd, &xmr.ReleaseTypeCd, &xmr.VersionNum, &xmr.OrgID, &xmr.CreatedBy, &xmr.UpdatedBy, &xmr.CreatedAt, &xmr.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xmr, nil
}

// XMasterReleasesByOrgID retrieves a row from 'x_showroom.x_master_release' as a XMasterRelease.
//
// Generated from index 'x_master_release_org_id_foreign'.
func XMasterReleasesByOrgID(db XODB, orgID uint) ([]*XMasterRelease, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, master_type_cd, release_type_cd, version_num, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_master_release ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XMasterRelease{}
	for q.Next() {
		xmr := XMasterRelease{
			_exists: true,
		}

		// scan
		err = q.Scan(&xmr.ID, &xmr.MasterTypeCd, &xmr.ReleaseTypeCd, &xmr.VersionNum, &xmr.OrgID, &xmr.CreatedBy, &xmr.UpdatedBy, &xmr.CreatedAt, &xmr.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xmr)
	}

	return res, nil
}

// XMasterReleasesByUpdatedBy retrieves a row from 'x_showroom.x_master_release' as a XMasterRelease.
//
// Generated from index 'x_master_release_updated_by_foreign'.
func XMasterReleasesByUpdatedBy(db XODB, updatedBy uint) ([]*XMasterRelease, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, master_type_cd, release_type_cd, version_num, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_master_release ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XMasterRelease{}
	for q.Next() {
		xmr := XMasterRelease{
			_exists: true,
		}

		// scan
		err = q.Scan(&xmr.ID, &xmr.MasterTypeCd, &xmr.ReleaseTypeCd, &xmr.VersionNum, &xmr.OrgID, &xmr.CreatedBy, &xmr.UpdatedBy, &xmr.CreatedAt, &xmr.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xmr)
	}

	return res, nil
}
