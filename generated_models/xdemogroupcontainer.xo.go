// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XDemoGroupContainer represents a row from 'x_showroom.x_demo_group_container'.
type XDemoGroupContainer struct {
	ID        uint            `json:"id"`         // id
	ParID     sql.NullInt64   `json:"par_id"`     // par_id
	TypeCd    string          `json:"type_cd"`    // type_cd
	Height    sql.NullString  `json:"height"`     // height
	BgColor   sql.NullString  `json:"bg_color"`   // bg_color
	Alpha     sql.NullFloat64 `json:"alpha"`      // alpha
	SeqNum    uint            `json:"seq_num"`    // seq_num
	CreatedAt mysql.NullTime  `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime  `json:"updated_at"` // updated_at
	DemoID    sql.NullInt64   `json:"demo_id"`    // demo_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XDemoGroupContainer exists in the database.
func (xdgc *XDemoGroupContainer) Exists() bool {
	return xdgc._exists
}

// Deleted provides information if the XDemoGroupContainer has been deleted from the database.
func (xdgc *XDemoGroupContainer) Deleted() bool {
	return xdgc._deleted
}

// Insert inserts the XDemoGroupContainer to the database.
func (xdgc *XDemoGroupContainer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xdgc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_demo_group_container (` +
		`par_id, type_cd, height, bg_color, alpha, seq_num, created_at, updated_at, demo_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xdgc.ParID, xdgc.TypeCd, xdgc.Height, xdgc.BgColor, xdgc.Alpha, xdgc.SeqNum, xdgc.CreatedAt, xdgc.UpdatedAt, xdgc.DemoID)
	res, err := db.Exec(sqlstr, xdgc.ParID, xdgc.TypeCd, xdgc.Height, xdgc.BgColor, xdgc.Alpha, xdgc.SeqNum, xdgc.CreatedAt, xdgc.UpdatedAt, xdgc.DemoID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xdgc.ID = uint(id)
	xdgc._exists = true

	return nil
}

// Update updates the XDemoGroupContainer in the database.
func (xdgc *XDemoGroupContainer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xdgc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xdgc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_demo_group_container SET ` +
		`par_id = ?, type_cd = ?, height = ?, bg_color = ?, alpha = ?, seq_num = ?, created_at = ?, updated_at = ?, demo_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xdgc.ParID, xdgc.TypeCd, xdgc.Height, xdgc.BgColor, xdgc.Alpha, xdgc.SeqNum, xdgc.CreatedAt, xdgc.UpdatedAt, xdgc.DemoID, xdgc.ID)
	_, err = db.Exec(sqlstr, xdgc.ParID, xdgc.TypeCd, xdgc.Height, xdgc.BgColor, xdgc.Alpha, xdgc.SeqNum, xdgc.CreatedAt, xdgc.UpdatedAt, xdgc.DemoID, xdgc.ID)
	return err
}

// Save saves the XDemoGroupContainer to the database.
func (xdgc *XDemoGroupContainer) Save(db XODB) error {
	if xdgc.Exists() {
		return xdgc.Update(db)
	}

	return xdgc.Insert(db)
}

// Delete deletes the XDemoGroupContainer from the database.
func (xdgc *XDemoGroupContainer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xdgc._exists {
		return nil
	}

	// if deleted, bail
	if xdgc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_demo_group_container WHERE id = ?`

	// run query
	XOLog(sqlstr, xdgc.ID)
	_, err = db.Exec(sqlstr, xdgc.ID)
	if err != nil {
		return err
	}

	// set deleted
	xdgc._deleted = true

	return nil
}

// XDemoGroupContainersByDemoID retrieves a row from 'x_showroom.x_demo_group_container' as a XDemoGroupContainer.
//
// Generated from index 'x_demo_group_container_demo_id_foreign'.
func XDemoGroupContainersByDemoID(db XODB, demoID sql.NullInt64) ([]*XDemoGroupContainer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, par_id, type_cd, height, bg_color, alpha, seq_num, created_at, updated_at, demo_id ` +
		`FROM x_showroom.x_demo_group_container ` +
		`WHERE demo_id = ?`

	// run query
	XOLog(sqlstr, demoID)
	q, err := db.Query(sqlstr, demoID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroupContainer{}
	for q.Next() {
		xdgc := XDemoGroupContainer{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdgc.ID, &xdgc.ParID, &xdgc.TypeCd, &xdgc.Height, &xdgc.BgColor, &xdgc.Alpha, &xdgc.SeqNum, &xdgc.CreatedAt, &xdgc.UpdatedAt, &xdgc.DemoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdgc)
	}

	return res, nil
}

// XDemoGroupContainerByID retrieves a row from 'x_showroom.x_demo_group_container' as a XDemoGroupContainer.
//
// Generated from index 'x_demo_group_container_id_pkey'.
func XDemoGroupContainerByID(db XODB, id uint) (*XDemoGroupContainer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, par_id, type_cd, height, bg_color, alpha, seq_num, created_at, updated_at, demo_id ` +
		`FROM x_showroom.x_demo_group_container ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xdgc := XDemoGroupContainer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xdgc.ID, &xdgc.ParID, &xdgc.TypeCd, &xdgc.Height, &xdgc.BgColor, &xdgc.Alpha, &xdgc.SeqNum, &xdgc.CreatedAt, &xdgc.UpdatedAt, &xdgc.DemoID)
	if err != nil {
		return nil, err
	}

	return &xdgc, nil
}

// XDemoGroupContainersByParID retrieves a row from 'x_showroom.x_demo_group_container' as a XDemoGroupContainer.
//
// Generated from index 'x_demo_group_container_par_id_foreign'.
func XDemoGroupContainersByParID(db XODB, parID sql.NullInt64) ([]*XDemoGroupContainer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, par_id, type_cd, height, bg_color, alpha, seq_num, created_at, updated_at, demo_id ` +
		`FROM x_showroom.x_demo_group_container ` +
		`WHERE par_id = ?`

	// run query
	XOLog(sqlstr, parID)
	q, err := db.Query(sqlstr, parID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemoGroupContainer{}
	for q.Next() {
		xdgc := XDemoGroupContainer{
			_exists: true,
		}

		// scan
		err = q.Scan(&xdgc.ID, &xdgc.ParID, &xdgc.TypeCd, &xdgc.Height, &xdgc.BgColor, &xdgc.Alpha, &xdgc.SeqNum, &xdgc.CreatedAt, &xdgc.UpdatedAt, &xdgc.DemoID)
		if err != nil {
			return nil, err
		}

		res = append(res, &xdgc)
	}

	return res, nil
}
