// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XPriCompGroupItem represents a row from 'x_showroom.x_pri_comp_group_item'.
type XPriCompGroupItem struct {
	ID              uint           `json:"id"`                  // id
	Name            string         `json:"name"`                // name
	DisplayName     string         `json:"display_name"`        // display_name
	TypeCd          string         `json:"type_cd"`             // type_cd
	PrimaryFlag     string         `json:"primary_flag"`        // primary_flag
	SeqNum          uint           `json:"seq_num"`             // seq_num
	XPriCompGroupID uint           `json:"x_pri_comp_group_id"` // x_pri_comp_group_id
	CreatedBy       uint           `json:"created_by"`          // created_by
	UpdatedBy       uint           `json:"updated_by"`          // updated_by
	CreatedAt       mysql.NullTime `json:"created_at"`          // created_at
	UpdatedAt       mysql.NullTime `json:"updated_at"`          // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XPriCompGroupItem exists in the database.
func (xpcgi *XPriCompGroupItem) Exists() bool {
	return xpcgi._exists
}

// Deleted provides information if the XPriCompGroupItem has been deleted from the database.
func (xpcgi *XPriCompGroupItem) Deleted() bool {
	return xpcgi._deleted
}

// Insert inserts the XPriCompGroupItem to the database.
func (xpcgi *XPriCompGroupItem) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xpcgi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_pri_comp_group_item (` +
		`name, display_name, type_cd, primary_flag, seq_num, x_pri_comp_group_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xpcgi.Name, xpcgi.DisplayName, xpcgi.TypeCd, xpcgi.PrimaryFlag, xpcgi.SeqNum, xpcgi.XPriCompGroupID, xpcgi.CreatedBy, xpcgi.UpdatedBy, xpcgi.CreatedAt, xpcgi.UpdatedAt)
	res, err := db.Exec(sqlstr, xpcgi.Name, xpcgi.DisplayName, xpcgi.TypeCd, xpcgi.PrimaryFlag, xpcgi.SeqNum, xpcgi.XPriCompGroupID, xpcgi.CreatedBy, xpcgi.UpdatedBy, xpcgi.CreatedAt, xpcgi.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xpcgi.ID = uint(id)
	xpcgi._exists = true

	return nil
}

// Update updates the XPriCompGroupItem in the database.
func (xpcgi *XPriCompGroupItem) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpcgi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xpcgi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_pri_comp_group_item SET ` +
		`name = ?, display_name = ?, type_cd = ?, primary_flag = ?, seq_num = ?, x_pri_comp_group_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xpcgi.Name, xpcgi.DisplayName, xpcgi.TypeCd, xpcgi.PrimaryFlag, xpcgi.SeqNum, xpcgi.XPriCompGroupID, xpcgi.CreatedBy, xpcgi.UpdatedBy, xpcgi.CreatedAt, xpcgi.UpdatedAt, xpcgi.ID)
	_, err = db.Exec(sqlstr, xpcgi.Name, xpcgi.DisplayName, xpcgi.TypeCd, xpcgi.PrimaryFlag, xpcgi.SeqNum, xpcgi.XPriCompGroupID, xpcgi.CreatedBy, xpcgi.UpdatedBy, xpcgi.CreatedAt, xpcgi.UpdatedAt, xpcgi.ID)
	return err
}

// Save saves the XPriCompGroupItem to the database.
func (xpcgi *XPriCompGroupItem) Save(db XODB) error {
	if xpcgi.Exists() {
		return xpcgi.Update(db)
	}

	return xpcgi.Insert(db)
}

// Delete deletes the XPriCompGroupItem from the database.
func (xpcgi *XPriCompGroupItem) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xpcgi._exists {
		return nil
	}

	// if deleted, bail
	if xpcgi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_pri_comp_group_item WHERE id = ?`

	// run query
	XOLog(sqlstr, xpcgi.ID)
	_, err = db.Exec(sqlstr, xpcgi.ID)
	if err != nil {
		return err
	}

	// set deleted
	xpcgi._deleted = true

	return nil
}

// XPriCompGroupItemsByCreatedBy retrieves a row from 'x_showroom.x_pri_comp_group_item' as a XPriCompGroupItem.
//
// Generated from index 'x_pri_comp_group_item_created_by_foreign'.
func XPriCompGroupItemsByCreatedBy(db XODB, createdBy uint) ([]*XPriCompGroupItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, primary_flag, seq_num, x_pri_comp_group_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp_group_item ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriCompGroupItem{}
	for q.Next() {
		xpcgi := XPriCompGroupItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpcgi.ID, &xpcgi.Name, &xpcgi.DisplayName, &xpcgi.TypeCd, &xpcgi.PrimaryFlag, &xpcgi.SeqNum, &xpcgi.XPriCompGroupID, &xpcgi.CreatedBy, &xpcgi.UpdatedBy, &xpcgi.CreatedAt, &xpcgi.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpcgi)
	}

	return res, nil
}

// XPriCompGroupItemByID retrieves a row from 'x_showroom.x_pri_comp_group_item' as a XPriCompGroupItem.
//
// Generated from index 'x_pri_comp_group_item_id_pkey'.
func XPriCompGroupItemByID(db XODB, id uint) (*XPriCompGroupItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, primary_flag, seq_num, x_pri_comp_group_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp_group_item ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xpcgi := XPriCompGroupItem{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xpcgi.ID, &xpcgi.Name, &xpcgi.DisplayName, &xpcgi.TypeCd, &xpcgi.PrimaryFlag, &xpcgi.SeqNum, &xpcgi.XPriCompGroupID, &xpcgi.CreatedBy, &xpcgi.UpdatedBy, &xpcgi.CreatedAt, &xpcgi.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xpcgi, nil
}

// XPriCompGroupItemByNameXPriCompGroupID retrieves a row from 'x_showroom.x_pri_comp_group_item' as a XPriCompGroupItem.
//
// Generated from index 'x_pri_comp_group_item_name_x_pri_comp_group_id_unique'.
func XPriCompGroupItemByNameXPriCompGroupID(db XODB, name string, xPriCompGroupID uint) (*XPriCompGroupItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, primary_flag, seq_num, x_pri_comp_group_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp_group_item ` +
		`WHERE name = ? AND x_pri_comp_group_id = ?`

	// run query
	XOLog(sqlstr, name, xPriCompGroupID)
	xpcgi := XPriCompGroupItem{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, xPriCompGroupID).Scan(&xpcgi.ID, &xpcgi.Name, &xpcgi.DisplayName, &xpcgi.TypeCd, &xpcgi.PrimaryFlag, &xpcgi.SeqNum, &xpcgi.XPriCompGroupID, &xpcgi.CreatedBy, &xpcgi.UpdatedBy, &xpcgi.CreatedAt, &xpcgi.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xpcgi, nil
}

// XPriCompGroupItemsByUpdatedBy retrieves a row from 'x_showroom.x_pri_comp_group_item' as a XPriCompGroupItem.
//
// Generated from index 'x_pri_comp_group_item_updated_by_foreign'.
func XPriCompGroupItemsByUpdatedBy(db XODB, updatedBy uint) ([]*XPriCompGroupItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, primary_flag, seq_num, x_pri_comp_group_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp_group_item ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriCompGroupItem{}
	for q.Next() {
		xpcgi := XPriCompGroupItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpcgi.ID, &xpcgi.Name, &xpcgi.DisplayName, &xpcgi.TypeCd, &xpcgi.PrimaryFlag, &xpcgi.SeqNum, &xpcgi.XPriCompGroupID, &xpcgi.CreatedBy, &xpcgi.UpdatedBy, &xpcgi.CreatedAt, &xpcgi.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpcgi)
	}

	return res, nil
}

// XPriCompGroupItemsByXPriCompGroupID retrieves a row from 'x_showroom.x_pri_comp_group_item' as a XPriCompGroupItem.
//
// Generated from index 'x_pri_comp_group_item_x_pri_comp_group_id_foreign'.
func XPriCompGroupItemsByXPriCompGroupID(db XODB, xPriCompGroupID uint) ([]*XPriCompGroupItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, type_cd, primary_flag, seq_num, x_pri_comp_group_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_pri_comp_group_item ` +
		`WHERE x_pri_comp_group_id = ?`

	// run query
	XOLog(sqlstr, xPriCompGroupID)
	q, err := db.Query(sqlstr, xPriCompGroupID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XPriCompGroupItem{}
	for q.Next() {
		xpcgi := XPriCompGroupItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&xpcgi.ID, &xpcgi.Name, &xpcgi.DisplayName, &xpcgi.TypeCd, &xpcgi.PrimaryFlag, &xpcgi.SeqNum, &xpcgi.XPriCompGroupID, &xpcgi.CreatedBy, &xpcgi.UpdatedBy, &xpcgi.CreatedAt, &xpcgi.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xpcgi)
	}

	return res, nil
}
