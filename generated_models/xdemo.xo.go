// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XDemo represents a row from 'x_showroom.x_demo'.
type XDemo struct {
	ID           uint           `json:"id"`            // id
	Name         string         `json:"name"`          // name
	DisplayName  string         `json:"display_name"`  // display_name
	ActiveFlag   string         `json:"active_flag"`   // active_flag
	TemplateFlag string         `json:"template_flag"` // template_flag
	CategoryID   sql.NullInt64  `json:"category_id"`   // category_id
	AttID        sql.NullInt64  `json:"att_id"`        // att_id
	OrgID        uint           `json:"org_id"`        // org_id
	CreatedBy    uint           `json:"created_by"`    // created_by
	UpdatedBy    uint           `json:"updated_by"`    // updated_by
	CreatedAt    mysql.NullTime `json:"created_at"`    // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`    // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XDemo exists in the database.
func (xd *XDemo) Exists() bool {
	return xd._exists
}

// Deleted provides information if the XDemo has been deleted from the database.
func (xd *XDemo) Deleted() bool {
	return xd._deleted
}

// Insert inserts the XDemo to the database.
func (xd *XDemo) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_demo (` +
		`name, display_name, active_flag, template_flag, category_id, att_id, org_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xd.Name, xd.DisplayName, xd.ActiveFlag, xd.TemplateFlag, xd.CategoryID, xd.AttID, xd.OrgID, xd.CreatedBy, xd.UpdatedBy, xd.CreatedAt, xd.UpdatedAt)
	res, err := db.Exec(sqlstr, xd.Name, xd.DisplayName, xd.ActiveFlag, xd.TemplateFlag, xd.CategoryID, xd.AttID, xd.OrgID, xd.CreatedBy, xd.UpdatedBy, xd.CreatedAt, xd.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xd.ID = uint(id)
	xd._exists = true

	return nil
}

// Update updates the XDemo in the database.
func (xd *XDemo) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_demo SET ` +
		`name = ?, display_name = ?, active_flag = ?, template_flag = ?, category_id = ?, att_id = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xd.Name, xd.DisplayName, xd.ActiveFlag, xd.TemplateFlag, xd.CategoryID, xd.AttID, xd.OrgID, xd.CreatedBy, xd.UpdatedBy, xd.CreatedAt, xd.UpdatedAt, xd.ID)
	_, err = db.Exec(sqlstr, xd.Name, xd.DisplayName, xd.ActiveFlag, xd.TemplateFlag, xd.CategoryID, xd.AttID, xd.OrgID, xd.CreatedBy, xd.UpdatedBy, xd.CreatedAt, xd.UpdatedAt, xd.ID)
	return err
}

// Save saves the XDemo to the database.
func (xd *XDemo) Save(db XODB) error {
	if xd.Exists() {
		return xd.Update(db)
	}

	return xd.Insert(db)
}

// Delete deletes the XDemo from the database.
func (xd *XDemo) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xd._exists {
		return nil
	}

	// if deleted, bail
	if xd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_demo WHERE id = ?`

	// run query
	XOLog(sqlstr, xd.ID)
	_, err = db.Exec(sqlstr, xd.ID)
	if err != nil {
		return err
	}

	// set deleted
	xd._deleted = true

	return nil
}

// XDemosByAttID retrieves a row from 'x_showroom.x_demo' as a XDemo.
//
// Generated from index 'x_demo_att_id_foreign'.
func XDemosByAttID(db XODB, attID sql.NullInt64) ([]*XDemo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, active_flag, template_flag, category_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo ` +
		`WHERE att_id = ?`

	// run query
	XOLog(sqlstr, attID)
	q, err := db.Query(sqlstr, attID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemo{}
	for q.Next() {
		xd := XDemo{
			_exists: true,
		}

		// scan
		err = q.Scan(&xd.ID, &xd.Name, &xd.DisplayName, &xd.ActiveFlag, &xd.TemplateFlag, &xd.CategoryID, &xd.AttID, &xd.OrgID, &xd.CreatedBy, &xd.UpdatedBy, &xd.CreatedAt, &xd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xd)
	}

	return res, nil
}

// XDemosByCategoryID retrieves a row from 'x_showroom.x_demo' as a XDemo.
//
// Generated from index 'x_demo_category_id_foreign'.
func XDemosByCategoryID(db XODB, categoryID sql.NullInt64) ([]*XDemo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, active_flag, template_flag, category_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo ` +
		`WHERE category_id = ?`

	// run query
	XOLog(sqlstr, categoryID)
	q, err := db.Query(sqlstr, categoryID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemo{}
	for q.Next() {
		xd := XDemo{
			_exists: true,
		}

		// scan
		err = q.Scan(&xd.ID, &xd.Name, &xd.DisplayName, &xd.ActiveFlag, &xd.TemplateFlag, &xd.CategoryID, &xd.AttID, &xd.OrgID, &xd.CreatedBy, &xd.UpdatedBy, &xd.CreatedAt, &xd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xd)
	}

	return res, nil
}

// XDemosByCreatedBy retrieves a row from 'x_showroom.x_demo' as a XDemo.
//
// Generated from index 'x_demo_created_by_foreign'.
func XDemosByCreatedBy(db XODB, createdBy uint) ([]*XDemo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, active_flag, template_flag, category_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemo{}
	for q.Next() {
		xd := XDemo{
			_exists: true,
		}

		// scan
		err = q.Scan(&xd.ID, &xd.Name, &xd.DisplayName, &xd.ActiveFlag, &xd.TemplateFlag, &xd.CategoryID, &xd.AttID, &xd.OrgID, &xd.CreatedBy, &xd.UpdatedBy, &xd.CreatedAt, &xd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xd)
	}

	return res, nil
}

// XDemoByID retrieves a row from 'x_showroom.x_demo' as a XDemo.
//
// Generated from index 'x_demo_id_pkey'.
func XDemoByID(db XODB, id uint) (*XDemo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, active_flag, template_flag, category_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xd := XDemo{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xd.ID, &xd.Name, &xd.DisplayName, &xd.ActiveFlag, &xd.TemplateFlag, &xd.CategoryID, &xd.AttID, &xd.OrgID, &xd.CreatedBy, &xd.UpdatedBy, &xd.CreatedAt, &xd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xd, nil
}

// XDemoByNameOrgID retrieves a row from 'x_showroom.x_demo' as a XDemo.
//
// Generated from index 'x_demo_name_org_id_unique'.
func XDemoByNameOrgID(db XODB, name string, orgID uint) (*XDemo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, active_flag, template_flag, category_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo ` +
		`WHERE name = ? AND org_id = ?`

	// run query
	XOLog(sqlstr, name, orgID)
	xd := XDemo{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, orgID).Scan(&xd.ID, &xd.Name, &xd.DisplayName, &xd.ActiveFlag, &xd.TemplateFlag, &xd.CategoryID, &xd.AttID, &xd.OrgID, &xd.CreatedBy, &xd.UpdatedBy, &xd.CreatedAt, &xd.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xd, nil
}

// XDemosByOrgID retrieves a row from 'x_showroom.x_demo' as a XDemo.
//
// Generated from index 'x_demo_org_id_foreign'.
func XDemosByOrgID(db XODB, orgID uint) ([]*XDemo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, active_flag, template_flag, category_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemo{}
	for q.Next() {
		xd := XDemo{
			_exists: true,
		}

		// scan
		err = q.Scan(&xd.ID, &xd.Name, &xd.DisplayName, &xd.ActiveFlag, &xd.TemplateFlag, &xd.CategoryID, &xd.AttID, &xd.OrgID, &xd.CreatedBy, &xd.UpdatedBy, &xd.CreatedAt, &xd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xd)
	}

	return res, nil
}

// XDemosByUpdatedBy retrieves a row from 'x_showroom.x_demo' as a XDemo.
//
// Generated from index 'x_demo_updated_by_foreign'.
func XDemosByUpdatedBy(db XODB, updatedBy uint) ([]*XDemo, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, active_flag, template_flag, category_id, att_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_demo ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XDemo{}
	for q.Next() {
		xd := XDemo{
			_exists: true,
		}

		// scan
		err = q.Scan(&xd.ID, &xd.Name, &xd.DisplayName, &xd.ActiveFlag, &xd.TemplateFlag, &xd.CategoryID, &xd.AttID, &xd.OrgID, &xd.CreatedBy, &xd.UpdatedBy, &xd.CreatedAt, &xd.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xd)
	}

	return res, nil
}
