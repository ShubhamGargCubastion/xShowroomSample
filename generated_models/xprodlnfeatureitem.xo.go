// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XProdLnFeatureItem represents a row from 'x_showroom.x_prod_ln_feature_item'.
type XProdLnFeatureItem struct {
	ID        uint           `json:"id"`         // id
	Name      string         `json:"name"`       // name
	Value     string         `json:"value"`      // value
	SeqNum    uint           `json:"seq_num"`    // seq_num
	ParID     uint           `json:"par_id"`     // par_id
	CreatedBy uint           `json:"created_by"` // created_by
	UpdatedBy uint           `json:"updated_by"` // updated_by
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XProdLnFeatureItem exists in the database.
func (xplfi *XProdLnFeatureItem) Exists() bool {
	return xplfi._exists
}

// Deleted provides information if the XProdLnFeatureItem has been deleted from the database.
func (xplfi *XProdLnFeatureItem) Deleted() bool {
	return xplfi._deleted
}

// Insert inserts the XProdLnFeatureItem to the database.
func (xplfi *XProdLnFeatureItem) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xplfi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_prod_ln_feature_item (` +
		`name, value, seq_num, par_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xplfi.Name, xplfi.Value, xplfi.SeqNum, xplfi.ParID, xplfi.CreatedBy, xplfi.UpdatedBy, xplfi.CreatedAt, xplfi.UpdatedAt)
	res, err := db.Exec(sqlstr, xplfi.Name, xplfi.Value, xplfi.SeqNum, xplfi.ParID, xplfi.CreatedBy, xplfi.UpdatedBy, xplfi.CreatedAt, xplfi.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xplfi.ID = uint(id)
	xplfi._exists = true

	return nil
}

// Update updates the XProdLnFeatureItem in the database.
func (xplfi *XProdLnFeatureItem) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xplfi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xplfi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_prod_ln_feature_item SET ` +
		`name = ?, value = ?, seq_num = ?, par_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xplfi.Name, xplfi.Value, xplfi.SeqNum, xplfi.ParID, xplfi.CreatedBy, xplfi.UpdatedBy, xplfi.CreatedAt, xplfi.UpdatedAt, xplfi.ID)
	_, err = db.Exec(sqlstr, xplfi.Name, xplfi.Value, xplfi.SeqNum, xplfi.ParID, xplfi.CreatedBy, xplfi.UpdatedBy, xplfi.CreatedAt, xplfi.UpdatedAt, xplfi.ID)
	return err
}

// Save saves the XProdLnFeatureItem to the database.
func (xplfi *XProdLnFeatureItem) Save(db XODB) error {
	if xplfi.Exists() {
		return xplfi.Update(db)
	}

	return xplfi.Insert(db)
}

// Delete deletes the XProdLnFeatureItem from the database.
func (xplfi *XProdLnFeatureItem) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xplfi._exists {
		return nil
	}

	// if deleted, bail
	if xplfi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_prod_ln_feature_item WHERE id = ?`

	// run query
	XOLog(sqlstr, xplfi.ID)
	_, err = db.Exec(sqlstr, xplfi.ID)
	if err != nil {
		return err
	}

	// set deleted
	xplfi._deleted = true

	return nil
}

// XProdLnFeatureItemsByCreatedBy retrieves a row from 'x_showroom.x_prod_ln_feature_item' as a XProdLnFeatureItem.
//
// Generated from index 'x_prod_ln_feature_item_created_by_foreign'.
func XProdLnFeatureItemsByCreatedBy(db XODB, createdBy uint) ([]*XProdLnFeatureItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, value, seq_num, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_ln_feature_item ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdLnFeatureItem{}
	for q.Next() {
		xplfi := XProdLnFeatureItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&xplfi.ID, &xplfi.Name, &xplfi.Value, &xplfi.SeqNum, &xplfi.ParID, &xplfi.CreatedBy, &xplfi.UpdatedBy, &xplfi.CreatedAt, &xplfi.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xplfi)
	}

	return res, nil
}

// XProdLnFeatureItemByID retrieves a row from 'x_showroom.x_prod_ln_feature_item' as a XProdLnFeatureItem.
//
// Generated from index 'x_prod_ln_feature_item_id_pkey'.
func XProdLnFeatureItemByID(db XODB, id uint) (*XProdLnFeatureItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, value, seq_num, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_ln_feature_item ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xplfi := XProdLnFeatureItem{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xplfi.ID, &xplfi.Name, &xplfi.Value, &xplfi.SeqNum, &xplfi.ParID, &xplfi.CreatedBy, &xplfi.UpdatedBy, &xplfi.CreatedAt, &xplfi.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xplfi, nil
}

// XProdLnFeatureItemsByParID retrieves a row from 'x_showroom.x_prod_ln_feature_item' as a XProdLnFeatureItem.
//
// Generated from index 'x_prod_ln_feature_item_par_id_foreign'.
func XProdLnFeatureItemsByParID(db XODB, parID uint) ([]*XProdLnFeatureItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, value, seq_num, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_ln_feature_item ` +
		`WHERE par_id = ?`

	// run query
	XOLog(sqlstr, parID)
	q, err := db.Query(sqlstr, parID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdLnFeatureItem{}
	for q.Next() {
		xplfi := XProdLnFeatureItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&xplfi.ID, &xplfi.Name, &xplfi.Value, &xplfi.SeqNum, &xplfi.ParID, &xplfi.CreatedBy, &xplfi.UpdatedBy, &xplfi.CreatedAt, &xplfi.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xplfi)
	}

	return res, nil
}

// XProdLnFeatureItemsByUpdatedBy retrieves a row from 'x_showroom.x_prod_ln_feature_item' as a XProdLnFeatureItem.
//
// Generated from index 'x_prod_ln_feature_item_updated_by_foreign'.
func XProdLnFeatureItemsByUpdatedBy(db XODB, updatedBy uint) ([]*XProdLnFeatureItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, value, seq_num, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_ln_feature_item ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdLnFeatureItem{}
	for q.Next() {
		xplfi := XProdLnFeatureItem{
			_exists: true,
		}

		// scan
		err = q.Scan(&xplfi.ID, &xplfi.Name, &xplfi.Value, &xplfi.SeqNum, &xplfi.ParID, &xplfi.CreatedBy, &xplfi.UpdatedBy, &xplfi.CreatedAt, &xplfi.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xplfi)
	}

	return res, nil
}

// XProdLnFeatureItemByNameParID retrieves a row from 'x_showroom.x_prod_ln_feature_item' as a XProdLnFeatureItem.
//
// Generated from index 'x_unique_key_1'.
func XProdLnFeatureItemByNameParID(db XODB, name string, parID uint) (*XProdLnFeatureItem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, value, seq_num, par_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_ln_feature_item ` +
		`WHERE name = ? AND par_id = ?`

	// run query
	XOLog(sqlstr, name, parID)
	xplfi := XProdLnFeatureItem{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, parID).Scan(&xplfi.ID, &xplfi.Name, &xplfi.Value, &xplfi.SeqNum, &xplfi.ParID, &xplfi.CreatedBy, &xplfi.UpdatedBy, &xplfi.CreatedAt, &xplfi.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xplfi, nil
}
