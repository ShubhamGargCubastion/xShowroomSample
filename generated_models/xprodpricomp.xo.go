// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XProdPriComp represents a row from 'x_showroom.x_prod_pri_comp'.
type XProdPriComp struct {
	ID                    uint           `json:"id"`                      // id
	PricingComponentName  string         `json:"pricing_component_name"`  // pricing_component_name
	PricingComponentType  string         `json:"pricing_component_type"`  // pricing_component_type
	PricingComponentValue float64        `json:"pricing_component_value"` // pricing_component_value
	PrimaryFlag           string         `json:"primary_flag"`            // primary_flag
	ProdID                uint           `json:"prod_id"`                 // prod_id
	ProdPriDimID          uint           `json:"prod_pri_dim_id"`         // prod_pri_dim_id
	CreatedBy             uint           `json:"created_by"`              // created_by
	UpdatedBy             uint           `json:"updated_by"`              // updated_by
	CreatedAt             mysql.NullTime `json:"created_at"`              // created_at
	UpdatedAt             mysql.NullTime `json:"updated_at"`              // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XProdPriComp exists in the database.
func (xppc *XProdPriComp) Exists() bool {
	return xppc._exists
}

// Deleted provides information if the XProdPriComp has been deleted from the database.
func (xppc *XProdPriComp) Deleted() bool {
	return xppc._deleted
}

// Insert inserts the XProdPriComp to the database.
func (xppc *XProdPriComp) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xppc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_prod_pri_comp (` +
		`pricing_component_name, pricing_component_type, pricing_component_value, primary_flag, prod_id, prod_pri_dim_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xppc.PricingComponentName, xppc.PricingComponentType, xppc.PricingComponentValue, xppc.PrimaryFlag, xppc.ProdID, xppc.ProdPriDimID, xppc.CreatedBy, xppc.UpdatedBy, xppc.CreatedAt, xppc.UpdatedAt)
	res, err := db.Exec(sqlstr, xppc.PricingComponentName, xppc.PricingComponentType, xppc.PricingComponentValue, xppc.PrimaryFlag, xppc.ProdID, xppc.ProdPriDimID, xppc.CreatedBy, xppc.UpdatedBy, xppc.CreatedAt, xppc.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xppc.ID = uint(id)
	xppc._exists = true

	return nil
}

// Update updates the XProdPriComp in the database.
func (xppc *XProdPriComp) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xppc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xppc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_prod_pri_comp SET ` +
		`pricing_component_name = ?, pricing_component_type = ?, pricing_component_value = ?, primary_flag = ?, prod_id = ?, prod_pri_dim_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xppc.PricingComponentName, xppc.PricingComponentType, xppc.PricingComponentValue, xppc.PrimaryFlag, xppc.ProdID, xppc.ProdPriDimID, xppc.CreatedBy, xppc.UpdatedBy, xppc.CreatedAt, xppc.UpdatedAt, xppc.ID)
	_, err = db.Exec(sqlstr, xppc.PricingComponentName, xppc.PricingComponentType, xppc.PricingComponentValue, xppc.PrimaryFlag, xppc.ProdID, xppc.ProdPriDimID, xppc.CreatedBy, xppc.UpdatedBy, xppc.CreatedAt, xppc.UpdatedAt, xppc.ID)
	return err
}

// Save saves the XProdPriComp to the database.
func (xppc *XProdPriComp) Save(db XODB) error {
	if xppc.Exists() {
		return xppc.Update(db)
	}

	return xppc.Insert(db)
}

// Delete deletes the XProdPriComp from the database.
func (xppc *XProdPriComp) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xppc._exists {
		return nil
	}

	// if deleted, bail
	if xppc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_prod_pri_comp WHERE id = ?`

	// run query
	XOLog(sqlstr, xppc.ID)
	_, err = db.Exec(sqlstr, xppc.ID)
	if err != nil {
		return err
	}

	// set deleted
	xppc._deleted = true

	return nil
}

// XProdPriCompsByCreatedBy retrieves a row from 'x_showroom.x_prod_pri_comp' as a XProdPriComp.
//
// Generated from index 'x_prod_pri_comp_created_by_foreign'.
func XProdPriCompsByCreatedBy(db XODB, createdBy uint) ([]*XProdPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_component_name, pricing_component_type, pricing_component_value, primary_flag, prod_id, prod_pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_pri_comp ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdPriComp{}
	for q.Next() {
		xppc := XProdPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xppc.ID, &xppc.PricingComponentName, &xppc.PricingComponentType, &xppc.PricingComponentValue, &xppc.PrimaryFlag, &xppc.ProdID, &xppc.ProdPriDimID, &xppc.CreatedBy, &xppc.UpdatedBy, &xppc.CreatedAt, &xppc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xppc)
	}

	return res, nil
}

// XProdPriCompByID retrieves a row from 'x_showroom.x_prod_pri_comp' as a XProdPriComp.
//
// Generated from index 'x_prod_pri_comp_id_pkey'.
func XProdPriCompByID(db XODB, id uint) (*XProdPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_component_name, pricing_component_type, pricing_component_value, primary_flag, prod_id, prod_pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_pri_comp ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xppc := XProdPriComp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xppc.ID, &xppc.PricingComponentName, &xppc.PricingComponentType, &xppc.PricingComponentValue, &xppc.PrimaryFlag, &xppc.ProdID, &xppc.ProdPriDimID, &xppc.CreatedBy, &xppc.UpdatedBy, &xppc.CreatedAt, &xppc.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xppc, nil
}

// XProdPriCompByPricingComponentNameProdPriDimID retrieves a row from 'x_showroom.x_prod_pri_comp' as a XProdPriComp.
//
// Generated from index 'x_prod_pri_comp_pricing_component_name_prod_pri_dim_id_unique'.
func XProdPriCompByPricingComponentNameProdPriDimID(db XODB, pricingComponentName string, prodPriDimID uint) (*XProdPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_component_name, pricing_component_type, pricing_component_value, primary_flag, prod_id, prod_pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_pri_comp ` +
		`WHERE pricing_component_name = ? AND prod_pri_dim_id = ?`

	// run query
	XOLog(sqlstr, pricingComponentName, prodPriDimID)
	xppc := XProdPriComp{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, pricingComponentName, prodPriDimID).Scan(&xppc.ID, &xppc.PricingComponentName, &xppc.PricingComponentType, &xppc.PricingComponentValue, &xppc.PrimaryFlag, &xppc.ProdID, &xppc.ProdPriDimID, &xppc.CreatedBy, &xppc.UpdatedBy, &xppc.CreatedAt, &xppc.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xppc, nil
}

// XProdPriCompsByProdID retrieves a row from 'x_showroom.x_prod_pri_comp' as a XProdPriComp.
//
// Generated from index 'x_prod_pri_comp_prod_id_foreign'.
func XProdPriCompsByProdID(db XODB, prodID uint) ([]*XProdPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_component_name, pricing_component_type, pricing_component_value, primary_flag, prod_id, prod_pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_pri_comp ` +
		`WHERE prod_id = ?`

	// run query
	XOLog(sqlstr, prodID)
	q, err := db.Query(sqlstr, prodID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdPriComp{}
	for q.Next() {
		xppc := XProdPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xppc.ID, &xppc.PricingComponentName, &xppc.PricingComponentType, &xppc.PricingComponentValue, &xppc.PrimaryFlag, &xppc.ProdID, &xppc.ProdPriDimID, &xppc.CreatedBy, &xppc.UpdatedBy, &xppc.CreatedAt, &xppc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xppc)
	}

	return res, nil
}

// XProdPriCompsByProdPriDimID retrieves a row from 'x_showroom.x_prod_pri_comp' as a XProdPriComp.
//
// Generated from index 'x_prod_pri_comp_prod_pri_dim_id_foreign'.
func XProdPriCompsByProdPriDimID(db XODB, prodPriDimID uint) ([]*XProdPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_component_name, pricing_component_type, pricing_component_value, primary_flag, prod_id, prod_pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_pri_comp ` +
		`WHERE prod_pri_dim_id = ?`

	// run query
	XOLog(sqlstr, prodPriDimID)
	q, err := db.Query(sqlstr, prodPriDimID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdPriComp{}
	for q.Next() {
		xppc := XProdPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xppc.ID, &xppc.PricingComponentName, &xppc.PricingComponentType, &xppc.PricingComponentValue, &xppc.PrimaryFlag, &xppc.ProdID, &xppc.ProdPriDimID, &xppc.CreatedBy, &xppc.UpdatedBy, &xppc.CreatedAt, &xppc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xppc)
	}

	return res, nil
}

// XProdPriCompsByUpdatedBy retrieves a row from 'x_showroom.x_prod_pri_comp' as a XProdPriComp.
//
// Generated from index 'x_prod_pri_comp_updated_by_foreign'.
func XProdPriCompsByUpdatedBy(db XODB, updatedBy uint) ([]*XProdPriComp, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, pricing_component_name, pricing_component_type, pricing_component_value, primary_flag, prod_id, prod_pri_dim_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_prod_pri_comp ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XProdPriComp{}
	for q.Next() {
		xppc := XProdPriComp{
			_exists: true,
		}

		// scan
		err = q.Scan(&xppc.ID, &xppc.PricingComponentName, &xppc.PricingComponentType, &xppc.PricingComponentValue, &xppc.PrimaryFlag, &xppc.ProdID, &xppc.ProdPriDimID, &xppc.CreatedBy, &xppc.UpdatedBy, &xppc.CreatedAt, &xppc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xppc)
	}

	return res, nil
}
