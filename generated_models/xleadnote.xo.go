// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XLeadNote represents a row from 'x_showroom.x_lead_notes'.
type XLeadNote struct {
	ID        uint           `json:"id"`         // id
	DescText  string         `json:"desc_text"`  // desc_text
	LeadID    uint           `json:"lead_id"`    // lead_id
	CreatedBy uint           `json:"created_by"` // created_by
	UpdatedBy uint           `json:"updated_by"` // updated_by
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XLeadNote exists in the database.
func (xln *XLeadNote) Exists() bool {
	return xln._exists
}

// Deleted provides information if the XLeadNote has been deleted from the database.
func (xln *XLeadNote) Deleted() bool {
	return xln._deleted
}

// Insert inserts the XLeadNote to the database.
func (xln *XLeadNote) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xln._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_lead_notes (` +
		`desc_text, lead_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xln.DescText, xln.LeadID, xln.CreatedBy, xln.UpdatedBy, xln.CreatedAt, xln.UpdatedAt)
	res, err := db.Exec(sqlstr, xln.DescText, xln.LeadID, xln.CreatedBy, xln.UpdatedBy, xln.CreatedAt, xln.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xln.ID = uint(id)
	xln._exists = true

	return nil
}

// Update updates the XLeadNote in the database.
func (xln *XLeadNote) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xln._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xln._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_lead_notes SET ` +
		`desc_text = ?, lead_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xln.DescText, xln.LeadID, xln.CreatedBy, xln.UpdatedBy, xln.CreatedAt, xln.UpdatedAt, xln.ID)
	_, err = db.Exec(sqlstr, xln.DescText, xln.LeadID, xln.CreatedBy, xln.UpdatedBy, xln.CreatedAt, xln.UpdatedAt, xln.ID)
	return err
}

// Save saves the XLeadNote to the database.
func (xln *XLeadNote) Save(db XODB) error {
	if xln.Exists() {
		return xln.Update(db)
	}

	return xln.Insert(db)
}

// Delete deletes the XLeadNote from the database.
func (xln *XLeadNote) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xln._exists {
		return nil
	}

	// if deleted, bail
	if xln._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_lead_notes WHERE id = ?`

	// run query
	XOLog(sqlstr, xln.ID)
	_, err = db.Exec(sqlstr, xln.ID)
	if err != nil {
		return err
	}

	// set deleted
	xln._deleted = true

	return nil
}

// XLeadNotesByCreatedBy retrieves a row from 'x_showroom.x_lead_notes' as a XLeadNote.
//
// Generated from index 'x_lead_notes_created_by_foreign'.
func XLeadNotesByCreatedBy(db XODB, createdBy uint) ([]*XLeadNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, desc_text, lead_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_notes ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadNote{}
	for q.Next() {
		xln := XLeadNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&xln.ID, &xln.DescText, &xln.LeadID, &xln.CreatedBy, &xln.UpdatedBy, &xln.CreatedAt, &xln.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xln)
	}

	return res, nil
}

// XLeadNoteByID retrieves a row from 'x_showroom.x_lead_notes' as a XLeadNote.
//
// Generated from index 'x_lead_notes_id_pkey'.
func XLeadNoteByID(db XODB, id uint) (*XLeadNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, desc_text, lead_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_notes ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xln := XLeadNote{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xln.ID, &xln.DescText, &xln.LeadID, &xln.CreatedBy, &xln.UpdatedBy, &xln.CreatedAt, &xln.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xln, nil
}

// XLeadNotesByLeadID retrieves a row from 'x_showroom.x_lead_notes' as a XLeadNote.
//
// Generated from index 'x_lead_notes_lead_id_foreign'.
func XLeadNotesByLeadID(db XODB, leadID uint) ([]*XLeadNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, desc_text, lead_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_notes ` +
		`WHERE lead_id = ?`

	// run query
	XOLog(sqlstr, leadID)
	q, err := db.Query(sqlstr, leadID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadNote{}
	for q.Next() {
		xln := XLeadNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&xln.ID, &xln.DescText, &xln.LeadID, &xln.CreatedBy, &xln.UpdatedBy, &xln.CreatedAt, &xln.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xln)
	}

	return res, nil
}

// XLeadNotesByUpdatedBy retrieves a row from 'x_showroom.x_lead_notes' as a XLeadNote.
//
// Generated from index 'x_lead_notes_updated_by_foreign'.
func XLeadNotesByUpdatedBy(db XODB, updatedBy uint) ([]*XLeadNote, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, desc_text, lead_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_notes ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadNote{}
	for q.Next() {
		xln := XLeadNote{
			_exists: true,
		}

		// scan
		err = q.Scan(&xln.ID, &xln.DescText, &xln.LeadID, &xln.CreatedBy, &xln.UpdatedBy, &xln.CreatedAt, &xln.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xln)
	}

	return res, nil
}
