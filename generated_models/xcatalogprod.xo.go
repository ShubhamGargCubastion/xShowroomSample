// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XCatalogProd represents a row from 'x_showroom.x_catalog_prod'.
type XCatalogProd struct {
	ID        uint           `json:"id"`         // id
	SeqNum    uint           `json:"seq_num"`    // seq_num
	ProdID    uint           `json:"prod_id"`    // prod_id
	CatalogID uint           `json:"catalog_id"` // catalog_id
	CreatedBy uint           `json:"created_by"` // created_by
	UpdatedBy uint           `json:"updated_by"` // updated_by
	CreatedAt mysql.NullTime `json:"created_at"` // created_at
	UpdatedAt mysql.NullTime `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XCatalogProd exists in the database.
func (xcp *XCatalogProd) Exists() bool {
	return xcp._exists
}

// Deleted provides information if the XCatalogProd has been deleted from the database.
func (xcp *XCatalogProd) Deleted() bool {
	return xcp._deleted
}

// Insert inserts the XCatalogProd to the database.
func (xcp *XCatalogProd) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xcp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_catalog_prod (` +
		`seq_num, prod_id, catalog_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xcp.SeqNum, xcp.ProdID, xcp.CatalogID, xcp.CreatedBy, xcp.UpdatedBy, xcp.CreatedAt, xcp.UpdatedAt)
	res, err := db.Exec(sqlstr, xcp.SeqNum, xcp.ProdID, xcp.CatalogID, xcp.CreatedBy, xcp.UpdatedBy, xcp.CreatedAt, xcp.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xcp.ID = uint(id)
	xcp._exists = true

	return nil
}

// Update updates the XCatalogProd in the database.
func (xcp *XCatalogProd) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xcp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xcp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_catalog_prod SET ` +
		`seq_num = ?, prod_id = ?, catalog_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xcp.SeqNum, xcp.ProdID, xcp.CatalogID, xcp.CreatedBy, xcp.UpdatedBy, xcp.CreatedAt, xcp.UpdatedAt, xcp.ID)
	_, err = db.Exec(sqlstr, xcp.SeqNum, xcp.ProdID, xcp.CatalogID, xcp.CreatedBy, xcp.UpdatedBy, xcp.CreatedAt, xcp.UpdatedAt, xcp.ID)
	return err
}

// Save saves the XCatalogProd to the database.
func (xcp *XCatalogProd) Save(db XODB) error {
	if xcp.Exists() {
		return xcp.Update(db)
	}

	return xcp.Insert(db)
}

// Delete deletes the XCatalogProd from the database.
func (xcp *XCatalogProd) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xcp._exists {
		return nil
	}

	// if deleted, bail
	if xcp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_catalog_prod WHERE id = ?`

	// run query
	XOLog(sqlstr, xcp.ID)
	_, err = db.Exec(sqlstr, xcp.ID)
	if err != nil {
		return err
	}

	// set deleted
	xcp._deleted = true

	return nil
}

// XCatalogProdsByCatalogID retrieves a row from 'x_showroom.x_catalog_prod' as a XCatalogProd.
//
// Generated from index 'x_catalog_prod_catalog_id_foreign'.
func XCatalogProdsByCatalogID(db XODB, catalogID uint) ([]*XCatalogProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, seq_num, prod_id, catalog_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog_prod ` +
		`WHERE catalog_id = ?`

	// run query
	XOLog(sqlstr, catalogID)
	q, err := db.Query(sqlstr, catalogID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCatalogProd{}
	for q.Next() {
		xcp := XCatalogProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xcp.ID, &xcp.SeqNum, &xcp.ProdID, &xcp.CatalogID, &xcp.CreatedBy, &xcp.UpdatedBy, &xcp.CreatedAt, &xcp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xcp)
	}

	return res, nil
}

// XCatalogProdsByCreatedBy retrieves a row from 'x_showroom.x_catalog_prod' as a XCatalogProd.
//
// Generated from index 'x_catalog_prod_created_by_foreign'.
func XCatalogProdsByCreatedBy(db XODB, createdBy uint) ([]*XCatalogProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, seq_num, prod_id, catalog_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog_prod ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCatalogProd{}
	for q.Next() {
		xcp := XCatalogProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xcp.ID, &xcp.SeqNum, &xcp.ProdID, &xcp.CatalogID, &xcp.CreatedBy, &xcp.UpdatedBy, &xcp.CreatedAt, &xcp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xcp)
	}

	return res, nil
}

// XCatalogProdByID retrieves a row from 'x_showroom.x_catalog_prod' as a XCatalogProd.
//
// Generated from index 'x_catalog_prod_id_pkey'.
func XCatalogProdByID(db XODB, id uint) (*XCatalogProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, seq_num, prod_id, catalog_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog_prod ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xcp := XCatalogProd{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xcp.ID, &xcp.SeqNum, &xcp.ProdID, &xcp.CatalogID, &xcp.CreatedBy, &xcp.UpdatedBy, &xcp.CreatedAt, &xcp.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xcp, nil
}

// XCatalogProdByProdIDCatalogID retrieves a row from 'x_showroom.x_catalog_prod' as a XCatalogProd.
//
// Generated from index 'x_catalog_prod_prod_id_catalog_id_unique'.
func XCatalogProdByProdIDCatalogID(db XODB, prodID uint, catalogID uint) (*XCatalogProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, seq_num, prod_id, catalog_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog_prod ` +
		`WHERE prod_id = ? AND catalog_id = ?`

	// run query
	XOLog(sqlstr, prodID, catalogID)
	xcp := XCatalogProd{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, prodID, catalogID).Scan(&xcp.ID, &xcp.SeqNum, &xcp.ProdID, &xcp.CatalogID, &xcp.CreatedBy, &xcp.UpdatedBy, &xcp.CreatedAt, &xcp.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xcp, nil
}

// XCatalogProdsByUpdatedBy retrieves a row from 'x_showroom.x_catalog_prod' as a XCatalogProd.
//
// Generated from index 'x_catalog_prod_updated_by_foreign'.
func XCatalogProdsByUpdatedBy(db XODB, updatedBy uint) ([]*XCatalogProd, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, seq_num, prod_id, catalog_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog_prod ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCatalogProd{}
	for q.Next() {
		xcp := XCatalogProd{
			_exists: true,
		}

		// scan
		err = q.Scan(&xcp.ID, &xcp.SeqNum, &xcp.ProdID, &xcp.CatalogID, &xcp.CreatedBy, &xcp.UpdatedBy, &xcp.CreatedAt, &xcp.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xcp)
	}

	return res, nil
}
