// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XCatalog represents a row from 'x_showroom.x_catalog'.
type XCatalog struct {
	ID              uint           `json:"id"`                // id
	Name            string         `json:"name"`              // name
	DisplayName     string         `json:"display_name"`      // display_name
	SeqNum          int            `json:"seq_num"`           // seq_num
	TypeCd          string         `json:"type_cd"`           // type_cd
	ParCatalogID    sql.NullInt64  `json:"par_catalog_id"`    // par_catalog_id
	MasterCatalogID sql.NullInt64  `json:"master_catalog_id"` // master_catalog_id
	ActiveFlag      string         `json:"active_flag"`       // active_flag
	AttID           sql.NullInt64  `json:"att_id"`            // att_id
	DemoID          sql.NullInt64  `json:"demo_id"`           // demo_id
	OrgID           uint           `json:"org_id"`            // org_id
	CreatedBy       uint           `json:"created_by"`        // created_by
	UpdatedBy       uint           `json:"updated_by"`        // updated_by
	CreatedAt       mysql.NullTime `json:"created_at"`        // created_at
	UpdatedAt       mysql.NullTime `json:"updated_at"`        // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XCatalog exists in the database.
func (xc *XCatalog) Exists() bool {
	return xc._exists
}

// Deleted provides information if the XCatalog has been deleted from the database.
func (xc *XCatalog) Deleted() bool {
	return xc._deleted
}

// Insert inserts the XCatalog to the database.
func (xc *XCatalog) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_catalog (` +
		`name, display_name, seq_num, type_cd, par_catalog_id, master_catalog_id, active_flag, att_id, demo_id, org_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xc.Name, xc.DisplayName, xc.SeqNum, xc.TypeCd, xc.ParCatalogID, xc.MasterCatalogID, xc.ActiveFlag, xc.AttID, xc.DemoID, xc.OrgID, xc.CreatedBy, xc.UpdatedBy, xc.CreatedAt, xc.UpdatedAt)
	res, err := db.Exec(sqlstr, xc.Name, xc.DisplayName, xc.SeqNum, xc.TypeCd, xc.ParCatalogID, xc.MasterCatalogID, xc.ActiveFlag, xc.AttID, xc.DemoID, xc.OrgID, xc.CreatedBy, xc.UpdatedBy, xc.CreatedAt, xc.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xc.ID = uint(id)
	xc._exists = true

	return nil
}

// Update updates the XCatalog in the database.
func (xc *XCatalog) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_catalog SET ` +
		`name = ?, display_name = ?, seq_num = ?, type_cd = ?, par_catalog_id = ?, master_catalog_id = ?, active_flag = ?, att_id = ?, demo_id = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xc.Name, xc.DisplayName, xc.SeqNum, xc.TypeCd, xc.ParCatalogID, xc.MasterCatalogID, xc.ActiveFlag, xc.AttID, xc.DemoID, xc.OrgID, xc.CreatedBy, xc.UpdatedBy, xc.CreatedAt, xc.UpdatedAt, xc.ID)
	_, err = db.Exec(sqlstr, xc.Name, xc.DisplayName, xc.SeqNum, xc.TypeCd, xc.ParCatalogID, xc.MasterCatalogID, xc.ActiveFlag, xc.AttID, xc.DemoID, xc.OrgID, xc.CreatedBy, xc.UpdatedBy, xc.CreatedAt, xc.UpdatedAt, xc.ID)
	return err
}

// Save saves the XCatalog to the database.
func (xc *XCatalog) Save(db XODB) error {
	if xc.Exists() {
		return xc.Update(db)
	}

	return xc.Insert(db)
}

// Delete deletes the XCatalog from the database.
func (xc *XCatalog) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xc._exists {
		return nil
	}

	// if deleted, bail
	if xc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_catalog WHERE id = ?`

	// run query
	XOLog(sqlstr, xc.ID)
	_, err = db.Exec(sqlstr, xc.ID)
	if err != nil {
		return err
	}

	// set deleted
	xc._deleted = true

	return nil
}

// XCatalogsByAttID retrieves a row from 'x_showroom.x_catalog' as a XCatalog.
//
// Generated from index 'x_catalog_att_id_foreign'.
func XCatalogsByAttID(db XODB, attID sql.NullInt64) ([]*XCatalog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, type_cd, par_catalog_id, master_catalog_id, active_flag, att_id, demo_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog ` +
		`WHERE att_id = ?`

	// run query
	XOLog(sqlstr, attID)
	q, err := db.Query(sqlstr, attID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCatalog{}
	for q.Next() {
		xc := XCatalog{
			_exists: true,
		}

		// scan
		err = q.Scan(&xc.ID, &xc.Name, &xc.DisplayName, &xc.SeqNum, &xc.TypeCd, &xc.ParCatalogID, &xc.MasterCatalogID, &xc.ActiveFlag, &xc.AttID, &xc.DemoID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xc)
	}

	return res, nil
}

// XCatalogsByCreatedBy retrieves a row from 'x_showroom.x_catalog' as a XCatalog.
//
// Generated from index 'x_catalog_created_by_foreign'.
func XCatalogsByCreatedBy(db XODB, createdBy uint) ([]*XCatalog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, type_cd, par_catalog_id, master_catalog_id, active_flag, att_id, demo_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCatalog{}
	for q.Next() {
		xc := XCatalog{
			_exists: true,
		}

		// scan
		err = q.Scan(&xc.ID, &xc.Name, &xc.DisplayName, &xc.SeqNum, &xc.TypeCd, &xc.ParCatalogID, &xc.MasterCatalogID, &xc.ActiveFlag, &xc.AttID, &xc.DemoID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xc)
	}

	return res, nil
}

// XCatalogsByDemoID retrieves a row from 'x_showroom.x_catalog' as a XCatalog.
//
// Generated from index 'x_catalog_demo_id_foreign'.
func XCatalogsByDemoID(db XODB, demoID sql.NullInt64) ([]*XCatalog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, type_cd, par_catalog_id, master_catalog_id, active_flag, att_id, demo_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog ` +
		`WHERE demo_id = ?`

	// run query
	XOLog(sqlstr, demoID)
	q, err := db.Query(sqlstr, demoID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCatalog{}
	for q.Next() {
		xc := XCatalog{
			_exists: true,
		}

		// scan
		err = q.Scan(&xc.ID, &xc.Name, &xc.DisplayName, &xc.SeqNum, &xc.TypeCd, &xc.ParCatalogID, &xc.MasterCatalogID, &xc.ActiveFlag, &xc.AttID, &xc.DemoID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xc)
	}

	return res, nil
}

// XCatalogByID retrieves a row from 'x_showroom.x_catalog' as a XCatalog.
//
// Generated from index 'x_catalog_id_pkey'.
func XCatalogByID(db XODB, id uint) (*XCatalog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, type_cd, par_catalog_id, master_catalog_id, active_flag, att_id, demo_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xc := XCatalog{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xc.ID, &xc.Name, &xc.DisplayName, &xc.SeqNum, &xc.TypeCd, &xc.ParCatalogID, &xc.MasterCatalogID, &xc.ActiveFlag, &xc.AttID, &xc.DemoID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xc, nil
}

// XCatalogsByMasterCatalogID retrieves a row from 'x_showroom.x_catalog' as a XCatalog.
//
// Generated from index 'x_catalog_master_catalog_id_foreign'.
func XCatalogsByMasterCatalogID(db XODB, masterCatalogID sql.NullInt64) ([]*XCatalog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, type_cd, par_catalog_id, master_catalog_id, active_flag, att_id, demo_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog ` +
		`WHERE master_catalog_id = ?`

	// run query
	XOLog(sqlstr, masterCatalogID)
	q, err := db.Query(sqlstr, masterCatalogID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCatalog{}
	for q.Next() {
		xc := XCatalog{
			_exists: true,
		}

		// scan
		err = q.Scan(&xc.ID, &xc.Name, &xc.DisplayName, &xc.SeqNum, &xc.TypeCd, &xc.ParCatalogID, &xc.MasterCatalogID, &xc.ActiveFlag, &xc.AttID, &xc.DemoID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xc)
	}

	return res, nil
}

// XCatalogByNameOrgIDParCatalogID retrieves a row from 'x_showroom.x_catalog' as a XCatalog.
//
// Generated from index 'x_catalog_name_org_id_par_catalog_id_unique'.
func XCatalogByNameOrgIDParCatalogID(db XODB, name string, orgID uint, parCatalogID sql.NullInt64) (*XCatalog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, type_cd, par_catalog_id, master_catalog_id, active_flag, att_id, demo_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog ` +
		`WHERE name = ? AND org_id = ? AND par_catalog_id = ?`

	// run query
	XOLog(sqlstr, name, orgID, parCatalogID)
	xc := XCatalog{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, orgID, parCatalogID).Scan(&xc.ID, &xc.Name, &xc.DisplayName, &xc.SeqNum, &xc.TypeCd, &xc.ParCatalogID, &xc.MasterCatalogID, &xc.ActiveFlag, &xc.AttID, &xc.DemoID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xc, nil
}

// XCatalogsByOrgID retrieves a row from 'x_showroom.x_catalog' as a XCatalog.
//
// Generated from index 'x_catalog_org_id_foreign'.
func XCatalogsByOrgID(db XODB, orgID uint) ([]*XCatalog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, type_cd, par_catalog_id, master_catalog_id, active_flag, att_id, demo_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCatalog{}
	for q.Next() {
		xc := XCatalog{
			_exists: true,
		}

		// scan
		err = q.Scan(&xc.ID, &xc.Name, &xc.DisplayName, &xc.SeqNum, &xc.TypeCd, &xc.ParCatalogID, &xc.MasterCatalogID, &xc.ActiveFlag, &xc.AttID, &xc.DemoID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xc)
	}

	return res, nil
}

// XCatalogsByParCatalogID retrieves a row from 'x_showroom.x_catalog' as a XCatalog.
//
// Generated from index 'x_catalog_par_catalog_id_foreign'.
func XCatalogsByParCatalogID(db XODB, parCatalogID sql.NullInt64) ([]*XCatalog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, type_cd, par_catalog_id, master_catalog_id, active_flag, att_id, demo_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog ` +
		`WHERE par_catalog_id = ?`

	// run query
	XOLog(sqlstr, parCatalogID)
	q, err := db.Query(sqlstr, parCatalogID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCatalog{}
	for q.Next() {
		xc := XCatalog{
			_exists: true,
		}

		// scan
		err = q.Scan(&xc.ID, &xc.Name, &xc.DisplayName, &xc.SeqNum, &xc.TypeCd, &xc.ParCatalogID, &xc.MasterCatalogID, &xc.ActiveFlag, &xc.AttID, &xc.DemoID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xc)
	}

	return res, nil
}

// XCatalogsByUpdatedBy retrieves a row from 'x_showroom.x_catalog' as a XCatalog.
//
// Generated from index 'x_catalog_updated_by_foreign'.
func XCatalogsByUpdatedBy(db XODB, updatedBy uint) ([]*XCatalog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, type_cd, par_catalog_id, master_catalog_id, active_flag, att_id, demo_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_catalog ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XCatalog{}
	for q.Next() {
		xc := XCatalog{
			_exists: true,
		}

		// scan
		err = q.Scan(&xc.ID, &xc.Name, &xc.DisplayName, &xc.SeqNum, &xc.TypeCd, &xc.ParCatalogID, &xc.MasterCatalogID, &xc.ActiveFlag, &xc.AttID, &xc.DemoID, &xc.OrgID, &xc.CreatedBy, &xc.UpdatedBy, &xc.CreatedAt, &xc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xc)
	}

	return res, nil
}
