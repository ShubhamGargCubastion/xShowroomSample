// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XUser represents a row from 'x_showroom.x_user'.
type XUser struct {
	ID             uint           `json:"id"`              // id
	FirstName      string         `json:"first_name"`      // first_name
	LastName       string         `json:"last_name"`       // last_name
	Email          string         `json:"email"`           // email
	PhoneNumber    sql.NullString `json:"phone_number"`    // phone_number
	AddressLine1   sql.NullString `json:"address_line_1"`  // address_line_1
	AddressLine2   sql.NullString `json:"address_line_2"`  // address_line_2
	City           sql.NullString `json:"city"`            // city
	State          sql.NullString `json:"state"`           // state
	Zipcode        sql.NullString `json:"zipcode"`         // zipcode
	Country        sql.NullString `json:"country"`         // country
	ActiveFlag     string         `json:"active_flag"`     // active_flag
	UserType       string         `json:"user_type"`       // user_type
	JoiningDt      mysql.NullTime `json:"joining_dt"`      // joining_dt
	AttachmentName sql.NullString `json:"attachment_name"` // attachment_name
	Password       string         `json:"password"`        // password
	RememberToken  sql.NullString `json:"remember_token"`  // remember_token
	PostnID        sql.NullInt64  `json:"postn_id"`        // postn_id
	OrgID          sql.NullInt64  `json:"org_id"`          // org_id
	CreatedBy      sql.NullInt64  `json:"created_by"`      // created_by
	UpdatedBy      sql.NullInt64  `json:"updated_by"`      // updated_by
	CreatedAt      mysql.NullTime `json:"created_at"`      // created_at
	UpdatedAt      mysql.NullTime `json:"updated_at"`      // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XUser exists in the database.
func (xu *XUser) Exists() bool {
	return xu._exists
}

// Deleted provides information if the XUser has been deleted from the database.
func (xu *XUser) Deleted() bool {
	return xu._deleted
}

// Insert inserts the XUser to the database.
func (xu *XUser) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_user (` +
		`first_name, last_name, email, phone_number, address_line_1, address_line_2, city, state, zipcode, country, active_flag, user_type, joining_dt, attachment_name, password, remember_token, postn_id, org_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xu.FirstName, xu.LastName, xu.Email, xu.PhoneNumber, xu.AddressLine1, xu.AddressLine2, xu.City, xu.State, xu.Zipcode, xu.Country, xu.ActiveFlag, xu.UserType, xu.JoiningDt, xu.AttachmentName, xu.Password, xu.RememberToken, xu.PostnID, xu.OrgID, xu.CreatedBy, xu.UpdatedBy, xu.CreatedAt, xu.UpdatedAt)
	res, err := db.Exec(sqlstr, xu.FirstName, xu.LastName, xu.Email, xu.PhoneNumber, xu.AddressLine1, xu.AddressLine2, xu.City, xu.State, xu.Zipcode, xu.Country, xu.ActiveFlag, xu.UserType, xu.JoiningDt, xu.AttachmentName, xu.Password, xu.RememberToken, xu.PostnID, xu.OrgID, xu.CreatedBy, xu.UpdatedBy, xu.CreatedAt, xu.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xu.ID = uint(id)
	xu._exists = true

	return nil
}

// Update updates the XUser in the database.
func (xu *XUser) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_user SET ` +
		`first_name = ?, last_name = ?, email = ?, phone_number = ?, address_line_1 = ?, address_line_2 = ?, city = ?, state = ?, zipcode = ?, country = ?, active_flag = ?, user_type = ?, joining_dt = ?, attachment_name = ?, password = ?, remember_token = ?, postn_id = ?, org_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xu.FirstName, xu.LastName, xu.Email, xu.PhoneNumber, xu.AddressLine1, xu.AddressLine2, xu.City, xu.State, xu.Zipcode, xu.Country, xu.ActiveFlag, xu.UserType, xu.JoiningDt, xu.AttachmentName, xu.Password, xu.RememberToken, xu.PostnID, xu.OrgID, xu.CreatedBy, xu.UpdatedBy, xu.CreatedAt, xu.UpdatedAt, xu.ID)
	_, err = db.Exec(sqlstr, xu.FirstName, xu.LastName, xu.Email, xu.PhoneNumber, xu.AddressLine1, xu.AddressLine2, xu.City, xu.State, xu.Zipcode, xu.Country, xu.ActiveFlag, xu.UserType, xu.JoiningDt, xu.AttachmentName, xu.Password, xu.RememberToken, xu.PostnID, xu.OrgID, xu.CreatedBy, xu.UpdatedBy, xu.CreatedAt, xu.UpdatedAt, xu.ID)
	return err
}

// Save saves the XUser to the database.
func (xu *XUser) Save(db XODB) error {
	if xu.Exists() {
		return xu.Update(db)
	}

	return xu.Insert(db)
}

// Delete deletes the XUser from the database.
func (xu *XUser) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xu._exists {
		return nil
	}

	// if deleted, bail
	if xu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_user WHERE id = ?`

	// run query
	XOLog(sqlstr, xu.ID)
	_, err = db.Exec(sqlstr, xu.ID)
	if err != nil {
		return err
	}

	// set deleted
	xu._deleted = true

	return nil
}

// XUsersByCreatedBy retrieves a row from 'x_showroom.x_user' as a XUser.
//
// Generated from index 'x_user_created_by_foreign'.
func XUsersByCreatedBy(db XODB, createdBy sql.NullInt64) ([]*XUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, first_name, last_name, email, phone_number, address_line_1, address_line_2, city, state, zipcode, country, active_flag, user_type, joining_dt, attachment_name, password, remember_token, postn_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_user ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XUser{}
	for q.Next() {
		xu := XUser{
			_exists: true,
		}

		// scan
		err = q.Scan(&xu.ID, &xu.FirstName, &xu.LastName, &xu.Email, &xu.PhoneNumber, &xu.AddressLine1, &xu.AddressLine2, &xu.City, &xu.State, &xu.Zipcode, &xu.Country, &xu.ActiveFlag, &xu.UserType, &xu.JoiningDt, &xu.AttachmentName, &xu.Password, &xu.RememberToken, &xu.PostnID, &xu.OrgID, &xu.CreatedBy, &xu.UpdatedBy, &xu.CreatedAt, &xu.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xu)
	}

	return res, nil
}

// XUserByEmail retrieves a row from 'x_showroom.x_user' as a XUser.
//
// Generated from index 'x_user_email_unique'.
func XUserByEmail(db XODB, email string) (*XUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, first_name, last_name, email, phone_number, address_line_1, address_line_2, city, state, zipcode, country, active_flag, user_type, joining_dt, attachment_name, password, remember_token, postn_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_user ` +
		`WHERE email = ?`

	// run query
	XOLog(sqlstr, email)
	xu := XUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&xu.ID, &xu.FirstName, &xu.LastName, &xu.Email, &xu.PhoneNumber, &xu.AddressLine1, &xu.AddressLine2, &xu.City, &xu.State, &xu.Zipcode, &xu.Country, &xu.ActiveFlag, &xu.UserType, &xu.JoiningDt, &xu.AttachmentName, &xu.Password, &xu.RememberToken, &xu.PostnID, &xu.OrgID, &xu.CreatedBy, &xu.UpdatedBy, &xu.CreatedAt, &xu.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xu, nil
}

// XUserByID retrieves a row from 'x_showroom.x_user' as a XUser.
//
// Generated from index 'x_user_id_pkey'.
func XUserByID(db XODB, id uint) (*XUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, first_name, last_name, email, phone_number, address_line_1, address_line_2, city, state, zipcode, country, active_flag, user_type, joining_dt, attachment_name, password, remember_token, postn_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_user ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xu := XUser{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xu.ID, &xu.FirstName, &xu.LastName, &xu.Email, &xu.PhoneNumber, &xu.AddressLine1, &xu.AddressLine2, &xu.City, &xu.State, &xu.Zipcode, &xu.Country, &xu.ActiveFlag, &xu.UserType, &xu.JoiningDt, &xu.AttachmentName, &xu.Password, &xu.RememberToken, &xu.PostnID, &xu.OrgID, &xu.CreatedBy, &xu.UpdatedBy, &xu.CreatedAt, &xu.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xu, nil
}

// XUsersByOrgID retrieves a row from 'x_showroom.x_user' as a XUser.
//
// Generated from index 'x_user_org_id_foreign'.
func XUsersByOrgID(db XODB, orgID sql.NullInt64) ([]*XUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, first_name, last_name, email, phone_number, address_line_1, address_line_2, city, state, zipcode, country, active_flag, user_type, joining_dt, attachment_name, password, remember_token, postn_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_user ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XUser{}
	for q.Next() {
		xu := XUser{
			_exists: true,
		}

		// scan
		err = q.Scan(&xu.ID, &xu.FirstName, &xu.LastName, &xu.Email, &xu.PhoneNumber, &xu.AddressLine1, &xu.AddressLine2, &xu.City, &xu.State, &xu.Zipcode, &xu.Country, &xu.ActiveFlag, &xu.UserType, &xu.JoiningDt, &xu.AttachmentName, &xu.Password, &xu.RememberToken, &xu.PostnID, &xu.OrgID, &xu.CreatedBy, &xu.UpdatedBy, &xu.CreatedAt, &xu.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xu)
	}

	return res, nil
}

// XUsersByPostnID retrieves a row from 'x_showroom.x_user' as a XUser.
//
// Generated from index 'x_user_postn_id_foreign'.
func XUsersByPostnID(db XODB, postnID sql.NullInt64) ([]*XUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, first_name, last_name, email, phone_number, address_line_1, address_line_2, city, state, zipcode, country, active_flag, user_type, joining_dt, attachment_name, password, remember_token, postn_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_user ` +
		`WHERE postn_id = ?`

	// run query
	XOLog(sqlstr, postnID)
	q, err := db.Query(sqlstr, postnID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XUser{}
	for q.Next() {
		xu := XUser{
			_exists: true,
		}

		// scan
		err = q.Scan(&xu.ID, &xu.FirstName, &xu.LastName, &xu.Email, &xu.PhoneNumber, &xu.AddressLine1, &xu.AddressLine2, &xu.City, &xu.State, &xu.Zipcode, &xu.Country, &xu.ActiveFlag, &xu.UserType, &xu.JoiningDt, &xu.AttachmentName, &xu.Password, &xu.RememberToken, &xu.PostnID, &xu.OrgID, &xu.CreatedBy, &xu.UpdatedBy, &xu.CreatedAt, &xu.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xu)
	}

	return res, nil
}

// XUsersByUpdatedBy retrieves a row from 'x_showroom.x_user' as a XUser.
//
// Generated from index 'x_user_updated_by_foreign'.
func XUsersByUpdatedBy(db XODB, updatedBy sql.NullInt64) ([]*XUser, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, first_name, last_name, email, phone_number, address_line_1, address_line_2, city, state, zipcode, country, active_flag, user_type, joining_dt, attachment_name, password, remember_token, postn_id, org_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_user ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XUser{}
	for q.Next() {
		xu := XUser{
			_exists: true,
		}

		// scan
		err = q.Scan(&xu.ID, &xu.FirstName, &xu.LastName, &xu.Email, &xu.PhoneNumber, &xu.AddressLine1, &xu.AddressLine2, &xu.City, &xu.State, &xu.Zipcode, &xu.Country, &xu.ActiveFlag, &xu.UserType, &xu.JoiningDt, &xu.AttachmentName, &xu.Password, &xu.RememberToken, &xu.PostnID, &xu.OrgID, &xu.CreatedBy, &xu.UpdatedBy, &xu.CreatedAt, &xu.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xu)
	}

	return res, nil
}
