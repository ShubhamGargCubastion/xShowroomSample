// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// XLead represents a row from 'x_showroom.x_lead'.
type XLead struct {
	ID                   uint            `json:"id"`                      // id
	IntegrationID        string          `json:"integration_id"`          // integration_id
	Name                 string          `json:"name"`                    // name
	TypeCd               sql.NullString  `json:"type_cd"`                 // type_cd
	CloseDt              time.Time       `json:"close_dt"`                // close_dt
	FinanceScheme        sql.NullString  `json:"finance_scheme"`          // finance_scheme
	FinanceRate          sql.NullFloat64 `json:"finance_rate"`            // finance_rate
	FinancePeriod        sql.NullFloat64 `json:"finance_period"`          // finance_period
	FinanceStatus        sql.NullString  `json:"finance_status"`          // finance_status
	ActualOpenDt         mysql.NullTime  `json:"actual_open_dt"`          // actual_open_dt
	CustomerInterest     sql.NullString  `json:"customer_interest"`       // customer_interest
	OwnerBrand           sql.NullString  `json:"owner_brand"`             // owner_brand
	Source               sql.NullString  `json:"source"`                  // source
	StatusCd             string          `json:"status_cd"`               // status_cd
	StageCd              string          `json:"stage_cd"`                // stage_cd
	PipelineSalesStageCd sql.NullString  `json:"pipeline_sales_stage_cd"` // pipeline_sales_stage_cd
	PipelineStatusCd     sql.NullString  `json:"pipeline_status_cd"`      // pipeline_status_cd
	ReportingStatusCd    sql.NullString  `json:"reporting_status_cd"`     // reporting_status_cd
	CarUsage             sql.NullString  `json:"car_usage"`               // car_usage
	DqIndex              string          `json:"dq_index"`                // dq_index
	LostDetail           sql.NullString  `json:"lost_detail"`             // lost_detail
	LostReason           sql.NullString  `json:"lost_reason"`             // lost_reason
	LostTo               sql.NullString  `json:"lost_to"`                 // lost_to
	Probability          sql.NullFloat64 `json:"probability"`             // probability
	TiKm                 sql.NullString  `json:"ti_km"`                   // ti_km
	TiManufactureYr      sql.NullString  `json:"ti_manufacture_yr"`       // ti_manufacture_yr
	TiModel              sql.NullString  `json:"ti_model"`                // ti_model
	TiRegYr              sql.NullString  `json:"ti_reg_yr"`               // ti_reg_yr
	TiVariant            sql.NullString  `json:"ti_variant"`              // ti_variant
	TiOffer              sql.NullFloat64 `json:"ti_offer"`                // ti_offer
	ActualCloseDt        mysql.NullTime  `json:"actual_close_dt"`         // actual_close_dt
	OrgID                uint            `json:"org_id"`                  // org_id
	LastActivityType     sql.NullString  `json:"last_activity_type"`      // last_activity_type
	LastActivityDate     mysql.NullTime  `json:"last_activity_date"`      // last_activity_date
	LastActivityID       sql.NullInt64   `json:"last_activity_id"`        // last_activity_id
	NextActivityType     sql.NullString  `json:"next_activity_type"`      // next_activity_type
	NextActivityDate     mysql.NullTime  `json:"next_activity_date"`      // next_activity_date
	NextActivityID       sql.NullInt64   `json:"next_activity_id"`        // next_activity_id
	CloseDtMonth         int             `json:"close_dt_month"`          // close_dt_month
	CloseDtQuarter       string          `json:"close_dt_quarter"`        // close_dt_quarter
	CloseDtYear          string          `json:"close_dt_year"`           // close_dt_year
	SuccessFactor        sql.NullInt64   `json:"success_factor"`          // success_factor
	LeadScore            sql.NullInt64   `json:"lead_score"`              // lead_score
	OwnerID              uint            `json:"owner_id"`                // owner_id
	CreatedBy            uint            `json:"created_by"`              // created_by
	UpdatedBy            uint            `json:"updated_by"`              // updated_by
	CreatedAt            mysql.NullTime  `json:"created_at"`              // created_at
	UpdatedAt            mysql.NullTime  `json:"updated_at"`              // updated_at
	AccountID            sql.NullInt64   `json:"account_id"`              // account_id
	PriceAsOn            mysql.NullTime  `json:"price_as_on"`             // price_as_on
	FinanceAmount        float64         `json:"finance_amount"`          // finance_amount

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XLead exists in the database.
func (xl *XLead) Exists() bool {
	return xl._exists
}

// Deleted provides information if the XLead has been deleted from the database.
func (xl *XLead) Deleted() bool {
	return xl._deleted
}

// Insert inserts the XLead to the database.
func (xl *XLead) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xl._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_lead (` +
		`integration_id, name, type_cd, close_dt, finance_scheme, finance_rate, finance_period, finance_status, actual_open_dt, customer_interest, owner_brand, source, status_cd, stage_cd, pipeline_sales_stage_cd, pipeline_status_cd, reporting_status_cd, car_usage, dq_index, lost_detail, lost_reason, lost_to, probability, ti_km, ti_manufacture_yr, ti_model, ti_reg_yr, ti_variant, ti_offer, actual_close_dt, org_id, last_activity_type, last_activity_date, last_activity_id, next_activity_type, next_activity_date, next_activity_id, close_dt_month, close_dt_quarter, close_dt_year, success_factor, lead_score, owner_id, created_by, updated_by, created_at, updated_at, account_id, price_as_on, finance_amount` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xl.IntegrationID, xl.Name, xl.TypeCd, xl.CloseDt, xl.FinanceScheme, xl.FinanceRate, xl.FinancePeriod, xl.FinanceStatus, xl.ActualOpenDt, xl.CustomerInterest, xl.OwnerBrand, xl.Source, xl.StatusCd, xl.StageCd, xl.PipelineSalesStageCd, xl.PipelineStatusCd, xl.ReportingStatusCd, xl.CarUsage, xl.DqIndex, xl.LostDetail, xl.LostReason, xl.LostTo, xl.Probability, xl.TiKm, xl.TiManufactureYr, xl.TiModel, xl.TiRegYr, xl.TiVariant, xl.TiOffer, xl.ActualCloseDt, xl.OrgID, xl.LastActivityType, xl.LastActivityDate, xl.LastActivityID, xl.NextActivityType, xl.NextActivityDate, xl.NextActivityID, xl.CloseDtMonth, xl.CloseDtQuarter, xl.CloseDtYear, xl.SuccessFactor, xl.LeadScore, xl.OwnerID, xl.CreatedBy, xl.UpdatedBy, xl.CreatedAt, xl.UpdatedAt, xl.AccountID, xl.PriceAsOn, xl.FinanceAmount)
	res, err := db.Exec(sqlstr, xl.IntegrationID, xl.Name, xl.TypeCd, xl.CloseDt, xl.FinanceScheme, xl.FinanceRate, xl.FinancePeriod, xl.FinanceStatus, xl.ActualOpenDt, xl.CustomerInterest, xl.OwnerBrand, xl.Source, xl.StatusCd, xl.StageCd, xl.PipelineSalesStageCd, xl.PipelineStatusCd, xl.ReportingStatusCd, xl.CarUsage, xl.DqIndex, xl.LostDetail, xl.LostReason, xl.LostTo, xl.Probability, xl.TiKm, xl.TiManufactureYr, xl.TiModel, xl.TiRegYr, xl.TiVariant, xl.TiOffer, xl.ActualCloseDt, xl.OrgID, xl.LastActivityType, xl.LastActivityDate, xl.LastActivityID, xl.NextActivityType, xl.NextActivityDate, xl.NextActivityID, xl.CloseDtMonth, xl.CloseDtQuarter, xl.CloseDtYear, xl.SuccessFactor, xl.LeadScore, xl.OwnerID, xl.CreatedBy, xl.UpdatedBy, xl.CreatedAt, xl.UpdatedAt, xl.AccountID, xl.PriceAsOn, xl.FinanceAmount)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xl.ID = uint(id)
	xl._exists = true

	return nil
}

// Update updates the XLead in the database.
func (xl *XLead) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xl._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_lead SET ` +
		`integration_id = ?, name = ?, type_cd = ?, close_dt = ?, finance_scheme = ?, finance_rate = ?, finance_period = ?, finance_status = ?, actual_open_dt = ?, customer_interest = ?, owner_brand = ?, source = ?, status_cd = ?, stage_cd = ?, pipeline_sales_stage_cd = ?, pipeline_status_cd = ?, reporting_status_cd = ?, car_usage = ?, dq_index = ?, lost_detail = ?, lost_reason = ?, lost_to = ?, probability = ?, ti_km = ?, ti_manufacture_yr = ?, ti_model = ?, ti_reg_yr = ?, ti_variant = ?, ti_offer = ?, actual_close_dt = ?, org_id = ?, last_activity_type = ?, last_activity_date = ?, last_activity_id = ?, next_activity_type = ?, next_activity_date = ?, next_activity_id = ?, close_dt_month = ?, close_dt_quarter = ?, close_dt_year = ?, success_factor = ?, lead_score = ?, owner_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?, account_id = ?, price_as_on = ?, finance_amount = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xl.IntegrationID, xl.Name, xl.TypeCd, xl.CloseDt, xl.FinanceScheme, xl.FinanceRate, xl.FinancePeriod, xl.FinanceStatus, xl.ActualOpenDt, xl.CustomerInterest, xl.OwnerBrand, xl.Source, xl.StatusCd, xl.StageCd, xl.PipelineSalesStageCd, xl.PipelineStatusCd, xl.ReportingStatusCd, xl.CarUsage, xl.DqIndex, xl.LostDetail, xl.LostReason, xl.LostTo, xl.Probability, xl.TiKm, xl.TiManufactureYr, xl.TiModel, xl.TiRegYr, xl.TiVariant, xl.TiOffer, xl.ActualCloseDt, xl.OrgID, xl.LastActivityType, xl.LastActivityDate, xl.LastActivityID, xl.NextActivityType, xl.NextActivityDate, xl.NextActivityID, xl.CloseDtMonth, xl.CloseDtQuarter, xl.CloseDtYear, xl.SuccessFactor, xl.LeadScore, xl.OwnerID, xl.CreatedBy, xl.UpdatedBy, xl.CreatedAt, xl.UpdatedAt, xl.AccountID, xl.PriceAsOn, xl.FinanceAmount, xl.ID)
	_, err = db.Exec(sqlstr, xl.IntegrationID, xl.Name, xl.TypeCd, xl.CloseDt, xl.FinanceScheme, xl.FinanceRate, xl.FinancePeriod, xl.FinanceStatus, xl.ActualOpenDt, xl.CustomerInterest, xl.OwnerBrand, xl.Source, xl.StatusCd, xl.StageCd, xl.PipelineSalesStageCd, xl.PipelineStatusCd, xl.ReportingStatusCd, xl.CarUsage, xl.DqIndex, xl.LostDetail, xl.LostReason, xl.LostTo, xl.Probability, xl.TiKm, xl.TiManufactureYr, xl.TiModel, xl.TiRegYr, xl.TiVariant, xl.TiOffer, xl.ActualCloseDt, xl.OrgID, xl.LastActivityType, xl.LastActivityDate, xl.LastActivityID, xl.NextActivityType, xl.NextActivityDate, xl.NextActivityID, xl.CloseDtMonth, xl.CloseDtQuarter, xl.CloseDtYear, xl.SuccessFactor, xl.LeadScore, xl.OwnerID, xl.CreatedBy, xl.UpdatedBy, xl.CreatedAt, xl.UpdatedAt, xl.AccountID, xl.PriceAsOn, xl.FinanceAmount, xl.ID)
	return err
}

// Save saves the XLead to the database.
func (xl *XLead) Save(db XODB) error {
	if xl.Exists() {
		return xl.Update(db)
	}

	return xl.Insert(db)
}

// Delete deletes the XLead from the database.
func (xl *XLead) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xl._exists {
		return nil
	}

	// if deleted, bail
	if xl._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_lead WHERE id = ?`

	// run query
	XOLog(sqlstr, xl.ID)
	_, err = db.Exec(sqlstr, xl.ID)
	if err != nil {
		return err
	}

	// set deleted
	xl._deleted = true

	return nil
}

// XLeadsByAccountID retrieves a row from 'x_showroom.x_lead' as a XLead.
//
// Generated from index 'x_lead_account_id_foreign'.
func XLeadsByAccountID(db XODB, accountID sql.NullInt64) ([]*XLead, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, type_cd, close_dt, finance_scheme, finance_rate, finance_period, finance_status, actual_open_dt, customer_interest, owner_brand, source, status_cd, stage_cd, pipeline_sales_stage_cd, pipeline_status_cd, reporting_status_cd, car_usage, dq_index, lost_detail, lost_reason, lost_to, probability, ti_km, ti_manufacture_yr, ti_model, ti_reg_yr, ti_variant, ti_offer, actual_close_dt, org_id, last_activity_type, last_activity_date, last_activity_id, next_activity_type, next_activity_date, next_activity_id, close_dt_month, close_dt_quarter, close_dt_year, success_factor, lead_score, owner_id, created_by, updated_by, created_at, updated_at, account_id, price_as_on, finance_amount ` +
		`FROM x_showroom.x_lead ` +
		`WHERE account_id = ?`

	// run query
	XOLog(sqlstr, accountID)
	q, err := db.Query(sqlstr, accountID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLead{}
	for q.Next() {
		xl := XLead{
			_exists: true,
		}

		// scan
		err = q.Scan(&xl.ID, &xl.IntegrationID, &xl.Name, &xl.TypeCd, &xl.CloseDt, &xl.FinanceScheme, &xl.FinanceRate, &xl.FinancePeriod, &xl.FinanceStatus, &xl.ActualOpenDt, &xl.CustomerInterest, &xl.OwnerBrand, &xl.Source, &xl.StatusCd, &xl.StageCd, &xl.PipelineSalesStageCd, &xl.PipelineStatusCd, &xl.ReportingStatusCd, &xl.CarUsage, &xl.DqIndex, &xl.LostDetail, &xl.LostReason, &xl.LostTo, &xl.Probability, &xl.TiKm, &xl.TiManufactureYr, &xl.TiModel, &xl.TiRegYr, &xl.TiVariant, &xl.TiOffer, &xl.ActualCloseDt, &xl.OrgID, &xl.LastActivityType, &xl.LastActivityDate, &xl.LastActivityID, &xl.NextActivityType, &xl.NextActivityDate, &xl.NextActivityID, &xl.CloseDtMonth, &xl.CloseDtQuarter, &xl.CloseDtYear, &xl.SuccessFactor, &xl.LeadScore, &xl.OwnerID, &xl.CreatedBy, &xl.UpdatedBy, &xl.CreatedAt, &xl.UpdatedAt, &xl.AccountID, &xl.PriceAsOn, &xl.FinanceAmount)
		if err != nil {
			return nil, err
		}

		res = append(res, &xl)
	}

	return res, nil
}

// XLeadsByCreatedBy retrieves a row from 'x_showroom.x_lead' as a XLead.
//
// Generated from index 'x_lead_created_by_foreign'.
func XLeadsByCreatedBy(db XODB, createdBy uint) ([]*XLead, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, type_cd, close_dt, finance_scheme, finance_rate, finance_period, finance_status, actual_open_dt, customer_interest, owner_brand, source, status_cd, stage_cd, pipeline_sales_stage_cd, pipeline_status_cd, reporting_status_cd, car_usage, dq_index, lost_detail, lost_reason, lost_to, probability, ti_km, ti_manufacture_yr, ti_model, ti_reg_yr, ti_variant, ti_offer, actual_close_dt, org_id, last_activity_type, last_activity_date, last_activity_id, next_activity_type, next_activity_date, next_activity_id, close_dt_month, close_dt_quarter, close_dt_year, success_factor, lead_score, owner_id, created_by, updated_by, created_at, updated_at, account_id, price_as_on, finance_amount ` +
		`FROM x_showroom.x_lead ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLead{}
	for q.Next() {
		xl := XLead{
			_exists: true,
		}

		// scan
		err = q.Scan(&xl.ID, &xl.IntegrationID, &xl.Name, &xl.TypeCd, &xl.CloseDt, &xl.FinanceScheme, &xl.FinanceRate, &xl.FinancePeriod, &xl.FinanceStatus, &xl.ActualOpenDt, &xl.CustomerInterest, &xl.OwnerBrand, &xl.Source, &xl.StatusCd, &xl.StageCd, &xl.PipelineSalesStageCd, &xl.PipelineStatusCd, &xl.ReportingStatusCd, &xl.CarUsage, &xl.DqIndex, &xl.LostDetail, &xl.LostReason, &xl.LostTo, &xl.Probability, &xl.TiKm, &xl.TiManufactureYr, &xl.TiModel, &xl.TiRegYr, &xl.TiVariant, &xl.TiOffer, &xl.ActualCloseDt, &xl.OrgID, &xl.LastActivityType, &xl.LastActivityDate, &xl.LastActivityID, &xl.NextActivityType, &xl.NextActivityDate, &xl.NextActivityID, &xl.CloseDtMonth, &xl.CloseDtQuarter, &xl.CloseDtYear, &xl.SuccessFactor, &xl.LeadScore, &xl.OwnerID, &xl.CreatedBy, &xl.UpdatedBy, &xl.CreatedAt, &xl.UpdatedAt, &xl.AccountID, &xl.PriceAsOn, &xl.FinanceAmount)
		if err != nil {
			return nil, err
		}

		res = append(res, &xl)
	}

	return res, nil
}

// XLeadByID retrieves a row from 'x_showroom.x_lead' as a XLead.
//
// Generated from index 'x_lead_id_pkey'.
func XLeadByID(db XODB, id uint) (*XLead, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, type_cd, close_dt, finance_scheme, finance_rate, finance_period, finance_status, actual_open_dt, customer_interest, owner_brand, source, status_cd, stage_cd, pipeline_sales_stage_cd, pipeline_status_cd, reporting_status_cd, car_usage, dq_index, lost_detail, lost_reason, lost_to, probability, ti_km, ti_manufacture_yr, ti_model, ti_reg_yr, ti_variant, ti_offer, actual_close_dt, org_id, last_activity_type, last_activity_date, last_activity_id, next_activity_type, next_activity_date, next_activity_id, close_dt_month, close_dt_quarter, close_dt_year, success_factor, lead_score, owner_id, created_by, updated_by, created_at, updated_at, account_id, price_as_on, finance_amount ` +
		`FROM x_showroom.x_lead ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xl := XLead{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xl.ID, &xl.IntegrationID, &xl.Name, &xl.TypeCd, &xl.CloseDt, &xl.FinanceScheme, &xl.FinanceRate, &xl.FinancePeriod, &xl.FinanceStatus, &xl.ActualOpenDt, &xl.CustomerInterest, &xl.OwnerBrand, &xl.Source, &xl.StatusCd, &xl.StageCd, &xl.PipelineSalesStageCd, &xl.PipelineStatusCd, &xl.ReportingStatusCd, &xl.CarUsage, &xl.DqIndex, &xl.LostDetail, &xl.LostReason, &xl.LostTo, &xl.Probability, &xl.TiKm, &xl.TiManufactureYr, &xl.TiModel, &xl.TiRegYr, &xl.TiVariant, &xl.TiOffer, &xl.ActualCloseDt, &xl.OrgID, &xl.LastActivityType, &xl.LastActivityDate, &xl.LastActivityID, &xl.NextActivityType, &xl.NextActivityDate, &xl.NextActivityID, &xl.CloseDtMonth, &xl.CloseDtQuarter, &xl.CloseDtYear, &xl.SuccessFactor, &xl.LeadScore, &xl.OwnerID, &xl.CreatedBy, &xl.UpdatedBy, &xl.CreatedAt, &xl.UpdatedAt, &xl.AccountID, &xl.PriceAsOn, &xl.FinanceAmount)
	if err != nil {
		return nil, err
	}

	return &xl, nil
}

// XLeadsByLastActivityID retrieves a row from 'x_showroom.x_lead' as a XLead.
//
// Generated from index 'x_lead_last_activity_id_foreign'.
func XLeadsByLastActivityID(db XODB, lastActivityID sql.NullInt64) ([]*XLead, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, type_cd, close_dt, finance_scheme, finance_rate, finance_period, finance_status, actual_open_dt, customer_interest, owner_brand, source, status_cd, stage_cd, pipeline_sales_stage_cd, pipeline_status_cd, reporting_status_cd, car_usage, dq_index, lost_detail, lost_reason, lost_to, probability, ti_km, ti_manufacture_yr, ti_model, ti_reg_yr, ti_variant, ti_offer, actual_close_dt, org_id, last_activity_type, last_activity_date, last_activity_id, next_activity_type, next_activity_date, next_activity_id, close_dt_month, close_dt_quarter, close_dt_year, success_factor, lead_score, owner_id, created_by, updated_by, created_at, updated_at, account_id, price_as_on, finance_amount ` +
		`FROM x_showroom.x_lead ` +
		`WHERE last_activity_id = ?`

	// run query
	XOLog(sqlstr, lastActivityID)
	q, err := db.Query(sqlstr, lastActivityID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLead{}
	for q.Next() {
		xl := XLead{
			_exists: true,
		}

		// scan
		err = q.Scan(&xl.ID, &xl.IntegrationID, &xl.Name, &xl.TypeCd, &xl.CloseDt, &xl.FinanceScheme, &xl.FinanceRate, &xl.FinancePeriod, &xl.FinanceStatus, &xl.ActualOpenDt, &xl.CustomerInterest, &xl.OwnerBrand, &xl.Source, &xl.StatusCd, &xl.StageCd, &xl.PipelineSalesStageCd, &xl.PipelineStatusCd, &xl.ReportingStatusCd, &xl.CarUsage, &xl.DqIndex, &xl.LostDetail, &xl.LostReason, &xl.LostTo, &xl.Probability, &xl.TiKm, &xl.TiManufactureYr, &xl.TiModel, &xl.TiRegYr, &xl.TiVariant, &xl.TiOffer, &xl.ActualCloseDt, &xl.OrgID, &xl.LastActivityType, &xl.LastActivityDate, &xl.LastActivityID, &xl.NextActivityType, &xl.NextActivityDate, &xl.NextActivityID, &xl.CloseDtMonth, &xl.CloseDtQuarter, &xl.CloseDtYear, &xl.SuccessFactor, &xl.LeadScore, &xl.OwnerID, &xl.CreatedBy, &xl.UpdatedBy, &xl.CreatedAt, &xl.UpdatedAt, &xl.AccountID, &xl.PriceAsOn, &xl.FinanceAmount)
		if err != nil {
			return nil, err
		}

		res = append(res, &xl)
	}

	return res, nil
}

// XLeadsByNextActivityID retrieves a row from 'x_showroom.x_lead' as a XLead.
//
// Generated from index 'x_lead_next_activity_id_foreign'.
func XLeadsByNextActivityID(db XODB, nextActivityID sql.NullInt64) ([]*XLead, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, type_cd, close_dt, finance_scheme, finance_rate, finance_period, finance_status, actual_open_dt, customer_interest, owner_brand, source, status_cd, stage_cd, pipeline_sales_stage_cd, pipeline_status_cd, reporting_status_cd, car_usage, dq_index, lost_detail, lost_reason, lost_to, probability, ti_km, ti_manufacture_yr, ti_model, ti_reg_yr, ti_variant, ti_offer, actual_close_dt, org_id, last_activity_type, last_activity_date, last_activity_id, next_activity_type, next_activity_date, next_activity_id, close_dt_month, close_dt_quarter, close_dt_year, success_factor, lead_score, owner_id, created_by, updated_by, created_at, updated_at, account_id, price_as_on, finance_amount ` +
		`FROM x_showroom.x_lead ` +
		`WHERE next_activity_id = ?`

	// run query
	XOLog(sqlstr, nextActivityID)
	q, err := db.Query(sqlstr, nextActivityID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLead{}
	for q.Next() {
		xl := XLead{
			_exists: true,
		}

		// scan
		err = q.Scan(&xl.ID, &xl.IntegrationID, &xl.Name, &xl.TypeCd, &xl.CloseDt, &xl.FinanceScheme, &xl.FinanceRate, &xl.FinancePeriod, &xl.FinanceStatus, &xl.ActualOpenDt, &xl.CustomerInterest, &xl.OwnerBrand, &xl.Source, &xl.StatusCd, &xl.StageCd, &xl.PipelineSalesStageCd, &xl.PipelineStatusCd, &xl.ReportingStatusCd, &xl.CarUsage, &xl.DqIndex, &xl.LostDetail, &xl.LostReason, &xl.LostTo, &xl.Probability, &xl.TiKm, &xl.TiManufactureYr, &xl.TiModel, &xl.TiRegYr, &xl.TiVariant, &xl.TiOffer, &xl.ActualCloseDt, &xl.OrgID, &xl.LastActivityType, &xl.LastActivityDate, &xl.LastActivityID, &xl.NextActivityType, &xl.NextActivityDate, &xl.NextActivityID, &xl.CloseDtMonth, &xl.CloseDtQuarter, &xl.CloseDtYear, &xl.SuccessFactor, &xl.LeadScore, &xl.OwnerID, &xl.CreatedBy, &xl.UpdatedBy, &xl.CreatedAt, &xl.UpdatedAt, &xl.AccountID, &xl.PriceAsOn, &xl.FinanceAmount)
		if err != nil {
			return nil, err
		}

		res = append(res, &xl)
	}

	return res, nil
}

// XLeadsByOrgID retrieves a row from 'x_showroom.x_lead' as a XLead.
//
// Generated from index 'x_lead_org_id_foreign'.
func XLeadsByOrgID(db XODB, orgID uint) ([]*XLead, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, type_cd, close_dt, finance_scheme, finance_rate, finance_period, finance_status, actual_open_dt, customer_interest, owner_brand, source, status_cd, stage_cd, pipeline_sales_stage_cd, pipeline_status_cd, reporting_status_cd, car_usage, dq_index, lost_detail, lost_reason, lost_to, probability, ti_km, ti_manufacture_yr, ti_model, ti_reg_yr, ti_variant, ti_offer, actual_close_dt, org_id, last_activity_type, last_activity_date, last_activity_id, next_activity_type, next_activity_date, next_activity_id, close_dt_month, close_dt_quarter, close_dt_year, success_factor, lead_score, owner_id, created_by, updated_by, created_at, updated_at, account_id, price_as_on, finance_amount ` +
		`FROM x_showroom.x_lead ` +
		`WHERE org_id = ?`

	// run query
	XOLog(sqlstr, orgID)
	q, err := db.Query(sqlstr, orgID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLead{}
	for q.Next() {
		xl := XLead{
			_exists: true,
		}

		// scan
		err = q.Scan(&xl.ID, &xl.IntegrationID, &xl.Name, &xl.TypeCd, &xl.CloseDt, &xl.FinanceScheme, &xl.FinanceRate, &xl.FinancePeriod, &xl.FinanceStatus, &xl.ActualOpenDt, &xl.CustomerInterest, &xl.OwnerBrand, &xl.Source, &xl.StatusCd, &xl.StageCd, &xl.PipelineSalesStageCd, &xl.PipelineStatusCd, &xl.ReportingStatusCd, &xl.CarUsage, &xl.DqIndex, &xl.LostDetail, &xl.LostReason, &xl.LostTo, &xl.Probability, &xl.TiKm, &xl.TiManufactureYr, &xl.TiModel, &xl.TiRegYr, &xl.TiVariant, &xl.TiOffer, &xl.ActualCloseDt, &xl.OrgID, &xl.LastActivityType, &xl.LastActivityDate, &xl.LastActivityID, &xl.NextActivityType, &xl.NextActivityDate, &xl.NextActivityID, &xl.CloseDtMonth, &xl.CloseDtQuarter, &xl.CloseDtYear, &xl.SuccessFactor, &xl.LeadScore, &xl.OwnerID, &xl.CreatedBy, &xl.UpdatedBy, &xl.CreatedAt, &xl.UpdatedAt, &xl.AccountID, &xl.PriceAsOn, &xl.FinanceAmount)
		if err != nil {
			return nil, err
		}

		res = append(res, &xl)
	}

	return res, nil
}

// XLeadsByOwnerID retrieves a row from 'x_showroom.x_lead' as a XLead.
//
// Generated from index 'x_lead_owner_id_foreign'.
func XLeadsByOwnerID(db XODB, ownerID uint) ([]*XLead, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, type_cd, close_dt, finance_scheme, finance_rate, finance_period, finance_status, actual_open_dt, customer_interest, owner_brand, source, status_cd, stage_cd, pipeline_sales_stage_cd, pipeline_status_cd, reporting_status_cd, car_usage, dq_index, lost_detail, lost_reason, lost_to, probability, ti_km, ti_manufacture_yr, ti_model, ti_reg_yr, ti_variant, ti_offer, actual_close_dt, org_id, last_activity_type, last_activity_date, last_activity_id, next_activity_type, next_activity_date, next_activity_id, close_dt_month, close_dt_quarter, close_dt_year, success_factor, lead_score, owner_id, created_by, updated_by, created_at, updated_at, account_id, price_as_on, finance_amount ` +
		`FROM x_showroom.x_lead ` +
		`WHERE owner_id = ?`

	// run query
	XOLog(sqlstr, ownerID)
	q, err := db.Query(sqlstr, ownerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLead{}
	for q.Next() {
		xl := XLead{
			_exists: true,
		}

		// scan
		err = q.Scan(&xl.ID, &xl.IntegrationID, &xl.Name, &xl.TypeCd, &xl.CloseDt, &xl.FinanceScheme, &xl.FinanceRate, &xl.FinancePeriod, &xl.FinanceStatus, &xl.ActualOpenDt, &xl.CustomerInterest, &xl.OwnerBrand, &xl.Source, &xl.StatusCd, &xl.StageCd, &xl.PipelineSalesStageCd, &xl.PipelineStatusCd, &xl.ReportingStatusCd, &xl.CarUsage, &xl.DqIndex, &xl.LostDetail, &xl.LostReason, &xl.LostTo, &xl.Probability, &xl.TiKm, &xl.TiManufactureYr, &xl.TiModel, &xl.TiRegYr, &xl.TiVariant, &xl.TiOffer, &xl.ActualCloseDt, &xl.OrgID, &xl.LastActivityType, &xl.LastActivityDate, &xl.LastActivityID, &xl.NextActivityType, &xl.NextActivityDate, &xl.NextActivityID, &xl.CloseDtMonth, &xl.CloseDtQuarter, &xl.CloseDtYear, &xl.SuccessFactor, &xl.LeadScore, &xl.OwnerID, &xl.CreatedBy, &xl.UpdatedBy, &xl.CreatedAt, &xl.UpdatedAt, &xl.AccountID, &xl.PriceAsOn, &xl.FinanceAmount)
		if err != nil {
			return nil, err
		}

		res = append(res, &xl)
	}

	return res, nil
}

// XLeadsByUpdatedBy retrieves a row from 'x_showroom.x_lead' as a XLead.
//
// Generated from index 'x_lead_updated_by_foreign'.
func XLeadsByUpdatedBy(db XODB, updatedBy uint) ([]*XLead, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, integration_id, name, type_cd, close_dt, finance_scheme, finance_rate, finance_period, finance_status, actual_open_dt, customer_interest, owner_brand, source, status_cd, stage_cd, pipeline_sales_stage_cd, pipeline_status_cd, reporting_status_cd, car_usage, dq_index, lost_detail, lost_reason, lost_to, probability, ti_km, ti_manufacture_yr, ti_model, ti_reg_yr, ti_variant, ti_offer, actual_close_dt, org_id, last_activity_type, last_activity_date, last_activity_id, next_activity_type, next_activity_date, next_activity_id, close_dt_month, close_dt_quarter, close_dt_year, success_factor, lead_score, owner_id, created_by, updated_by, created_at, updated_at, account_id, price_as_on, finance_amount ` +
		`FROM x_showroom.x_lead ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLead{}
	for q.Next() {
		xl := XLead{
			_exists: true,
		}

		// scan
		err = q.Scan(&xl.ID, &xl.IntegrationID, &xl.Name, &xl.TypeCd, &xl.CloseDt, &xl.FinanceScheme, &xl.FinanceRate, &xl.FinancePeriod, &xl.FinanceStatus, &xl.ActualOpenDt, &xl.CustomerInterest, &xl.OwnerBrand, &xl.Source, &xl.StatusCd, &xl.StageCd, &xl.PipelineSalesStageCd, &xl.PipelineStatusCd, &xl.ReportingStatusCd, &xl.CarUsage, &xl.DqIndex, &xl.LostDetail, &xl.LostReason, &xl.LostTo, &xl.Probability, &xl.TiKm, &xl.TiManufactureYr, &xl.TiModel, &xl.TiRegYr, &xl.TiVariant, &xl.TiOffer, &xl.ActualCloseDt, &xl.OrgID, &xl.LastActivityType, &xl.LastActivityDate, &xl.LastActivityID, &xl.NextActivityType, &xl.NextActivityDate, &xl.NextActivityID, &xl.CloseDtMonth, &xl.CloseDtQuarter, &xl.CloseDtYear, &xl.SuccessFactor, &xl.LeadScore, &xl.OwnerID, &xl.CreatedBy, &xl.UpdatedBy, &xl.CreatedAt, &xl.UpdatedAt, &xl.AccountID, &xl.PriceAsOn, &xl.FinanceAmount)
		if err != nil {
			return nil, err
		}

		res = append(res, &xl)
	}

	return res, nil
}
