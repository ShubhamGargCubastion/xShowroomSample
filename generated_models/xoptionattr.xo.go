// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XOptionAttr represents a row from 'x_showroom.x_option_attr'.
type XOptionAttr struct {
	ID          uint           `json:"id"`           // id
	Name        string         `json:"name"`         // name
	DisplayName string         `json:"display_name"` // display_name
	SeqNum      uint           `json:"seq_num"`      // seq_num
	DefaultFlag string         `json:"default_flag"` // default_flag
	OptionID    uint           `json:"option_id"`    // option_id
	AttID       sql.NullInt64  `json:"att_id"`       // att_id
	CreatedBy   uint           `json:"created_by"`   // created_by
	UpdatedBy   uint           `json:"updated_by"`   // updated_by
	CreatedAt   mysql.NullTime `json:"created_at"`   // created_at
	UpdatedAt   mysql.NullTime `json:"updated_at"`   // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XOptionAttr exists in the database.
func (xoa *XOptionAttr) Exists() bool {
	return xoa._exists
}

// Deleted provides information if the XOptionAttr has been deleted from the database.
func (xoa *XOptionAttr) Deleted() bool {
	return xoa._deleted
}

// Insert inserts the XOptionAttr to the database.
func (xoa *XOptionAttr) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xoa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_option_attr (` +
		`name, display_name, seq_num, default_flag, option_id, att_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xoa.Name, xoa.DisplayName, xoa.SeqNum, xoa.DefaultFlag, xoa.OptionID, xoa.AttID, xoa.CreatedBy, xoa.UpdatedBy, xoa.CreatedAt, xoa.UpdatedAt)
	res, err := db.Exec(sqlstr, xoa.Name, xoa.DisplayName, xoa.SeqNum, xoa.DefaultFlag, xoa.OptionID, xoa.AttID, xoa.CreatedBy, xoa.UpdatedBy, xoa.CreatedAt, xoa.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xoa.ID = uint(id)
	xoa._exists = true

	return nil
}

// Update updates the XOptionAttr in the database.
func (xoa *XOptionAttr) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xoa._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xoa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_option_attr SET ` +
		`name = ?, display_name = ?, seq_num = ?, default_flag = ?, option_id = ?, att_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xoa.Name, xoa.DisplayName, xoa.SeqNum, xoa.DefaultFlag, xoa.OptionID, xoa.AttID, xoa.CreatedBy, xoa.UpdatedBy, xoa.CreatedAt, xoa.UpdatedAt, xoa.ID)
	_, err = db.Exec(sqlstr, xoa.Name, xoa.DisplayName, xoa.SeqNum, xoa.DefaultFlag, xoa.OptionID, xoa.AttID, xoa.CreatedBy, xoa.UpdatedBy, xoa.CreatedAt, xoa.UpdatedAt, xoa.ID)
	return err
}

// Save saves the XOptionAttr to the database.
func (xoa *XOptionAttr) Save(db XODB) error {
	if xoa.Exists() {
		return xoa.Update(db)
	}

	return xoa.Insert(db)
}

// Delete deletes the XOptionAttr from the database.
func (xoa *XOptionAttr) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xoa._exists {
		return nil
	}

	// if deleted, bail
	if xoa._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_option_attr WHERE id = ?`

	// run query
	XOLog(sqlstr, xoa.ID)
	_, err = db.Exec(sqlstr, xoa.ID)
	if err != nil {
		return err
	}

	// set deleted
	xoa._deleted = true

	return nil
}

// XOptionAttrsByAttID retrieves a row from 'x_showroom.x_option_attr' as a XOptionAttr.
//
// Generated from index 'x_option_attr_att_id_foreign'.
func XOptionAttrsByAttID(db XODB, attID sql.NullInt64) ([]*XOptionAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, default_flag, option_id, att_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_option_attr ` +
		`WHERE att_id = ?`

	// run query
	XOLog(sqlstr, attID)
	q, err := db.Query(sqlstr, attID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XOptionAttr{}
	for q.Next() {
		xoa := XOptionAttr{
			_exists: true,
		}

		// scan
		err = q.Scan(&xoa.ID, &xoa.Name, &xoa.DisplayName, &xoa.SeqNum, &xoa.DefaultFlag, &xoa.OptionID, &xoa.AttID, &xoa.CreatedBy, &xoa.UpdatedBy, &xoa.CreatedAt, &xoa.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xoa)
	}

	return res, nil
}

// XOptionAttrsByCreatedBy retrieves a row from 'x_showroom.x_option_attr' as a XOptionAttr.
//
// Generated from index 'x_option_attr_created_by_foreign'.
func XOptionAttrsByCreatedBy(db XODB, createdBy uint) ([]*XOptionAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, default_flag, option_id, att_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_option_attr ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XOptionAttr{}
	for q.Next() {
		xoa := XOptionAttr{
			_exists: true,
		}

		// scan
		err = q.Scan(&xoa.ID, &xoa.Name, &xoa.DisplayName, &xoa.SeqNum, &xoa.DefaultFlag, &xoa.OptionID, &xoa.AttID, &xoa.CreatedBy, &xoa.UpdatedBy, &xoa.CreatedAt, &xoa.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xoa)
	}

	return res, nil
}

// XOptionAttrByID retrieves a row from 'x_showroom.x_option_attr' as a XOptionAttr.
//
// Generated from index 'x_option_attr_id_pkey'.
func XOptionAttrByID(db XODB, id uint) (*XOptionAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, default_flag, option_id, att_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_option_attr ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xoa := XOptionAttr{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xoa.ID, &xoa.Name, &xoa.DisplayName, &xoa.SeqNum, &xoa.DefaultFlag, &xoa.OptionID, &xoa.AttID, &xoa.CreatedBy, &xoa.UpdatedBy, &xoa.CreatedAt, &xoa.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xoa, nil
}

// XOptionAttrByNameOptionID retrieves a row from 'x_showroom.x_option_attr' as a XOptionAttr.
//
// Generated from index 'x_option_attr_name_option_id_unique'.
func XOptionAttrByNameOptionID(db XODB, name string, optionID uint) (*XOptionAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, default_flag, option_id, att_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_option_attr ` +
		`WHERE name = ? AND option_id = ?`

	// run query
	XOLog(sqlstr, name, optionID)
	xoa := XOptionAttr{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, optionID).Scan(&xoa.ID, &xoa.Name, &xoa.DisplayName, &xoa.SeqNum, &xoa.DefaultFlag, &xoa.OptionID, &xoa.AttID, &xoa.CreatedBy, &xoa.UpdatedBy, &xoa.CreatedAt, &xoa.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xoa, nil
}

// XOptionAttrsByOptionID retrieves a row from 'x_showroom.x_option_attr' as a XOptionAttr.
//
// Generated from index 'x_option_attr_option_id_foreign'.
func XOptionAttrsByOptionID(db XODB, optionID uint) ([]*XOptionAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, default_flag, option_id, att_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_option_attr ` +
		`WHERE option_id = ?`

	// run query
	XOLog(sqlstr, optionID)
	q, err := db.Query(sqlstr, optionID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XOptionAttr{}
	for q.Next() {
		xoa := XOptionAttr{
			_exists: true,
		}

		// scan
		err = q.Scan(&xoa.ID, &xoa.Name, &xoa.DisplayName, &xoa.SeqNum, &xoa.DefaultFlag, &xoa.OptionID, &xoa.AttID, &xoa.CreatedBy, &xoa.UpdatedBy, &xoa.CreatedAt, &xoa.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xoa)
	}

	return res, nil
}

// XOptionAttrsByUpdatedBy retrieves a row from 'x_showroom.x_option_attr' as a XOptionAttr.
//
// Generated from index 'x_option_attr_updated_by_foreign'.
func XOptionAttrsByUpdatedBy(db XODB, updatedBy uint) ([]*XOptionAttr, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, display_name, seq_num, default_flag, option_id, att_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_option_attr ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XOptionAttr{}
	for q.Next() {
		xoa := XOptionAttr{
			_exists: true,
		}

		// scan
		err = q.Scan(&xoa.ID, &xoa.Name, &xoa.DisplayName, &xoa.SeqNum, &xoa.DefaultFlag, &xoa.OptionID, &xoa.AttID, &xoa.CreatedBy, &xoa.UpdatedBy, &xoa.CreatedAt, &xoa.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xoa)
	}

	return res, nil
}
