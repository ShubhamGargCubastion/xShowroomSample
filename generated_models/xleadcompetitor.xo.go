// Package generated_models contains the types for schema 'x_showroom'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/go-sql-driver/mysql"
)

// XLeadCompetitor represents a row from 'x_showroom.x_lead_competitors'.
type XLeadCompetitor struct {
	ID           uint           `json:"id"`            // id
	LeadID       uint           `json:"lead_id"`       // lead_id
	CompetitorID uint           `json:"competitor_id"` // competitor_id
	CreatedBy    uint           `json:"created_by"`    // created_by
	UpdatedBy    uint           `json:"updated_by"`    // updated_by
	CreatedAt    mysql.NullTime `json:"created_at"`    // created_at
	UpdatedAt    mysql.NullTime `json:"updated_at"`    // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the XLeadCompetitor exists in the database.
func (xlc *XLeadCompetitor) Exists() bool {
	return xlc._exists
}

// Deleted provides information if the XLeadCompetitor has been deleted from the database.
func (xlc *XLeadCompetitor) Deleted() bool {
	return xlc._deleted
}

// Insert inserts the XLeadCompetitor to the database.
func (xlc *XLeadCompetitor) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if xlc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO x_showroom.x_lead_competitors (` +
		`lead_id, competitor_id, created_by, updated_by, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, xlc.LeadID, xlc.CompetitorID, xlc.CreatedBy, xlc.UpdatedBy, xlc.CreatedAt, xlc.UpdatedAt)
	res, err := db.Exec(sqlstr, xlc.LeadID, xlc.CompetitorID, xlc.CreatedBy, xlc.UpdatedBy, xlc.CreatedAt, xlc.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	xlc.ID = uint(id)
	xlc._exists = true

	return nil
}

// Update updates the XLeadCompetitor in the database.
func (xlc *XLeadCompetitor) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xlc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if xlc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE x_showroom.x_lead_competitors SET ` +
		`lead_id = ?, competitor_id = ?, created_by = ?, updated_by = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, xlc.LeadID, xlc.CompetitorID, xlc.CreatedBy, xlc.UpdatedBy, xlc.CreatedAt, xlc.UpdatedAt, xlc.ID)
	_, err = db.Exec(sqlstr, xlc.LeadID, xlc.CompetitorID, xlc.CreatedBy, xlc.UpdatedBy, xlc.CreatedAt, xlc.UpdatedAt, xlc.ID)
	return err
}

// Save saves the XLeadCompetitor to the database.
func (xlc *XLeadCompetitor) Save(db XODB) error {
	if xlc.Exists() {
		return xlc.Update(db)
	}

	return xlc.Insert(db)
}

// Delete deletes the XLeadCompetitor from the database.
func (xlc *XLeadCompetitor) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !xlc._exists {
		return nil
	}

	// if deleted, bail
	if xlc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM x_showroom.x_lead_competitors WHERE id = ?`

	// run query
	XOLog(sqlstr, xlc.ID)
	_, err = db.Exec(sqlstr, xlc.ID)
	if err != nil {
		return err
	}

	// set deleted
	xlc._deleted = true

	return nil
}

// XLeadCompetitorsByCompetitorID retrieves a row from 'x_showroom.x_lead_competitors' as a XLeadCompetitor.
//
// Generated from index 'x_lead_competitors_competitor_id_foreign'.
func XLeadCompetitorsByCompetitorID(db XODB, competitorID uint) ([]*XLeadCompetitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, lead_id, competitor_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_competitors ` +
		`WHERE competitor_id = ?`

	// run query
	XOLog(sqlstr, competitorID)
	q, err := db.Query(sqlstr, competitorID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadCompetitor{}
	for q.Next() {
		xlc := XLeadCompetitor{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlc.ID, &xlc.LeadID, &xlc.CompetitorID, &xlc.CreatedBy, &xlc.UpdatedBy, &xlc.CreatedAt, &xlc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlc)
	}

	return res, nil
}

// XLeadCompetitorsByCreatedBy retrieves a row from 'x_showroom.x_lead_competitors' as a XLeadCompetitor.
//
// Generated from index 'x_lead_competitors_created_by_foreign'.
func XLeadCompetitorsByCreatedBy(db XODB, createdBy uint) ([]*XLeadCompetitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, lead_id, competitor_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_competitors ` +
		`WHERE created_by = ?`

	// run query
	XOLog(sqlstr, createdBy)
	q, err := db.Query(sqlstr, createdBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadCompetitor{}
	for q.Next() {
		xlc := XLeadCompetitor{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlc.ID, &xlc.LeadID, &xlc.CompetitorID, &xlc.CreatedBy, &xlc.UpdatedBy, &xlc.CreatedAt, &xlc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlc)
	}

	return res, nil
}

// XLeadCompetitorByID retrieves a row from 'x_showroom.x_lead_competitors' as a XLeadCompetitor.
//
// Generated from index 'x_lead_competitors_id_pkey'.
func XLeadCompetitorByID(db XODB, id uint) (*XLeadCompetitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, lead_id, competitor_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_competitors ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	xlc := XLeadCompetitor{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&xlc.ID, &xlc.LeadID, &xlc.CompetitorID, &xlc.CreatedBy, &xlc.UpdatedBy, &xlc.CreatedAt, &xlc.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &xlc, nil
}

// XLeadCompetitorsByLeadID retrieves a row from 'x_showroom.x_lead_competitors' as a XLeadCompetitor.
//
// Generated from index 'x_lead_competitors_lead_id_foreign'.
func XLeadCompetitorsByLeadID(db XODB, leadID uint) ([]*XLeadCompetitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, lead_id, competitor_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_competitors ` +
		`WHERE lead_id = ?`

	// run query
	XOLog(sqlstr, leadID)
	q, err := db.Query(sqlstr, leadID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadCompetitor{}
	for q.Next() {
		xlc := XLeadCompetitor{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlc.ID, &xlc.LeadID, &xlc.CompetitorID, &xlc.CreatedBy, &xlc.UpdatedBy, &xlc.CreatedAt, &xlc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlc)
	}

	return res, nil
}

// XLeadCompetitorsByUpdatedBy retrieves a row from 'x_showroom.x_lead_competitors' as a XLeadCompetitor.
//
// Generated from index 'x_lead_competitors_updated_by_foreign'.
func XLeadCompetitorsByUpdatedBy(db XODB, updatedBy uint) ([]*XLeadCompetitor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, lead_id, competitor_id, created_by, updated_by, created_at, updated_at ` +
		`FROM x_showroom.x_lead_competitors ` +
		`WHERE updated_by = ?`

	// run query
	XOLog(sqlstr, updatedBy)
	q, err := db.Query(sqlstr, updatedBy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*XLeadCompetitor{}
	for q.Next() {
		xlc := XLeadCompetitor{
			_exists: true,
		}

		// scan
		err = q.Scan(&xlc.ID, &xlc.LeadID, &xlc.CompetitorID, &xlc.CreatedBy, &xlc.UpdatedBy, &xlc.CreatedAt, &xlc.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &xlc)
	}

	return res, nil
}
